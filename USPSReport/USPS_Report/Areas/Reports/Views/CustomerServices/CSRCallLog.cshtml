@model USPS_Report.Areas.Reports.Models.CallLogVM
@using Kendo.Mvc.UI
@{
    ViewBag.Title = "CSRCallLog";
    Layout = "~/Areas/Reports/Views/Shared/_noSideBarLayout.cshtml";
}

@if (Model.OpPermission == true)
{
   
    <h3 style="color:red">You do not have permission to access this page </h3>
    <p>Click <a href='@(Url.Action("AddPermission", "Generator"))'><b>Here</b></a> to request access.You will be notified via email once a decision has been made. </p>
}

else
{

@*@Html.DisplayFor(m=>m.errormsg)*@
<div>

    @using (Html.BeginForm("CSRCallLog", "CustomerServices", FormMethod.Post))
    {
        @Html.ValidationMessageFor(model => model.Account)
        <div>
            <label>Account </label>
         @Html.TextBoxFor(m => m.Account, new { Title = "Enter a Valid Account Number" })
           

          
            <button class="btn btn-primary btn-large"  type="submit" >Submit</button>
        </div>
    }
</div>

@*@if (Model.Account != null)
{

    <script type="text/javascript">
        $(document).ready(function () {
            

            var relativeTimeValue = startandstop();

            $('#stopwatch').text(relativeTimeValue);
        });
    </script>
    @Html.TextBoxFor(m => m.TimerTxt, new { id = "stopwatch" });
<input id="stopwatch" type="text" value="0:0:0"/>
}*@

<hr />
if (Model != null && Model.firstTime == true && Model.details != null)
{

    if (Model.details.firstName == "WrongAccount")
    {
        <h3 style="color:red">Invalid Account Number</h3>
    }

    else
    {
    <script type="text/javascript">
        $(document).ready(function () {


                var relativeTimeValue = startandstop();

            $('#stopwatch').text(relativeTimeValue);
        });


        function SubmitConfirm() {
            if (confirm("Are you sure want to submit the record?"))
                return true;
            else
                return false;
        }
    </script>


    <div>
        @using (Html.BeginForm("AddCSRCallLog", "CustomerServices", FormMethod.Post, new { onsubmit = "return SubmitConfirm()" }))
        {
         @Html.ValidationSummary();

            @Html.HiddenFor(m => m.Account)

             <div class="row">
                <div class="col-md-10"></div>
                <div class="col-md-2">
                    <label>Timer:</label> @Html.TextBoxFor(m => m.TimerTxt, null, new { id = "stopwatch", @class = "text-field", @readonly = "readonly" })
                </div>
            </div>
            <div class="outer">
                <p>Account Information</p>
            </div>
            @Html.Partial("_AccountInformation", Model)
            <br />
            @(Html.Kendo().PanelBar()
                                        .Name("newcalllog")
                                             .ExpandMode(PanelBarExpandMode.Multiple)
                                        .Items(items =>
                                        {
                                @*items.Add()
                        .Text("AccountInfo")
                        .Content( @<div> @Html.Partial("_AccountInformation", Model) </div>)
                                                     .Expanded(true);*@

            items.Add()
    .Text("Billing/Payments")
    .Content( @<div> @Html.Partial("_Billing", Model) </div>);

            items.Add()
.Text("Demographic Changes")

//  .LoadContentFrom("AccountStatus", "CustomerServices", new { _vm = Model });
.Content( @<div> @Html.Partial("_DemographicChanges", Model) </div>);

                                        items.Add()
                            .Text("Documentation")
                            .Content( @<div> @Html.Partial("_Documentation", Model) </div>);

                                        items.Add()
                       .Text("Insurance")
                       .Content( @<div> @Html.Partial("_InsuranceChanges", Model) </div>);

                                        items.Add()
                       .Text("New Account/Restart")
                       .Content( @<div> @Html.Partial("_NewAccount", Model) </div>);

                                        items.Add()
                            .Text("Order Confirmation")
                       .Content( @<div> @Html.Partial("_OrderConfirmation", Model) </div>);

                                        items.Add()
                        .Text("Order Status")
                       .Content( @<div> @Html.Partial("_OrderStatus", Model) </div>);

                                        items.Add()
                       .Text("RWO Changes")
                       .Content( @<div> @Html.Partial("_ProductChange", Model) </div>);

                                        items.Add()
                   .Text("Sample")
                  .Content( @<div> @Html.Partial("_SampleSent", Model) </div>);


                                        items.Add()
             .Text("Shipping Issue")
             .Content( @<div> @Html.Partial("_ShippingIssue", Model) </div>);

                                        items.Add()
             .Text("Transferred Call")
             .Content( @<div> @Html.Partial("_TransferredCall", Model) </div>);


                                        items.Add()
        .Text("Complaints")
        .Content( @<div> @Html.Partial("_Compliant", Model) </div>);

                                        items.Add()
                  .Text("Other CallHandling")
                  .Content( @<div> @Html.Partial("_OtherHandling", Model) </div>);
                                        })
)
            <br />
            <button class="btn btn-primary btn-large" id="startandstopbutton"  type="submit" >Submit </button>

        }
    </div>
    }
}


}
<script>

    var stopwatch;
    var runningstate = 0; // 1 means the timecounter is running 0 means counter stopped
    var stoptime = 0;
    var lapcounter = 0;
    var currenttime;
    var lapdate = '';
    var lapdetails;

    function timecounter(starttime) {
        currentdate = new Date();
        lapdetails = document.getElementById('lapdetails');
        stopwatch = document.getElementById('stopwatch');

        var timediff = currentdate.getTime() - starttime;
        if (runningstate == 0) {
            timediff = timediff + stoptime
        }
        if (runningstate == 1) {
            stopwatch.value = formattedtime(timediff);
            refresh = setTimeout('timecounter(' + starttime + ');', 10);
        }
        else {
            window.clearTimeout(refresh);
            stoptime = timediff;
        }
    }

    function marklap() {
        if (runningstate == 1) {
            if (lapdate != '') {
                var lapold = lapdate.split(':');
                var lapnow = stopwatch.value.split(':');
                var lapcount = new Array();
                var x = 0
                for (x; x < lapold.length; x++) {
                    lapcount[x] = new Array();
                    lapcount[x][0] = lapold[x] * 1;
                    lapcount[x][1] = lapnow[x] * 1;
                }
                if (lapcount[1][1] < lapcount[1][0]) {
                    lapcount[1][1] += 60;
                    lapcount[0][1] -= 1;
                }
                if (lapcount[2][1] < lapcount[2][0]) {
                    lapcount[2][1] += 10;
                    lapcount[1][1] -= 1;
                }
                var mzeros = (lapcount[0][1] - lapcount[0][0]) < 10 ? '0' : '';
                var szeros = (lapcount[1][1] - lapcount[1][0]) < 10 ? '0' : '';
                lapdetails.value += '\t+' + mzeros + (lapcount[0][1] - lapcount[0][0]) + ':'
                 + szeros + (lapcount[1][1] - lapcount[1][0]) + ':'
                    + (lapcount[2][1] - lapcount[2][0]) + '\n';
            }
            lapdate = stopwatch.value;
            lapdetails.value += (++lapcounter) + '. ' + stopwatch.value;
        }
    }
    function startandstop() {
        var startandstop = document.getElementById('startandstopbutton');
        var startdate = new Date();
        var starttime = startdate.getTime();
        if (runningstate == 0) {
            startandstop.value = 'Stop';
            runningstate = 1;
            timecounter(starttime);
        }
        else {
            startandstop.value = 'Start';
            runningstate = 0;
            lapdate = '';
        }
    }
    function resetstopwatch() {
        lapdetails.value = '';
        lapcounter = 0;
        stoptime = 0;
        lapdate = '';
        window.clearTimeout(refresh);
        if (runningstate == 1) {
            var resetdate = new Date();
            var resettime = resetdate.getTime();
            timecounter(resettime);
        }
        else {
            stopwatch.value = "0:0:0";
        }
    }
    function formattedtime(unformattedtime) {
        var decisec = Math.floor(unformattedtime / 100) + '';
        var second = Math.floor(unformattedtime / 1000);
        var minute = Math.floor(unformattedtime / 60000);
        decisec = decisec.charAt(decisec.length - 1);
        second = second - 60 * minute + '';
        return minute + ':' + second + ':' + decisec;
    }
    //addEventListener("keyup", myScript);
    $('#Others').keyup(function () {
        //alert("key");
        document.getElementById("Others").removeAttribute("style");             
    });
    $('#ddout').change(function () {
        //alert("key");
        document.getElementById("ddout").removeAttribute("style");
    });

    $('#startandstopbutton').click(function () {
        //var $this = $(this);    
        var tn = document.getElementById('TrackingNumber');
        var wo = document.getElementById('WorkOrder');
        var prod = document.getElementById('Product');
        var dc = document.getElementById('DeliveryCompany');
        if (tn.value != "" || wo.value != "" || prod.value != "" || dc.value != "") {
            if ($('#BloodPressureMonitors').prop("checked") == false
                && $('#BreastPumps').prop("checked") == false
                && $('#ContGlucoseMonitoring').prop("checked") == false
                && $('#DiabeticTestSup').prop("checked") == false
                && $('#EnteralNutrition').prop("checked") == false
                && $('#ExternalDefibrillator').prop("checked") == false
                && $('#IncontinenceSupplies').prop("checked") == false
                && $('#InsulinPumpsSupplies').prop("checked") == false
                && $('#InsSyrPenNeed').prop("checked") == false
                && $('#OstomySupplies').prop("checked") == false
                && $('#PleurXDrainSys').prop("checked") == false
                && $('#PTINRTesting').prop("checked") == false
                && $('#TENSUnitSup').prop("checked") == false
                && $('#UrologicalSupplies').prop("checked") == false
                && $('#WoundCareSupplies').prop("checked") == false
                && $('#OtherUnsureSupplies').prop("checked") == false) {
                alert("No option has been selected in the Product Line section of the Complaint");
                return false;
            }

            if ($('#BDI').prop("checked") == false
                && $('#BPnBPM').prop("checked") == false
                && $('#CallCenter').prop("checked") == false
                && $('#CSRAssessment').prop("checked") == false
                && $('#DynamicSynergy').prop("checked") == false
                && $('#Enteral').prop("checked") == false
                && $('#HGS').prop("checked") == false
                && $('#InsulinPumpCGM').prop("checked") == false
                && $('#MedicalDocuments').prop("checked") == false
                && $('#NewAccountTeam').prop("checked") == false
                && $('#Nurses').prop("checked") == false
                && $('#QualityAssurance').prop("checked") == false
                && $('#Shipping').prop("checked") == false
                && $('#THC').prop("checked") == false
                && $('#Troy').prop("checked") == false
                && $('#Verification').prop("checked") == false
                && $('#WebSupport').prop("checked") == false
                && $('#WoundCareOstomyTENS').prop("checked") == false
                && $('#OtherUnsureTeam').prop("checked") == false) {
                alert("No option has been selected in the Team section of the Complaint");
                return false;
            }

            if ($('#Compliance').prop("checked") == false
                && $('#CustomerService').prop("checked") == false
                && $('#Discrimination').prop("checked") == false
                && $('#HealthPlan').prop("checked") == false
                && $('#ProductDefectiveQuality').prop("checked") == false
                && $('#ShippingUSPS').prop("checked") == false
                && $('#ShippingWarehouse').prop("checked") == false
                && $('#SmartAction').prop("checked") == false
                && $('#TextMessaging').prop("checked") == false
                && $('#WebsitePortal').prop("checked") == false) {
                alert("No option has been selected in the Complaint Type section of the Complaint");
                return false;
            }

        }
        
        if ($('#Compliance').is(':checked') || $('#CustomerService').is(':checked') || $('#Discrimination').is(':checked') || $('#HealthPlan').is(':checked') || $('#ProductDefectiveQuality').is(':checked')
            || $('#ShippingUSPS').is(':checked') || $('#ShippingWarehouse').is(':checked') || $('#SmartAction').is(':checked') || $('#TextMessaging').is(':checked') || $('#WebsitePortal').is(':checked')) {
            //alert("test test");
            var oth = document.getElementById('Others');
            var out = document.getElementById('ddout');
            if (!$('#Others').val()) {
                oth.style.backgroundColor = "#ffeeee";
                oth.style.border = "1px solid #ff0000";
                return false;
            }
            else {
                //debugger;
                   //alert("pass");
                document.getElementById("Others").removeAttribute("style");             
                //document.getElementById('Others').style.backgroundColor = "transparent";
                ////oth.style.backgroundColor = "";
                //oth.style.border = "";
            }
            //debugger;
            //alert($('#ddout').val());
            if (document.getElementById('ddout').value=="") {
                out.style.backgroundColor = "#ffeeee";
                out.style.border = "1px solid #ff0000";
                return false;
            }
            else {
                //debugger;
                //alert("pass");
                document.getElementById("ddout").removeAttribute("style");
                //document.getElementById('Others').style.backgroundColor = "transparent";
                ////oth.style.backgroundColor = "";
                //oth.style.border = "";
            }
            
        }
        //debugger;
        //alert("wow");
        //alert(document.getElementById('myid').value);
    });
</script>

<style>
     .outer {
        width: 100%;
        color: navy;
        background-color: lightblue;
        /*border: 2px solid blue;*/
        padding: 5px;
    }

    .c {
        text-align: center;
    }
    .text-field{
    background-color:#FFFFCC;
    color : #FF0000;
    width : 60px;
   font-size:large;
    }

    .field-validation-error
{
color: #ff0000;
}
.field-validation-valid
{
display: none;
}
.input-validation-error
{
border: 1px solid #ff0000;
background-color: #ffeeee;
}
.validation-summary-errors
{
font-weight: bold;
color: #ff0000;
}
.validation-summary-valid
{
display: none;
}
</style>


