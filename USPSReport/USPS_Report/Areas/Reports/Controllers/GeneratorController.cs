using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using iTextSharp;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;

using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using USPS_Report.Areas.Reports.Models;
using ReportsDatabase;
using System.Net.Mail;
using System.Text;
using System.Text.RegularExpressions;




//using ite.text.pdf.TextField;

namespace USPS_Report.Areas.Reports.Controllers
{
    public class GeneratorController : Controller
    {
        // GET: Reports/Generator
        iTextSharp.text.Image image39 = null;


        public static iTextSharp.text.Image GetBarcode39(PdfContentByte pdfContentByte, string code, bool extended)
        {
            Barcode39 barcode39 = new Barcode39
            {
                Code = code,
                StartStopText = false,
                Extended = extended
            };
            return barcode39.CreateImageWithBarcode(pdfContentByte, null, null);
        }
        public ActionResult Index(bool? FileExists, string TestName, Int32? TestId, bool? IsPage)
        {
            ID_VM id_op = new ID_VM();
            using (HHSQLDBEntities _db = new HHSQLDBEntities())
            {
                var components = User.Identity.Name.Split('\\');

                var userName = components.Last();
                id_op = (from emp in _db.tbl_Operator_Table
                         where emp.OperatorName.ToUpper() == userName.ToUpper() && emp.DeletedDate == null && emp.InactiveDate == null
                         select new ID_VM
                         {
                             // name = emp.empFullName,
                             ID = emp.ID
                         }).Take(1).SingleOrDefault();
            }



            GeneratorModel _vm = new GeneratorModel();
            _vm.FedEx = "1";
            _vm.RXDate = DateTime.Today.Date;
            if (id_op == null) { _vm.OpPermission = true; }
            _vm.FileExists = FileExists;

            _vm.testName = TestName;
            _vm.testid = TestId;
            _vm.IsPage = IsPage;

            _vm.EmailSuccessMsg = TempData["EmailSuccessMsg"] != null ? Convert.ToString(TempData["EmailSuccessMsg"]) : "";

            // unselect for dropdown payer type
            // _vm.payerid = 0;
            // _vm.payerType = new SelectList(ProductsReport.GetVendorName(), "vendorid", "VendorName");            

            return View(_vm);

        }



        public ActionResult AddPermission()
        {
            AccessRequest.sendEmail();
            return View();
        }

        [HttpPost]
        public ActionResult Index(GeneratorModel _vm)
        {
            _vm.FedEx = "1";
            _vm.RXDate = DateTime.Today.Date;
            _vm.details = AOBGenerator.GetAccountDetails(_vm.Account);
            // Populate Email textbox with account holder email
            _vm.Email = _vm.details == null ? "" : _vm.details.Email;
            bool res = AOBGenerator.CheckIfBCN(_vm.Account);
            bool resMAPPO = AOBGenerator.CheckIfMAPPO(_vm.Account);

            if (res == true || resMAPPO == true)
            {
                _vm.IsChineseFormAvail = false;
                _vm.IsRussianFormAvail = false;
                _vm.IsArmenianFormAvail = false;
                _vm.IsArabicFormAvail = false;
            }
            else
            {
                _vm.IsChineseFormAvail = true;
                _vm.IsRussianFormAvail = true;
                _vm.IsArmenianFormAvail = true;
                _vm.IsArabicFormAvail = true;
            }

            if (_vm.Option == "15") //Payment Collection Form
            {
                prolist _prod = new prolist();
                _prod.insRt = "0";
                _prod.amt = "0";
                _vm.prodlist = AOBGenerator.GetItems(_vm.Account);
                _vm.prodlist.Add(_prod);
                _vm.prodlist.Add(_prod);
                _vm.prodlist.Add(_prod);


            }

            if (_vm.Option == "16") //Detailed Receipt Letter
            {
                prolist _prod1 = new prolist();
                _prod1.insRt = "0";
                _prod1.amt = "0";
                _vm.prodlist = AOBGenerator.GetAllowableAmount(_vm.Account);


                //--- calculating ins rate
                foreach (var item in _vm.prodlist)
                {
                    if (item.Multiplier == 0)
                    {
                        item.qtycal = item.qtycal * Convert.ToInt32(item.perQty);
                    }
                    if (item.UnitPrice == null)
                    {
                        item.UnitPrice = 0;
                    }

                    //  item.insRt = String.Format("{0:0.##}", (item.qtycal * item.UnitPrice)); 
                    item.insRt = String.Format("{0:C}", (item.qtycal * item.UnitPrice));
                    item.amt = "0";
                }
                _vm.prodlist.Add(_prod1);
                _vm.prodlist.Add(_prod1);
                _vm.prodlist.Add(_prod1);
                //--------------------- 


            }


            // unselect for dropdown payer type
            // _vm.payerid = 0;
            //_vm.payerType = new SelectList(AOBGenerator.GetPayerType(_vm.Account), "payerid", "PayerName");


            return View(_vm);


        }


        //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _smallFont, new Chunk("Generated " +
        //    DateTime.Now.Day.ToString() + " " +
        //  System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(DateTime.Now.Month) + " " +
        //  DateTime.Now.Year.ToString() + " " +
        //  DateTime.Now.ToShortTimeString()));

        // Set up the fonts to be used on the pages



        private iTextSharp.text.Font _largeFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 17, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _standardFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 13, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _standardBoldFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 13, iTextSharp.text.Font.BOLD, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _standardBoldBlueUnderlineFont = new iTextSharp.text.Font(iTextSharp.text.Font.TIMES_ROMAN, 13, iTextSharp.text.Font.BOLD | Font.UNDERLINE, iTextSharp.text.Color.BLUE);
        private iTextSharp.text.Font _standardBoldBlueUnderlineFont9 = new iTextSharp.text.Font(iTextSharp.text.Font.TIMES_ROMAN, 9, iTextSharp.text.Font.BOLD | Font.UNDERLINE, iTextSharp.text.Color.BLUE);

        private iTextSharp.text.Font _Font8Font = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 8, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font7 = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 7, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font9 = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 9, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font100 = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 100, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _BoldFont9 = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 9, iTextSharp.text.Font.BOLD, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font9BoldBlueUnderlineFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 9, iTextSharp.text.Font.BOLD | Font.UNDERLINE, iTextSharp.text.Color.BLUE);


        private iTextSharp.text.Font _Font12BoldFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 12, iTextSharp.text.Font.BOLD, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font12BoldUnderlineFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 12, iTextSharp.text.Font.UNDERLINE | Font.BOLD, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font12ItalicFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 12, iTextSharp.text.Font.ITALIC, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font12BoldBlueUnderlineFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 12, iTextSharp.text.Font.BOLD | Font.UNDERLINE, iTextSharp.text.Color.BLUE);
        private iTextSharp.text.Font _Font12Font = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 12, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font12FontUnderline = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 12, iTextSharp.text.Font.NORMAL | Font.UNDERLINE, iTextSharp.text.Color.BLACK);



        private iTextSharp.text.Font _Font11Font = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 11, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);

        private iTextSharp.text.Font _Font11BoldFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 11, iTextSharp.text.Font.BOLD, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font11BoldBlueUnderlineFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 11, iTextSharp.text.Font.BOLD | Font.UNDERLINE, iTextSharp.text.Color.BLUE);
        private iTextSharp.text.Font _Font11BoldUnderlineFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 11, iTextSharp.text.Font.UNDERLINE | Font.BOLD, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font11ItalicFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 11, iTextSharp.text.Font.ITALIC, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font11FontUnderline = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 11, iTextSharp.text.Font.NORMAL | iTextSharp.text.Font.UNDERLINE, iTextSharp.text.Color.BLACK);

        private iTextSharp.text.Font _Font14Font = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 14, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font14ItalicFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 14, iTextSharp.text.Font.ITALIC, iTextSharp.text.Color.BLACK);

        private iTextSharp.text.Font _Font14UnderlineFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 14, iTextSharp.text.Font.UNDERLINE, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font14BoldFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 14, iTextSharp.text.Font.BOLD, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font14UnderlineBlueFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 14, iTextSharp.text.Font.UNDERLINE, iTextSharp.text.Color.BLUE);
        private iTextSharp.text.Font _Font12UnderlineBlueFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 12, iTextSharp.text.Font.UNDERLINE, iTextSharp.text.Color.BLUE);



        private iTextSharp.text.Font _Font16Font = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 16, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font16ItalicFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 16, iTextSharp.text.Font.ITALIC, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font16UnderlineFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 16, iTextSharp.text.Font.UNDERLINE, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font16BoldFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 16, iTextSharp.text.Font.BOLD, iTextSharp.text.Color.BLACK);


        private iTextSharp.text.Font _Font10Font = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 10, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font9Font = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 9, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font7Font = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 9, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _FontGray10Font = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 10, iTextSharp.text.Font.NORMAL, iTextSharp.text.Color.LIGHT_GRAY);
        private iTextSharp.text.Font _Font10BoldBlueUnderlineFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 10, iTextSharp.text.Font.BOLD | Font.UNDERLINE, iTextSharp.text.Color.BLUE);
        private iTextSharp.text.Font _Font10BoldFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 10, iTextSharp.text.Font.BOLD, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font10ItalicFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 10, iTextSharp.text.Font.ITALIC, iTextSharp.text.Color.BLACK);

        // private iTextSharp.text.Font _Font9BoldFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 12, iTextSharp.text.Font.BOLD, iTextSharp.text.Color.BLACK);

        private iTextSharp.text.Font _Font25BoldItalicFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 20, iTextSharp.text.Font.BOLD | iTextSharp.text.Font.ITALIC, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font25BoldFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 20, iTextSharp.text.Font.BOLD, iTextSharp.text.Color.BLACK);
        private iTextSharp.text.Font _Font18BoldItalicFont = new iTextSharp.text.Font(iTextSharp.text.Font.HELVETICA, 18, iTextSharp.text.Font.BOLD | iTextSharp.text.Font.ITALIC, iTextSharp.text.Color.BLACK);

        private static void AddBarCodeallpagesAOB(string fpath, long? Account,string DocumentType,float AbsoluteX, float AbsoluteY)
        {
            //added pradeep
            //add to attempts table
            string Type = DocumentType.Split('_').Last().Split('.').First();

            int attemptnumber = USPS_Report.Models.BarCodeInfo.AddBarcodeAttempt((int)Account, Type);
            var reader1 = new PdfReader(fpath);
            string barcodeallfiles = @"C://LettersTemp//AOBbarcodeallfiles" + Account.ToString() + ".pdf";
            var fileStream = new FileStream(barcodeallfiles, FileMode.Create, FileAccess.Write);
            var document = new Document(reader1.GetPageSizeWithRotation(1));
            var writer = PdfWriter.GetInstance(document, fileStream);
            document.Open();
            for (var i = 1; i <= reader1.NumberOfPages; i++)
            {
                document.NewPage();
                var importedPage = writer.GetImportedPage(reader1, i);
                var contentByte = writer.DirectContent;
                contentByte.BeginText();           
                iTextSharp.text.Image image39_barcode = GetBarcode39(contentByte, Account.ToString() + "-"+Type + "-" + attemptnumber + "-" + i, false);
                image39_barcode.SetAbsolutePosition(AbsoluteX, AbsoluteY );
                contentByte.AddImage(image39_barcode);
                contentByte.EndText();
                contentByte.AddTemplate(importedPage, 0, 0);
            }
            document.Close();
            writer.Close();
            fileStream.Dispose();

            if (System.IO.File.Exists(barcodeallfiles))
            {
                System.IO.File.Copy(barcodeallfiles, fpath, true);
                System.IO.File.Delete(barcodeallfiles);
            }
            //end
        }
        private static void AddBarCodeallpages(string fpath, long? Account, string doctype)
        {
            //added pradeep
            //add to attempts table
            int attemptnumber = USPS_Report.Models.AOBInfo.AddAOBAttempt((int)Account);
            var reader1 = new PdfReader(fpath);
            string barcodeallfiles = @"C://LettersTemp//barcodeallfiles" + Account.ToString() + ".pdf";
            var fileStream = new FileStream(barcodeallfiles, FileMode.Create, FileAccess.Write);
            var document = new Document(reader1.GetPageSizeWithRotation(1));
            var writer = PdfWriter.GetInstance(document, fileStream);
            document.Open();
            for (var i = 1; i <= reader1.NumberOfPages; i++)
            {
                document.NewPage();
                var importedPage = writer.GetImportedPage(reader1, i);
                var contentByte = writer.DirectContent;                            
                iTextSharp.text.Image image39_barcode = GetBarcode39(contentByte, Account.ToString() + "-" +doctype+ "-" +attemptnumber+ "-" +i, false);
                image39_barcode.SetAbsolutePosition(250f, 750f);
                contentByte.AddImage(image39_barcode);
                contentByte.EndText();
                contentByte.AddTemplate(importedPage, 0, 0);
            }
            document.Close();
            writer.Close();
            fileStream.Dispose();

            if (System.IO.File.Exists(barcodeallfiles))
            {
                System.IO.File.Copy(barcodeallfiles, fpath, true);
                System.IO.File.Delete(barcodeallfiles);
            }
            //end
        }
        [HttpPost]
        public ActionResult Build(GeneratorModel _vm)
        {

            _vm.IsPage = true;

            bool otherlanguageSelectionOrBraille = false;
            bool otherLanguageSelection = false;
            #region Send Mail for other languages
            if (_vm.Option == "1" || _vm.Option == "2" || _vm.Option == "6")
            {
                if (_vm.Option == "1")
                {
                    if (!string.IsNullOrWhiteSpace(_vm.OtherLanguage) && _vm.OtherLanguage.Trim().ToUpper() != "ENGLISH" && _vm.OtherLanguage.Trim().ToUpper() != "SPANISH"
                          && _vm.OtherLanguage.Trim().ToUpper() != "CHINESE" && _vm.OtherLanguage.Trim().ToUpper() != "RUSSIAN")
                    {
                        otherLanguageSelection = true;
                    }


                }
                else if (_vm.Option == "2")
                {
                    if (!string.IsNullOrWhiteSpace(_vm.OtherLanguage) && _vm.OtherLanguage.Trim().ToUpper() != "ENGLISH" && _vm.OtherLanguage.Trim().ToUpper() != "SPANISH")
                    {
                        otherLanguageSelection = true;
                    }

                }
                else if (_vm.Option == "6")
                {
                    if (!string.IsNullOrWhiteSpace(_vm.OtherLanguage) && _vm.OtherLanguage.Trim().ToUpper() != "ENGLISH")
                    {
                        otherLanguageSelection = true;
                    }

                }

                otherlanguageSelectionOrBraille = (otherLanguageSelection || _vm.NeedBrailleLetter);

                // if other language text is populated or selected Braille letter option .. send email to Debra 
                if (otherlanguageSelectionOrBraille)
                {

                    sendEmail(_vm);
                    TempData["EmailSuccessMsg"] = "An email notification has been sent to generate requested letter";

                }
            }

            #endregion

            if (_vm.Option == "1") //_vm.Option == "AOB"
            {

                if (!otherlanguageSelectionOrBraille)
                {

                    AddAOBNote.AddAOBTrack(_vm);
                    bool res = AOBGenerator.CheckIfBCN(_vm.Account);
                    bool resMappo = AOBGenerator.CheckIfMAPPO(_vm.Account);

                    // Code for removing linebreaks , carriage return and tabs
                    _vm.details.firstName = string.IsNullOrEmpty(_vm.details.firstName) ? "" : Regex.Replace(_vm.details.firstName.Trim(), @"\t|\n|\r", "");
                    _vm.details.address1 = string.IsNullOrEmpty(_vm.details.address1) ? "" : Regex.Replace(_vm.details.address1.Trim(), @"\t|\n|\r", "");
                    _vm.details.address2 = string.IsNullOrEmpty(_vm.details.address2) ? "" : Regex.Replace(_vm.details.address2.Trim(), @"\t|\n|\r", "");
                    _vm.details.city = string.IsNullOrEmpty(_vm.details.city) ? "" : Regex.Replace(_vm.details.city.Trim(), @"\t|\n|\r", "");
                    _vm.details.state = string.IsNullOrEmpty(_vm.details.state) ? "" : Regex.Replace(_vm.details.state.Trim(), @"\t|\n|\r", "");
                    _vm.details.zipcode = string.IsNullOrEmpty(_vm.details.zipcode) ? "" : Regex.Replace(_vm.details.zipcode.Trim(), @"\t|\n|\r", "");

                    if (res == false && resMappo == false)
                    {
                        if (_vm.chinese == true || _vm.russian == true || _vm.armenian == true || _vm.arabic == true)
                        {


                            if (_vm.chinese == true)
                            {
                                BuildAOBPdf_OtherLanguage(_vm);
                                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                                string filename = Date + "_" + _vm.Account.ToString() + "_AOB_C" + ".pdf";
                                List<string> files = new List<string>();
                                string path1 = "C://LettersTemp//AOB" + "//" + filename;
                                string path2 = "C://LettersTemp//AOB" + "//Static_AOB_Chinese.pdf";
                                files.Add(path1);
                                files.Add(path2);


                                // Merge it with Welcome Letter
                                //   MergePdfs.MergeFilesInbetween("C://Letters//AOB//" + filename, files, 2);
                                MergePdfs.MergeFiles("C://Letters//AOB//" + filename, files, 2);
                                // Delete the temp files
                                MergePdfs.DeleteFiles(path1);



                            }
                            else if (_vm.russian == true)
                            {
                                BuildAOBPdf_OtherLanguage(_vm);
                                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                                string filename = Date + "_" + _vm.Account.ToString() + "_AOB_R" + ".pdf";
                                List<string> files = new List<string>();
                                string path1 = "C://LettersTemp//AOB" + "//" + filename;
                                string path2 = "C://LettersTemp//AOB" + "//Static_AOB_Russian.pdf";
                                files.Add(path1);
                                files.Add(path2);


                                // Merge it with Welcome Letter
                                //  MergePdfs.MergeFilesInbetween("C://Letters//AOB//" + filename, files, 2);
                                MergePdfs.MergeFiles("C://Letters//AOB//" + filename, files, 2);
                                // Delete the temp files
                                MergePdfs.DeleteFiles(path1);
                            }

                            else if (_vm.armenian == true)
                            {
                                BuildAOBPdf_OtherLanguage(_vm);
                                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                                string filename = Date + "_" + _vm.Account.ToString() + "_AOB_A" + ".pdf";
                                List<string> files = new List<string>();
                                string path1 = "C://LettersTemp//AOB" + "//" + filename;
                                string path2 = "C://LettersTemp//AOB" + "//Static_AOB_Armenian.pdf";
                                files.Add(path1);
                                files.Add(path2);


                                // Merge it with Welcome Letter
                                //  MergePdfs.MergeFilesInbetween("C://Letters//AOB//" + filename, files, 2);
                                MergePdfs.MergeFiles("C://Letters//AOB//" + filename, files, 2);
                                // Delete the temp files
                                MergePdfs.DeleteFiles(path1);
                            }

                            else if (_vm.arabic == true)
                            {
                                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                                string filename = Date + "_" + _vm.Account.ToString() + "_AOB_AR" + ".pdf";

                                string path = "C://Letters//AOB" + "//";
                                if (System.IO.File.Exists(path + filename))
                                {
                                    _vm.FileExists = true;
                                }
                                else { _vm.FileExists = false; }

                                List<string> files = new List<string>();
                                string path1_oldfile = "C://LettersTemp//AOB//arabic//AOB_Arabic_firstPage.pdf";
                                string path1_newfile = "C://LettersTemp//AOB//arabic//AOB_Arabic_firstPage_" + _vm.Account.ToString() + ".pdf";
                                string text = _vm.details.firstName;
                                manipulateArabianFirstPagePdf(path1_oldfile, path1_newfile, _vm);


                                string path2 = "C://LettersTemp//AOB//arabic//AOB_Arabic_middlePages.pdf";


                                string path3_oldFile = "C://LettersTemp//AOB//arabic//AOB_Arabic_lastPage.pdf";
                                string path3_newFile = "C://LettersTemp//AOB//arabic//AOB_Arabic_lastPage_" + _vm.Account.ToString() + ".pdf";
                                manipulateArabianLastPagePdf(path3_oldFile, path3_newFile, _vm.Account.ToString(), text);



                                files.Add(path1_newfile);
                                files.Add(path2);
                                files.Add(path3_newFile);


                                // Merge it with Welcome Letter
                                //  MergePdfs.MergeFilesInbetween("C://Letters//AOB//" + filename, files, 2);
                                MergePdfs.MergeFiles("C://Letters//AOB//" + filename, files, 3);
                                // Delete the temp files
                                MergePdfs.DeleteFiles(path3_newFile);
                                MergePdfs.DeleteFiles(path1_newfile);
                            }
                        }
                        else
                        {
                            BuildAOBPdf(_vm);
                        }
                        AddAOBNote.AddNote_AOBGenerator(_vm);
                    }
                    else if (res == true)
                    {
                        // generate the AOB
                        BuildBCNAOBPdf(_vm);
                        string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();

                        string filename = "";
                        string BCNLetter = "C://LettersTemp//BCN//BCN.pdf";
                        var reader = new PdfReader("C://LettersTemp//BCN//BCN.pdf");


                        if (_vm.spanish != true)
                        {
                            filename = Date + "_" + _vm.Account.ToString() + "_BCNAOB" + ".pdf";
                            BCNLetter = "C://LettersTemp//BCN//BCN.pdf";
                        }
                        else
                        {
                            filename = Date + "_" + _vm.Account.ToString() + "_BCNAOB_S" + ".pdf";
                            BCNLetter = "C://LettersTemp//BCN//BCN_S.pdf";
                        }



                        string AOB = "C://LettersTemp//AOB" + "//";
                        string welcomeLetter = "";

                        string path = "";





                        if (_vm.FileFax != true && _vm.FileEmail != true)
                        {
                            List<string> files = new List<string>();
                            path = "C://Letters//AOB" + "//";
                            welcomeLetter = "C://LettersTemp//Mail" + "//";
                            files.Add(welcomeLetter + filename);
                            files.Add(BCNLetter);
                            files.Add(AOB + filename);


                            // Merge it with Welcome Letter
                            MergePdfs.MergeFiles(path + filename, files, 3);
                //added pradeep BarCode
                            AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 400f, 790f); //Add Bar code to all pages.--  
                            //end
                            // Delete the temp files
                            MergePdfs.DeleteFiles(welcomeLetter + filename);

                        }
                        if (_vm.FileEmail == true)
                        {
                            List<string> files = new List<string>();
                            path = "C://Letters//Email" + "//";
                            welcomeLetter = "C://LettersTemp//Email" + "//";
                            files.Add(welcomeLetter + filename);
                            files.Add(BCNLetter);
                            files.Add(AOB + filename);


                            // Merge it with Welcome Letter
                            MergePdfs.MergeFiles(path + filename, files, 3);

                            //added pradeep BarCode
                         AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 400f, 790f); //adding bar code to all pages
                                                                                 //end
                                                                                 // Delete the temp files
                            MergePdfs.DeleteFiles(welcomeLetter + filename);


                            if (System.IO.File.Exists(path + filename))
                            {
                                Emails.AutoEmailAOB(_vm.Email, path + filename, "Assignment of Benefits");
                            }


                        }
                        if (_vm.FileFax == true)
                        {
                            List<string> files = new List<string>();
                            path = "C://Letters//Fax" + "//";
                            welcomeLetter = "C://LettersTemp//Fax" + "//";
                            files.Add(welcomeLetter + filename);
                            files.Add(BCNLetter);
                            files.Add(AOB + filename);

                            // Merge it with Welcome Letter
                            MergePdfs.MergeFiles(path + filename, files, 3);


                            //added pradeep BarCode
                           AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 400f, 790f);
                            //end

                            // Delete the temp files
                            MergePdfs.DeleteFiles(welcomeLetter + filename);

                            if (System.IO.File.Exists(path + filename))
                            {
                                Emails.AutoFax(_vm.FedEx, path + filename);
                            }

                        }


                        // Delete the temp files
                        MergePdfs.DeleteFiles(AOB + filename);

                        AddAOBNote.AddNote_AOBGenerator(_vm);
                    }

                    else if (resMappo == true)
                    {
                        // generate the AOB
                        BuildMAPPOAOBPdf(_vm);
                        string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();

                        string filename = "";
                        string BCNLetter = "C://LettersTemp//MAPPO//MAPPO.pdf";

                        if (_vm.spanish != true)
                        {
                            filename = Date + "_" + _vm.Account.ToString() + "_MAPPOAOB" + ".pdf";
                            BCNLetter = "C://LettersTemp//MAPPO//MAPPO.pdf";
                        }
                        else
                        {
                            filename = Date + "_" + _vm.Account.ToString() + "_MAPPOAOB_S" + ".pdf";
                            BCNLetter = "C://LettersTemp//MAPPO//MAPPO_S.pdf";
                        }



                        string AOB = "C://LettersTemp//AOB" + "//";
                        string welcomeLetter = "";

                        string path = "";





                        if (_vm.FileFax != true && _vm.FileEmail != true)
                        {
                            List<string> files = new List<string>();
                            path = "C://Letters//AOB" + "//";
                            welcomeLetter = "C://LettersTemp//Mail" + "//";
                            files.Add(welcomeLetter + filename);
                            files.Add(BCNLetter);
                            files.Add(AOB + filename);


                            // Merge it with Welcome Letter
                            MergePdfs.MergeFiles(path + filename, files, 3);
                            //added pradeep BarCode
                            AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 400f, 790f); //add bar code to all pages
                            //end
                            // Delete the temp files
                            MergePdfs.DeleteFiles(welcomeLetter + filename);

                        }
                        if (_vm.FileEmail == true)
                        {
                            List<string> files = new List<string>();
                            path = "C://Letters//Email" + "//";
                            welcomeLetter = "C://LettersTemp//Email" + "//";
                            files.Add(welcomeLetter + filename);
                            files.Add(BCNLetter);
                            files.Add(AOB + filename);


                            // Merge it with Welcome Letter
                            MergePdfs.MergeFiles(path + filename, files, 3);

                            //added pradeep BarCode
                            AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 400f, 790f); //add bar code to all pages
                            //end
                            // Delete the temp files
                            MergePdfs.DeleteFiles(welcomeLetter + filename);


                            if (System.IO.File.Exists(path + filename))
                            {
                                Emails.AutoEmailAOB(_vm.Email, path + filename, "Assignment of Benefits");
                            }


                        }
                        if (_vm.FileFax == true)
                        {
                            List<string> files = new List<string>();
                            path = "C://Letters//Fax" + "//";
                            welcomeLetter = "C://LettersTemp//Fax" + "//";
                            files.Add(welcomeLetter + filename);
                            files.Add(BCNLetter);
                            files.Add(AOB + filename);


                            // Merge it with Welcome Letter
                            MergePdfs.MergeFiles(path + filename, files, 3);

                            //added pradeep BarCode
                            AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 400f, 790f); //add bar code to all pages
                            //end
                            // Delete the temp files
                            MergePdfs.DeleteFiles(welcomeLetter + filename);

                            if (System.IO.File.Exists(path + filename))
                            {
                                Emails.AutoFax(_vm.FedEx, path + filename);
                            }
                        }


                        // Delete the temp files
                        MergePdfs.DeleteFiles(AOB + filename);

                        AddAOBNote.AddNote_AOBGenerator(_vm);
                    }
                }
                else
                {
                    AddAOBNote.AddNoteForOtherLanguages(_vm, GetLetterType(_vm.Option));
                }

            }
            else if (_vm.Option == "2")  //_vm.Option == "Contact Letter"
            {
                if (!otherlanguageSelectionOrBraille)
                {
                    BuildCoverLetterPdf(_vm);
                    AddAOBNote.AddNoteCoverLetterGenerator(_vm);
                }
                else
                {
                    AddAOBNote.AddNoteForOtherLanguages(_vm, GetLetterType(_vm.Option));
                }

            }

            else if (_vm.Option == "28")  //_vm.Option == "Sympathy Contact Letter"
            {
                BuildSympathyContactLetterPdf(_vm);
                AddAOBNote.AddNoteSympathyLetterGenerator(_vm);
            }

            else if (_vm.Option == "26")  //_vm.Option == "Medicaid as a Secondary Letter"
            {
                BuildMediciadSecondaryLetterPdf(_vm);
                AddAOBNote.AddMedicateAsSecondaryLetter(_vm);
            }
            else if (_vm.Option == "27")  //_vm.Option == "Off Label Member Letter"
            {
                BuildOffLableLetterPdf(_vm);
                AddAOBNote.AddNoteOffLableLetterGenerator(_vm);
            }
            else if (_vm.Option == "17")  //_vm.Option == "Libre New Member Letter" 
            {

                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                string path = "C://Letters//3 Page" + "//";
                string filename = Date + "_" + _vm.Account.ToString() + "_LNM" + ".pdf";
                if (_vm.FileEmail != true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists(path + filename))
                        _vm.FileExists = true;
                }
                else if (_vm.FileEmail == true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists("C://Letters//Email" + "//" + filename))
                        _vm.FileExists = true;

                }
                else if (_vm.FileFax == true && _vm.FileEmail != true)
                {
                    if (System.IO.File.Exists("C://Letters//Fax" + "//" + filename))
                        _vm.FileExists = true;

                }


                if (_vm.FileExists != true)
                {
                    _vm.FileExists = false;

                    if (_vm.FileEmail != true && _vm.FileFax != true)
                    {
                        // Build pdf
                        BuildLibreMemberLetter(_vm, path, filename);
                        //added pradeep BarCode
                        AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 15f, 750f);
                    }
                    else if (_vm.FileEmail == true && _vm.FileFax == true)
                    {
                        //Fax
                        path = "C://Letters//Fax" + "//";
                        BuildLibreMemberLetter(_vm, path, filename);
                        //added pradeep BarCode
                    //    AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 15f, 750f);
                        Emails.AutoFax(_vm.FedEx, path + filename);


                        // Email
                        path = "C://Letters//Email" + "//";
                        BuildLibreMemberLetter(_vm, path, filename);
                        //added pradeep BarCode
                     //   AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 15f, 750f);
                        Emails.AutoEmail(_vm.Email, path + filename, "Libre New Member letter");

                    }
                    else if (_vm.FileFax == true)
                    {
                        //Fax
                        path = "C://Letters//Fax" + "//";
                        BuildLibreMemberLetter(_vm, path, filename);
                        //added pradeep BarCode
                    //    AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 15f, 750f);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                    else if (_vm.FileEmail == true)
                    {
                        // Email
                        path = "C://Letters//Email" + "//";
                        BuildLibreMemberLetter(_vm, path, filename);
                        //added pradeep BarCode
                  //      AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 15f, 750f);
                        Emails.AutoEmail(_vm.Email, path + filename, "Libre New Member letter");
                    }
                    AddAOBNote.AddNoteLibreLetterGenerator(_vm);
                }
            }

            else if (_vm.Option == "20")  //_vm.Option == "Dexcom New Member Letter-G6"
            {

                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                string path = "C://Letters//2 Page" + "//";
                string filename = Date + "_" + _vm.Account.ToString() + "_DNM_G6" + ".pdf";
                if (_vm.FileEmail != true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists(path + filename))
                        _vm.FileExists = true;
                }
                else if (_vm.FileEmail == true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists("C://Letters//Email" + "//" + filename))
                        _vm.FileExists = true;

                }
                else if (_vm.FileFax == true && _vm.FileEmail != true)
                {
                    if (System.IO.File.Exists("C://Letters//Fax" + "//" + filename))
                        _vm.FileExists = true;

                }


                if (_vm.FileExists != true)
                {
                    _vm.FileExists = false;
                    string oldfile = "C://LettersTemp//DexcomG6//Dexcom.pdf";
                    string CoverLetterGen = "C://LettersTemp//DexcomG6//FaxCoverLetter.pdf";
                    string CoverLetterNew = "C://LettersTemp//DexcomG6//FaxCoverLetter" + _vm.Account.ToString() + ".pdf";
                    string NewfileWithName = "C://LettersTemp//DexcomG6//Dexcom" + _vm.Account.ToString() + ".pdf";
                    string Newfile = "C://LettersTemp//DexcomG6//Dexcom" + _vm.Account.ToString() + "_Temp.pdf";
                    string FirstPage = "C://LettersTemp//DexcomG6//DexcomFirstPage.pdf";
                    string BlankPage = "C://LettersTemp//DexcomG6//blank.pdf";
                    string FirstPageWithAdd = "C://LettersTemp//DexcomG6//DexcomFirstPage" + _vm.Account.ToString() + ".pdf";
                    string name = _vm.details.lastName;
                    string Account = _vm.Account.ToString();
                    string text1 = "Account: " + _vm.Account.ToString();
                    string DOB = Convert.ToDateTime(_vm.details.DOB).ToString("MM/dd/yyyy"); ;
                    AddTxtToPdf(oldfile, NewfileWithName, name, DOB);
                    AddAddressToPdf(FirstPage, FirstPageWithAdd, _vm.details.firstName, _vm.details.address1 + " " + _vm.details.address2, _vm.details.city + ", " + _vm.details.state + " " + _vm.details.zipcode);
                    manipulateDNMPdf(NewfileWithName, Newfile, Account, text1);
                    //Merge file and delete file from temp
                    List<string> files = new List<string>();

                    files.Add(FirstPageWithAdd);
                    files.Add(BlankPage);
                    files.Add(Newfile);
                    files.Add(BlankPage);
                    if (_vm.FileEmail != true && _vm.FileFax != true)
                    {
                        MergePdfs.MergeFiles(path + filename, files, 4);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                    }
                    else if (_vm.FileEmail == true && _vm.FileFax == true)
                    {
                        //Fax
                        path = "C://Letters//Fax" + "//";
                        AddTxtToFaxCoverLetter(CoverLetterGen, CoverLetterNew, _vm.details.firstName, _vm.FedEx);
                        files = new List<string>();
                        files.Add(CoverLetterNew);
                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);

                        MergePdfs.MergeFiles(path + filename, files, 3);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                        MergePdfs.DeleteFiles(CoverLetterNew);


                        // Email
                        path = "C://Letters//Email" + "//";
                        files = new List<string>();

                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);
                        MergePdfs.MergeFiles(path + filename, files, 2);
                        Emails.AutoEmail(_vm.Email, path + filename, "Dexcom-G6 New Member letter");
                        //delete Temp files
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);

                    }
                    else if (_vm.FileFax == true)
                    {
                        AddTxtToFaxCoverLetter(CoverLetterGen, CoverLetterNew, _vm.details.firstName, _vm.FedEx);
                        files = new List<string>();
                        files.Add(CoverLetterNew);
                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);




                        path = "C://Letters//Fax" + "//";
                        MergePdfs.MergeFiles(path + filename, files, 3);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(CoverLetterNew);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                    else if (_vm.FileEmail == true)
                    {
                        path = "C://Letters//Email" + "//";
                        files = new List<string>();

                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);
                        MergePdfs.MergeFiles(path + filename, files, 2);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        Emails.AutoEmail(_vm.Email, path + filename, "Dexcom-G6 New Member letter");
                    }
                    AddAOBNote.AddNoteDexcomG6LetterGenerator(_vm);
                }
            }

            else if (_vm.Option == "19")  //_vm.Option == "Dexcom New Member Letter"
            {

                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                string path = "C://Letters//3 Page" + "//";
                string filename = Date + "_" + _vm.Account.ToString() + "_DNM" + ".pdf";
                if (_vm.FileEmail != true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists(path + filename))
                        _vm.FileExists = true;
                }
                else if (_vm.FileEmail == true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists("C://Letters//Email" + "//" + filename))
                        _vm.FileExists = true;

                }
                else if (_vm.FileFax == true && _vm.FileEmail != true)
                {
                    if (System.IO.File.Exists("C://Letters//Fax" + "//" + filename))
                        _vm.FileExists = true;

                }


                if (_vm.FileExists != true)
                {
                    _vm.FileExists = false;

                    if (_vm.FileEmail != true && _vm.FileFax != true)
                    {
                        // Build pdf
                        BuildDexcomMemberLetter(_vm, path, filename);
                        //added pradeep BarCode
                    //    AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 15f, 750f);
                    }
                    else if (_vm.FileFax == true && _vm.FileEmail == true)
                    {
                        //Fax
                        path = "C://Letters//Fax" + "//";
                        BuildDexcomMemberLetter(_vm, path, filename);
                        //added pradeep BarCode
                     //   AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 15f, 750f);
                        Emails.AutoFax(_vm.FedEx, path + filename);

                        //Email
                        path = "C://Letters//Email" + "//";
                        BuildDexcomMemberLetter(_vm, path, filename);
                        //added pradeep BarCode
                   //     AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 15f, 750f);
                        Emails.AutoEmail(_vm.Email, path + filename, "Dexcom New Member letter");


                    }
                    else if (_vm.FileFax == true)
                    {
                        path = "C://Letters//Fax" + "//";
                        BuildDexcomMemberLetter(_vm, path, filename);
                        //added pradeep BarCode
                   //     AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 15f, 750f);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                    else if (_vm.FileEmail == true)
                    {
                        path = "C://Letters//Email" + "//";
                        BuildDexcomMemberLetter(_vm, path, filename);
                        //added pradeep BarCode
                   //     AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 15f, 750f);
                        Emails.AutoEmail(_vm.Email, path + filename, "Dexcom New Member letter");
                    }
                    AddAOBNote.AddNoteDexcomLetterGenerator(_vm);
                }
            }

            else if (_vm.Option == "21")  //_vm.Option == "Dexcom-G5 Training Letter"
            {
                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                string path = "C://Letters//2 Page" + "//";
                string filename = Date + "_" + _vm.Account.ToString() + "_DXT_G5" + ".pdf";
                if (_vm.FileEmail != true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists(path + filename))
                        _vm.FileExists = true;
                }
                else if (_vm.FileEmail == true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists("C://Letters//Email" + "//" + filename))
                        _vm.FileExists = true;

                }
                else if (_vm.FileFax == true && _vm.FileEmail != true)
                {
                    if (System.IO.File.Exists("C://Letters//Fax" + "//" + filename))
                        _vm.FileExists = true;

                }

                if (_vm.FileExists != true)
                {
                    _vm.FileExists = false;

                    string oldfile = "C://LettersTemp//Dexcom//DexcomTraining.pdf";
                    string CoverLetterGen = "C://LettersTemp//Dexcom//FaxCoverLetter.pdf";
                    string CoverLetterNew = "C://LettersTemp//Dexcom//FaxCoverLetter" + _vm.Account.ToString() + ".pdf";
                    string NewfileWithName = "C://LettersTemp//Dexcom//DexcomTraining" + _vm.Account.ToString() + ".pdf";
                    string Newfile = "C://LettersTemp//Dexcom//DexcomTraining" + _vm.Account.ToString() + "_Temp.pdf";
                    string FirstPage = "C://LettersTemp//Dexcom//DexcomFirstPageTraining.pdf";
                    string BlankPage = "C://LettersTemp//Dexcom//blank.pdf";
                    string FirstPageWithAdd = "C://LettersTemp//Dexcom//DexcomFirstPageTraining" + _vm.Account.ToString() + ".pdf";
                    string name = _vm.details.lastName;
                    string Account = _vm.Account.ToString();
                    string text1 = "Account: " + _vm.Account.ToString();
                    string DOB = Convert.ToDateTime(_vm.details.DOB).ToString("MM/dd/yyyy"); ;
                    AddTxtToPdf_LT(oldfile, NewfileWithName, name, DOB);
                    AddAddressToPdf(FirstPage, FirstPageWithAdd, _vm.details.firstName, _vm.details.address1 + " " + _vm.details.address2, _vm.details.city + ", " + _vm.details.state + " " + _vm.details.zipcode);
                    manipulateLNMPdf(NewfileWithName, Newfile, Account, text1);
                    //Merge file and delete file from temp
                    List<string> files = new List<string>();

                    files.Add(FirstPageWithAdd);
                    files.Add(BlankPage);
                    files.Add(Newfile);
                    files.Add(BlankPage);
                    if (_vm.FileEmail != true && _vm.FileFax != true)
                    {
                        MergePdfs.MergeFiles(path + filename, files, 4);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                    }
                    else if (_vm.FileEmail == true && _vm.FileFax == true)
                    {
                        //Fax
                        path = "C://Letters//Fax" + "//";
                        AddTxtToFaxCoverLetter(CoverLetterGen, CoverLetterNew, _vm.details.firstName, _vm.FedEx);
                        files = new List<string>();
                        files.Add(CoverLetterNew);
                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);

                        MergePdfs.MergeFiles(path + filename, files, 3);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                        MergePdfs.DeleteFiles(CoverLetterNew);


                        // Email
                        path = "C://Letters//Email" + "//";
                        files = new List<string>();

                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);
                        MergePdfs.MergeFiles(path + filename, files, 2);
                        Emails.AutoEmail(_vm.Email, path + filename, "Dexcom-G5 Training Letter");
                        //delete Temp files
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);

                    }
                    else if (_vm.FileFax == true)
                    {
                        AddTxtToFaxCoverLetter(CoverLetterGen, CoverLetterNew, _vm.details.firstName, _vm.FedEx);
                        files = new List<string>();
                        files.Add(CoverLetterNew);
                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);




                        path = "C://Letters//Fax" + "//";
                        MergePdfs.MergeFiles(path + filename, files, 3);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(CoverLetterNew);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                    else if (_vm.FileEmail == true)
                    {
                        path = "C://Letters//Email" + "//";
                        files = new List<string>();

                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);
                        MergePdfs.MergeFiles(path + filename, files, 2);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        Emails.AutoEmail(_vm.Email, path + filename, "Dexcom-G5 Training Letter");
                    }
                    AddAOBNote.AddNoteDexcomG5TrainingLetterGenerator(_vm);
                }
            }

            else if (_vm.Option == "22")  //_vm.Option == "Dexcom-G6 Training Letter"
            {
                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                string path = "C://Letters//2 Page" + "//";
                string filename = Date + "_" + _vm.Account.ToString() + "_DXT_G6" + ".pdf";
                if (_vm.FileEmail != true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists(path + filename))
                        _vm.FileExists = true;
                }
                else if (_vm.FileEmail == true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists("C://Letters//Email" + "//" + filename))
                        _vm.FileExists = true;

                }
                else if (_vm.FileFax == true && _vm.FileEmail != true)
                {
                    if (System.IO.File.Exists("C://Letters//Fax" + "//" + filename))
                        _vm.FileExists = true;

                }

                if (_vm.FileExists != true)
                {
                    _vm.FileExists = false;

                    string oldfile = "C://LettersTemp//DexcomG6//DexcomTraining.pdf";
                    string CoverLetterGen = "C://LettersTemp//DexcomG6//FaxCoverLetter.pdf";
                    string CoverLetterNew = "C://LettersTemp//DexcomG6//FaxCoverLetter" + _vm.Account.ToString() + ".pdf";
                    string NewfileWithName = "C://LettersTemp//DexcomG6//DexcomTraining" + _vm.Account.ToString() + ".pdf";
                    string Newfile = "C://LettersTemp//DexcomG6//DexcomTraining" + _vm.Account.ToString() + "_Temp.pdf";
                    string FirstPage = "C://LettersTemp//DexcomG6//DexcomFirstPageTraining.pdf";
                    string BlankPage = "C://LettersTemp//DexcomG6//blank.pdf";
                    string FirstPageWithAdd = "C://LettersTemp//DexcomG6//DexcomFirstPageTraining" + _vm.Account.ToString() + ".pdf";
                    string name = _vm.details.lastName;
                    string Account = _vm.Account.ToString();
                    string text1 = "Account: " + _vm.Account.ToString();
                    string DOB = Convert.ToDateTime(_vm.details.DOB).ToString("MM/dd/yyyy"); ;
                    AddTxtToPdf_LT(oldfile, NewfileWithName, name, DOB);
                    AddAddressToPdf(FirstPage, FirstPageWithAdd, _vm.details.firstName, _vm.details.address1 + " " + _vm.details.address2, _vm.details.city + ", " + _vm.details.state + " " + _vm.details.zipcode);
                    manipulateLNMPdf(NewfileWithName, Newfile, Account, text1);
                    //Merge file and delete file from temp
                    List<string> files = new List<string>();

                    files.Add(FirstPageWithAdd);
                    files.Add(BlankPage);
                    files.Add(Newfile);
                    files.Add(BlankPage);
                    if (_vm.FileEmail != true && _vm.FileFax != true)
                    {
                        MergePdfs.MergeFiles(path + filename, files, 4);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                    }
                    else if (_vm.FileEmail == true && _vm.FileFax == true)
                    {
                        //Fax
                        path = "C://Letters//Fax" + "//";
                        AddTxtToFaxCoverLetter(CoverLetterGen, CoverLetterNew, _vm.details.firstName, _vm.FedEx);
                        files = new List<string>();
                        files.Add(CoverLetterNew);
                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);

                        MergePdfs.MergeFiles(path + filename, files, 3);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                        MergePdfs.DeleteFiles(CoverLetterNew);


                        // Email
                        path = "C://Letters//Email" + "//";
                        files = new List<string>();

                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);
                        MergePdfs.MergeFiles(path + filename, files, 2);
                        Emails.AutoEmail(_vm.Email, path + filename, "Dexcom-G6 Training Letter");
                        //delete Temp files
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);

                    }
                    else if (_vm.FileFax == true)
                    {
                        AddTxtToFaxCoverLetter(CoverLetterGen, CoverLetterNew, _vm.details.firstName, _vm.FedEx);
                        files = new List<string>();
                        files.Add(CoverLetterNew);
                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);




                        path = "C://Letters//Fax" + "//";
                        MergePdfs.MergeFiles(path + filename, files, 3);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(CoverLetterNew);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                    else if (_vm.FileEmail == true)
                    {
                        path = "C://Letters//Email" + "//";
                        files = new List<string>();

                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);
                        MergePdfs.MergeFiles(path + filename, files, 2);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        Emails.AutoEmail(_vm.Email, path + filename, "Dexcom-G6 Training Letter");
                    }
                    AddAOBNote.AddNoteDexcomG6TrainingLetterGenerator(_vm);
                }
            }

            else if (_vm.Option == "25")  //_vm.Option == "Out of State BCBS Letter"
            {
                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                string path = "C://Letters//1 Page" + "//";
                string filename = Date + "_" + _vm.Account.ToString() + "_OOS" + ".pdf";
                if (_vm.FileEmail != true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists(path + filename))
                        _vm.FileExists = true;
                }
                else if (_vm.FileEmail == true && _vm.FileFax != true)
                {
                    path = "C://Letters//Email" + "//";
                    if (System.IO.File.Exists("C://Letters//Email" + "//" + filename))
                        _vm.FileExists = true;

                }
                else if (_vm.FileFax == true && _vm.FileEmail != true)
                {
                    path = "C://Letters//Email" + "//";
                    if (System.IO.File.Exists("C://Letters//Fax" + "//" + filename))
                        _vm.FileExists = true;

                }
                else if (_vm.FileFax == true && _vm.FileEmail == true)
                {
                    path = "C://Letters//Email" + "//";
                }

                if (_vm.FileExists != true)
                {
                    _vm.FileExists = false;

                    string Newfile = "C://LettersTemp//BCBS//OutOFState" + _vm.Account.ToString() + "_Temp.pdf";
                    string CoverLetterGen = "C://LettersTemp//BCBS//FaxCoverLetter.pdf";
                    string CoverLetterNew = "C://LettersTemp//BCBS//FaxCoverLetter" + _vm.Account.ToString() + ".pdf";
                    string FirstPage = "C://LettersTemp//BCBS//OutOFState.pdf";
                    string FirstPageWithAdd = path + filename;
                    string name = _vm.details.lastName;
                    string Account = _vm.Account.ToString();
                    string text1 = "Account: " + _vm.Account.ToString();


                    AddAddressToPdf(FirstPage, FirstPageWithAdd, _vm.details.firstName, _vm.details.address1 + " " + _vm.details.address2, _vm.details.city + ", " + _vm.details.state + " " + _vm.details.zipcode);


                    List<string> files = new List<string>();

                    if (_vm.FileEmail == true && _vm.FileFax == true)
                    {
                        //Fax
                        path = "C://Letters//Fax" + "//";
                        AddTxtToFaxCoverLetter(CoverLetterGen, CoverLetterNew, _vm.details.firstName, _vm.FedEx);
                        files = new List<string>();
                        files.Add(CoverLetterNew);
                        files.Add(FirstPageWithAdd);


                        MergePdfs.MergeFiles(path + filename, files, 2);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                        MergePdfs.DeleteFiles(CoverLetterNew);


                        // Email
                        path = "C://Letters//Email" + "//";
                        files = new List<string>();


                        Emails.AutoEmail(_vm.Email, path + filename, "Out Of State BCBS Letter");
                        //delete Temp files


                    }
                    else if (_vm.FileFax == true)
                    {
                        AddTxtToFaxCoverLetter(CoverLetterGen, CoverLetterNew, _vm.details.firstName, _vm.FedEx);
                        files = new List<string>();
                        files.Add(CoverLetterNew);
                        files.Add(FirstPageWithAdd);





                        path = "C://Letters//Fax" + "//";
                        MergePdfs.MergeFiles(path + filename, files, 2);

                        MergePdfs.DeleteFiles(CoverLetterNew);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                    else if (_vm.FileEmail == true)
                    {

                        Emails.AutoEmail(_vm.Email, path + filename, "Out of State BCBS Letter");
                    }
                    AddAOBNote.AddNoteOutOfStateLetterGenerator(_vm);
                }
            }


            else if (_vm.Option == "18")  //_vm.Option == "Libre Training Letter"
            {
                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                string path = "C://Letters//2 Page" + "//";
                string filename = Date + "_" + _vm.Account.ToString() + "_LMT" + ".pdf";
                if (_vm.FileEmail != true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists(path + filename))
                        _vm.FileExists = true;
                }
                else if (_vm.FileEmail == true && _vm.FileFax != true)
                {
                    if (System.IO.File.Exists("C://Letters//Email" + "//" + filename))
                        _vm.FileExists = true;

                }
                else if (_vm.FileFax == true && _vm.FileEmail != true)
                {
                    if (System.IO.File.Exists("C://Letters//Fax" + "//" + filename))
                        _vm.FileExists = true;

                }

                if (_vm.FileExists != true)
                {
                    _vm.FileExists = false;

                    string oldfile = "C://LettersTemp//Libre//LMTraining.pdf";
                    string CoverLetterGen = "C://LettersTemp//Libre//FaxCoverLetter.pdf";
                    string CoverLetterNew = "C://LettersTemp//Libre//FaxCoverLetter" + _vm.Account.ToString() + ".pdf";
                    string NewfileWithName = "C://LettersTemp//Libre//LMTraining" + _vm.Account.ToString() + ".pdf";
                    string Newfile = "C://LettersTemp//Libre//LMTraining" + _vm.Account.ToString() + "_Temp.pdf";
                    string FirstPage = "C://LettersTemp//Libre//LMFirstPageTraining.pdf";
                    string BlankPage = "C://LettersTemp//Libre//blank.pdf";
                    string FirstPageWithAdd = "C://LettersTemp//Libre//LMFirstPageTraining" + _vm.Account.ToString() + ".pdf";
                    string name = _vm.details.lastName;
                    string Account = _vm.Account.ToString();
                    string text1 = "Account: " + _vm.Account.ToString();
                    string DOB = Convert.ToDateTime(_vm.details.DOB).ToString("MM/dd/yyyy"); ;
                    AddTxtToPdf_LT(oldfile, NewfileWithName, name, DOB);
                    AddAddressToPdf(FirstPage, FirstPageWithAdd, _vm.details.firstName, _vm.details.address1 + " " + _vm.details.address2, _vm.details.city + ", " + _vm.details.state + " " + _vm.details.zipcode);
                    manipulateLNMPdf(NewfileWithName, Newfile, Account, text1);
                    //Merge file and delete file from temp
                    List<string> files = new List<string>();

                    files.Add(FirstPageWithAdd);
                    files.Add(BlankPage);
                    files.Add(Newfile);
                    files.Add(BlankPage);
                    if (_vm.FileEmail != true && _vm.FileFax != true)
                    {
                        MergePdfs.MergeFiles(path + filename, files, 4);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                    }
                    else if (_vm.FileEmail == true && _vm.FileFax == true)
                    {
                        //Fax
                        path = "C://Letters//Fax" + "//";
                        AddTxtToFaxCoverLetter(CoverLetterGen, CoverLetterNew, _vm.details.firstName, _vm.FedEx);
                        files = new List<string>();
                        files.Add(CoverLetterNew);
                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);

                        MergePdfs.MergeFiles(path + filename, files, 3);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                        MergePdfs.DeleteFiles(CoverLetterNew);


                        // Email
                        path = "C://Letters//Email" + "//";
                        files = new List<string>();

                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);
                        MergePdfs.MergeFiles(path + filename, files, 2);
                        Emails.AutoEmail(_vm.Email, path + filename, "Libre Training Letter");
                        //delete Temp files
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);

                    }
                    else if (_vm.FileFax == true)
                    {
                        AddTxtToFaxCoverLetter(CoverLetterGen, CoverLetterNew, _vm.details.firstName, _vm.FedEx);
                        files = new List<string>();
                        files.Add(CoverLetterNew);
                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);




                        path = "C://Letters//Fax" + "//";
                        MergePdfs.MergeFiles(path + filename, files, 3);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(CoverLetterNew);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                    else if (_vm.FileEmail == true)
                    {
                        path = "C://Letters//Email" + "//";
                        files = new List<string>();

                        files.Add(FirstPageWithAdd);
                        files.Add(Newfile);
                        MergePdfs.MergeFiles(path + filename, files, 2);
                        MergePdfs.DeleteFiles(NewfileWithName);
                        MergePdfs.DeleteFiles(Newfile);
                        MergePdfs.DeleteFiles(FirstPageWithAdd);
                        Emails.AutoEmail(_vm.Email, path + filename, "Libre Training Letter");
                    }
                    AddAOBNote.AddNoteLibreTrainingLetterGenerator(_vm);
                }
            }

            else if (_vm.Option == "15")  //_vm.Option == "Payment Collection Formr"
            {
                int numberOfPages = 0;
                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                string path = "C://Letters//1 Page" + "//";
                string filename = Date + "_" + _vm.Account.ToString() + "_PC" + ".pdf";


                BuildPaymentCollectionPdf(_vm);



                if (_vm.FileEmail == true || _vm.FileFax == true)
                {
                    if (_vm.FileEmail == true)
                    {
                        path = "C://Letters//Email" + "//";
                    }
                    if (_vm.FileFax == true)
                    {
                        path = "C://Letters//Fax" + "//";
                    }
                    if (System.IO.File.Exists(path + filename))
                    {
                        PdfReader pdfReader = new PdfReader(path + filename);
                        numberOfPages = pdfReader.NumberOfPages;
                        if ((numberOfPages != 1 && _vm.FileEmail != true && _vm.FileFax != true) || (numberOfPages != 2 && (_vm.FileFax == true || _vm.FileEmail == true)))
                        {
                            System.IO.File.Delete(path + filename);
                            _vm.FileExists = false;
                            _vm.IsPage = false;
                        }
                    }

                    if ((numberOfPages == 1 && _vm.FileEmail != true && _vm.FileFax != true) || (numberOfPages == 2 && (_vm.FileFax == true || _vm.FileEmail == true)))
                    {
                        AddAOBNote.AddNotePaymentCollectionGenerator(_vm);
                    }
                }

                if (_vm.FileEmail != true || _vm.FileFax != true)
                {
                    if (System.IO.File.Exists(path + filename))
                    {
                        PdfReader pdfReader = new PdfReader(path + filename);
                        numberOfPages = pdfReader.NumberOfPages;
                        if ((numberOfPages != 1 && _vm.FileEmail != true && _vm.FileFax != true) || (numberOfPages != 2 && (_vm.FileFax == true || _vm.FileEmail == true)))
                        {
                            System.IO.File.Delete(path + filename);
                            _vm.FileExists = false;
                            _vm.IsPage = false;
                        }
                    }

                    if ((numberOfPages == 1 && _vm.FileEmail != true && _vm.FileFax != true) || (numberOfPages == 2 && (_vm.FileFax == true || _vm.FileEmail == true)))
                    {
                        AddAOBNote.AddNotePaymentCollectionGenerator(_vm);
                    }
                }



            }

            ////
            else if (_vm.Option == "16")  //_vm.Option == "Detailed Receipt Letter"
            {
                int numberOfPages = 0;
                string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
                string path = "C://Letters//1 Page" + "//";
                string filename = Date + "_" + _vm.Account.ToString() + "_DRL" + ".pdf";


                BuildDetailedReceiptLetterPdf(_vm);



                if (_vm.FileEmail == true)
                {

                    path = "C://Letters//Email" + "//";


                    if (System.IO.File.Exists(path + filename))
                    {
                        PdfReader pdfReader = new PdfReader(path + filename);
                        numberOfPages = pdfReader.NumberOfPages;
                        if (numberOfPages != 1 && _vm.FileEmail == true)
                        {
                            System.IO.File.Delete(path + filename);
                            _vm.FileExists = false;
                            _vm.IsPage = false;
                        }
                    }

                    if (numberOfPages == 1 && _vm.FileEmail == true)
                    {
                        AddAOBNote.AddNoteDetailedReceiptLetter(_vm);
                    }
                }

                if (_vm.FileFax == true)
                {
                    path = "C://Letters//Fax" + "//";
                    if (System.IO.File.Exists(path + filename))
                    {
                        PdfReader pdfReader = new PdfReader(path + filename);
                        numberOfPages = pdfReader.NumberOfPages;
                        if (numberOfPages != 2 && _vm.FileFax == true)
                        {
                            System.IO.File.Delete(path + filename);
                            _vm.FileExists = false;
                            _vm.IsPage = false;
                        }
                    }

                    if (numberOfPages == 2 && _vm.FileFax == true)
                    {
                        AddAOBNote.AddNoteDetailedReceiptLetter(_vm);
                    }
                }


                if (_vm.FileFax != true && _vm.FileEmail != true)
                {
                    path = "C://Letters//1 Page" + "//";
                    if (System.IO.File.Exists(path + filename))
                    {
                        PdfReader pdfReader = new PdfReader(path + filename);
                        numberOfPages = pdfReader.NumberOfPages;
                        if (numberOfPages != 1)
                        {
                            System.IO.File.Delete(path + filename);
                            _vm.FileExists = false;
                            _vm.IsPage = false;
                        }
                    }

                    if (numberOfPages == 1)
                    {
                        AddAOBNote.AddNoteDetailedReceiptLetter(_vm);
                    }
                }



            }

            else if (_vm.Option == "14")  //_vm.Option == "BCN Order Confirmation Notice1"
            {

                BuildBCNOrderConfirmNoticePdf(_vm);
                AddAOBNote.AddNoteBCNNOConfirmGenerator(_vm);
            }
            else if (_vm.Option == "5")  //_vm.Option == "Not Eligible Letter"
            {

                BuildNotEligibleLetterPdf(_vm);
                AddAOBNote.AddNoteNotEligibleLetter(_vm);
            }
            else if (_vm.Option == "4")   //_vm.Option == "Teacher Letter"
            {

                BuildTeacherLetterPdf(_vm);
                AddAOBNote.AddNoteTeacherLetter(_vm);
            }

            else if (_vm.Option == "3")   //_vm.Option == "Reassessment Letter"
            {

                BuildReassessmentLetterPdf(_vm);
                AddAOBNote.AddNoteReassessmentLetter(_vm);
            }
            else if (_vm.Option == "29")   //_vm.Option == "Diabetic Reassessment Letter"
            {

                BuildDiabeticReassessmentLetterPdf(_vm);
                AddAOBNote.AddNoteDiabeticReassessmentLetter(_vm);
            }
            else if (_vm.Option == "6")   //_vm.Option == "Member unable to service Letter"
            {
                if (!otherlanguageSelectionOrBraille)
                {
                    BuildMemberUnableToServiceLetterPdf(_vm);
                    AddAOBNote.AddNoteMemUnabletoServiceLetter(_vm);
                }
                else
                {
                    AddAOBNote.AddNoteForOtherLanguages(_vm, GetLetterType(_vm.Option));
                }

            }
            else if (_vm.Option == "23")   //_vm.Option == "Complaint Resolution Letter"
            {
                BuildComplaintResolutionLetterPdf(_vm);
                AddAOBNote.AddComplaintResolutionLetter(_vm);
            }
            else if (_vm.Option == "24")   //_vm.Option == "Concern Contact Letter
            {
                BuildConcernContactLetterPdf(_vm);
                AddAOBNote.AddConcernContactLetter(_vm);
            }

            else if (_vm.Option == "13")   //_vm.Option == "Times Testing Change Letter"
            {
                BuildTestingtimesLetterPdf(_vm);
                AddAOBNote.AddNoteTestingTimesLetter(_vm);
            }
            else if (_vm.Option == "7")   //_vm.Option == "Physician unable to service Letter"
            {
                BuildPhysicianUnableToServiceLetterPdf(_vm);
                AddAOBNote.AddNotePhysicianUnabletoServiceLetter(_vm);
            }

            else if (_vm.Option == "8")   //_vm.Option == "THC Unable to Reorder"
            {
                BuildUnabletoReorderLetterPdf(_vm);
                AddAOBNote.AddNoteUnabletoReorderLetter(_vm);
            }

            else if (_vm.Option == "9")   //_vm.Option == "PCP Letter"
            {
                BuildPCPLetterPdf(_vm);
                AddAOBNote.AddNotePCPLetter(_vm);
            }

            else if (_vm.Option == "10")   //_vm.Option == Diabetic Coinsurance Authorization
            {
                BuildDiabeticCoinsAuthLetterPdf(_vm);
                AddAOBNote.AddNoteDiabeticCoinsAuthLetter(_vm);
            }

            else if (_vm.Option == "11")   //_vm.Option == "JB CUSTOMER SATISFACTION LETTER"
            {
                BuildJBCustomerSatisfactionrPdf(_vm);
                AddAOBNote.AddJBCustomerSatisfactionLetter(_vm);
            }

            else if (_vm.Option == "12")   //_vm.Option == "Complaint Recovery Letter"
            {
                BuildComplaintRecoveryPdf(_vm);
                AddAOBNote.AddJBCustomerSatisfactionLetter(_vm);
            }
            return RedirectToAction("Index", new { FileExists = _vm.FileExists, TestName = _vm.testName, Testid = _vm.testid, ISPage = _vm.IsPage });
        }


        public void BuildNotEligibleLetterPdf(GeneratorModel _vm)
        {
            bool res = AOBGenerator.CheckIfBCN(_vm.Account);

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_NEL" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_NELTemp" + ".pdf";
            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_NEL" + ".pdf";

            if (res == true)
            { filename = filenameTemp; }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//1 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }


                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    if (res == false)
                    {
                        this.AddNotEligibleLetter(doc, _vm);
                    }
                    else if (res == true)
                    {
                        this.AddNotEligibleLetter(doc, _vm);
                        this.AddBlackPage(doc);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.AddEmailContactCover(doc, _vm);
                    this.AddNotEligibleLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_NEL" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "Not Eligibile Letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    if (_vm.spanish == true)
                    {
                        this.AddFaxContactCover_Spanish(doc1, _vm);
                    }
                    else
                    {
                        this.AddFaxContactCover(doc1, _vm);
                    }
                    this.AddNotEligibleLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_NEL" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }

        private void AddNotEligibleLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right


            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);


            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font14Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Date: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Dear " + _vm.details.firstName + ",\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("You are no longer eligible for our services due to changes in your insurance.  Your account has been made inactive and all supplies have been removed from the order.  "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("If this information is incorrect contact your insurance company and have them update or correct the information."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("If you have any further questions regarding this matter please call J&B Medical at " + phoneNo + "."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11ItalicFont, new Chunk("Please disregard this notice if you have already contacted, or have been contacted by J&B Medical Supply."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Thank you!"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Sincerely,"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Customer Service"));


        }

        public void BuildMemberUnableToServiceLetterPdf(GeneratorModel _vm)
        {
            bool res = AOBGenerator.CheckIfBCN(_vm.Account);

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_MSL" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_MSLTemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_MSL" + ".pdf";

            if (res == true)
            { filename = filenameTemp; }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//1 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }


                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    if (res == false)
                    {
                        this.AddMemberUnableToServiceLetter(doc, _vm);
                    }
                    else if (res == true)
                    {
                        this.AddMemberUnableToServiceLetter(doc, _vm);
                        this.AddBlackPage(doc);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.AddEmailUSLetter(doc, _vm);
                    this.AddMemberUnableToServiceLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }
                filename = Date + "_" + _vm.Account.ToString() + "_MSL" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "Member unable to service letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    this.AddFaxMUSLetter(doc1, _vm);
                    this.AddMemberUnableToServiceLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_MSL" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }

        public void BuildComplaintResolutionLetterPdf(GeneratorModel _vm)
        {
            //   bool res = AOBGenerator.CheckIfBCN(_vm.Account);

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_CRL" + ".pdf";
            //   string filenameTemp = Date + "_" + _vm.Account.ToString() + "_CRLTemp" + ".pdf";

            //   string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_CRL" + ".pdf";

            // if (res == true)
            // { filename = filenameTemp; }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//1 Page" + "//";
                // if (res == true)
                //  { path = "C://Letters//BCN" + "//"; }


                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    // if (res == false)
                    // {
                    this.AddComplaintResolutionLetter(doc, _vm);
                    // }
                    //else if (res == true)
                    //  {
                    //     this.AddComplaintResolutionLetter(doc, _vm);
                    //      this.AddBlackPage(doc);
                    // }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    // if (res == true)
                    //  {
                    //  MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    //}
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    // this.AddEmailUSLetter(doc, _vm);
                    this.AddComplaintResolutionLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    // if (res == true)
                    // {
                    //  MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    // }
                }
                filename = Date + "_" + _vm.Account.ToString() + "_CRL" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "Complaint Resolution Letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    this.AddFaxMUSLetter(doc1, _vm);
                    this.AddComplaintResolutionLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    //if (res == true)
                    //{
                    //    MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    //}
                }

                filename = Date + "_" + _vm.Account.ToString() + "_CRL" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }

        public void BuildConcernContactLetterPdf(GeneratorModel _vm)
        {
            //   bool res = AOBGenerator.CheckIfBCN(_vm.Account);

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_CCL" + ".pdf";
            //   string filenameTemp = Date + "_" + _vm.Account.ToString() + "_CRLTemp" + ".pdf";

            //   string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_CRL" + ".pdf";

            // if (res == true)
            // { filename = filenameTemp; }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//1 Page" + "//";
                // if (res == true)
                //  { path = "C://Letters//BCN" + "//"; }


                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    // if (res == false)
                    // {
                    this.AddConcernContactLetter(doc, _vm);
                    // }
                    //else if (res == true)
                    //  {
                    //     this.AddComplaintResolutionLetter(doc, _vm);
                    //      this.AddBlackPage(doc);
                    // }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    // if (res == true)
                    //  {
                    //  MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    //}
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    //  this.AddEmailUSLetter(doc, _vm);
                    this.AddConcernContactLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    // if (res == true)
                    // {
                    //  MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    // }
                }
                filename = Date + "_" + _vm.Account.ToString() + "_CCL" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "Concern Contact Letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    this.AddFaxMUSLetter(doc1, _vm);
                    this.AddConcernContactLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    //if (res == true)
                    //{
                    //    MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    //}
                }

                filename = Date + "_" + _vm.Account.ToString() + "_CCL" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }
        public void BuildTestingtimesLetterPdf(GeneratorModel _vm)
        {

            bool res = AOBGenerator.CheckIfBCN(_vm.Account);
            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_DSQC" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_DSQCTemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_DSQC" + ".pdf";

            if (res == true)
            { filename = filenameTemp; }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//1 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }


                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    if (res == false)
                    {
                        this.AddTestingTimesLetter(doc, _vm);
                    }
                    else if (res == true)
                    {
                        this.AddTestingTimesLetter(doc, _vm);
                        this.AddBlackPage(doc);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.AddEmailUSLetter(doc, _vm);
                    this.AddTestingTimesLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_DSQC" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "Diabetic Supply Quantity Change Letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    this.AddFaxMUSLetter(doc1, _vm);
                    this.AddTestingTimesLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_DSQC" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }

        private void AddMemberUnableToServiceLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Dear " + _vm.details.firstName + ",\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            //
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("In compliance with insurance quality standards, we are notifying you that we are unable to service the requested supplies due to the following reason:"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk(_vm.Reason));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("If you have questions, please contact us between the hours of 8:00am and 6:00pm EST."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14ItalicFont, new Chunk("Please disregard this notice if you have already contacted, or have been contacted by J&B Medical Supply."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Thank you!"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Sincerely,"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Customer Service"));


        }

        private void AddComplaintResolutionLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Dear " + _vm.details.firstName + ",\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            //
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Thank you for allowing us the opportunity to address your concern regarding"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("An investigation was conducted and lead to the following results "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk(_vm.CRL_Text1));



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("The following resolution will be provided "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk(_vm.CRL_Text2));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Please contact us at the number below between the hours of 8:00 am and 6:00 pm EST if you have any questions.  "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk(_vm.CRL_Text3));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Thank you so much for your patronage and the opportunity to resolve this matter.  "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Sincerely,"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("J&B Medical Supply "));


        }

        private void AddConcernContactLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Dear " + _vm.details.firstName + ",\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            //
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("We have received your concern and have attempted to contact you by telephone. "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Please contact us at the number below between the hours of 8:00 am and 6:00 pm EST so that we can resolve your concern as soon as possible.  "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk(_vm.CRL_Text3));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14ItalicFont, new Chunk("Please disregard this notice if you have already contacted, or have been contacted by J&B Medical Supply."));



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Thank you! "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Sincerely,"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Customer Service"));


        }

        // check this letter
        private void AddTestingTimesLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Dear " + _vm.details.firstName + ",\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            //
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("We received your prescription renewal from your physician and they have indicated that your testing time has changed.  We are notifying you that the amount of your diabetic supplies has changed and will affect orders after " + _vm.RXDate.Month + "/" + _vm.RXDate.Day + "/" + _vm.RXDate.Year + ". The supplies affected by this change are listed below: "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            if (_vm.TestStripsFrom != 0 && _vm.TestStripsTo != 0)
            {

                Paragraph P1 = new Paragraph();
                Chunk P1C1 = new Chunk("Test strips from ", _Font14Font);
                Chunk P1C2 = new Chunk(_vm.TestStripsFrom.ToString(), _Font14Font);
                Chunk P1C3 = new Chunk(" box(es) to ", _Font14Font);
                Chunk P1C4 = new Chunk(_vm.TestStripsTo.ToString(), _Font14Font);
                Chunk P1C5 = new Chunk(" box(es)");

                P1.Add(P1C1);
                P1.Add(P1C2);
                P1.Add(P1C3);
                P1.Add(P1C4);
                P1.Add(P1C5);


                doc.Add(P1);
            }

            if (_vm.LancetsFrom != 0 && _vm.LancetsTo != 0)
            {
                Paragraph P2 = new Paragraph();

                Chunk P2C1 = new Chunk("Lancets from ", _Font14Font);
                Chunk P2C2 = new Chunk(_vm.LancetsFrom.ToString(), _Font14Font);
                Chunk P2C3 = new Chunk(" box(es) to ", _Font14Font);
                Chunk P2C4 = new Chunk(_vm.LancetsTo.ToString(), _Font14Font);
                Chunk P2C5 = new Chunk(" box(es)", _Font14Font);
                P2.Add(P2C1);
                P2.Add(P2C2);
                P2.Add(P2C3);
                P2.Add(P2C4);
                P2.Add(P2C5);

                doc.Add(P2);
            }

            if (_vm.SyringesFrom != 0 && _vm.SyringesTo != 0)
            {
                Paragraph P3 = new Paragraph();

                Chunk P3C1 = new Chunk("Syringes from ", _Font14Font);
                Chunk P3C2 = new Chunk(_vm.SyringesFrom.ToString(), _Font14Font);
                Chunk P3C3 = new Chunk(" box(es) to ", _Font14Font);
                Chunk P3C4 = new Chunk(_vm.SyringesTo.ToString(), _Font14Font);
                Chunk P3C5 = new Chunk(" box(es)", _Font14Font);
                P3.Add(P3C1);
                P3.Add(P3C2);
                P3.Add(P3C3);
                P3.Add(P3C4);
                P3.Add(P3C5);

                doc.Add(P3);
            }

            if (_vm.PenNeedlesFrom != 0 && _vm.PenNeedlesTo != 0)
            {
                Paragraph P4 = new Paragraph();

                Chunk P4C1 = new Chunk("Pen Needles from ", _Font14Font);
                Chunk P4C2 = new Chunk(_vm.PenNeedlesFrom.ToString(), _Font14Font);
                Chunk P4C3 = new Chunk(" box(es) to ", _Font14Font);
                Chunk P4C4 = new Chunk(_vm.PenNeedlesTo.ToString(), _Font14Font);
                Chunk P4C5 = new Chunk(" box(es)", _Font14Font);
                P4.Add(P4C1);
                P4.Add(P4C2);
                P4.Add(P4C3);
                P4.Add(P4C4);
                P4.Add(P4C5);

                doc.Add(P4);
            }

            if (_vm.InfusionSetsFrom != 0 && _vm.InfusionSetsTo != 0)
            {
                Paragraph P5 = new Paragraph();

                Chunk P5C1 = new Chunk("Infusion Sets from ", _Font14Font);
                Chunk P5C2 = new Chunk(_vm.InfusionSetsFrom.ToString(), _Font14Font);
                Chunk P5C3 = new Chunk(" box(es) to ", _Font14Font);
                Chunk P5C4 = new Chunk(_vm.InfusionSetsTo.ToString(), _Font14Font);
                Chunk P5C5 = new Chunk(" box(es)", _Font14Font);
                P5.Add(P5C1);
                P5.Add(P5C2);
                P5.Add(P5C3);
                P5.Add(P5C4);
                P5.Add(P5C5);

                doc.Add(P5);
            }
            if (_vm.PodsFrom != 0 && _vm.PodsTo != 0)
            {

                Paragraph P6 = new Paragraph();

                Chunk P6C1 = new Chunk("Pods from ", _Font14Font);
                Chunk P6C2 = new Chunk(_vm.PodsFrom.ToString(), _Font14Font);
                Chunk P6C3 = new Chunk(" box(es) to ", _Font14Font);
                Chunk P6C4 = new Chunk(_vm.PodsTo.ToString(), _Font14Font);
                Chunk P6C5 = new Chunk(" box(es)", _Font14Font);
                P6.Add(P6C1);
                P6.Add(P6C2);
                P6.Add(P6C3);
                P6.Add(P6C4);
                P6.Add(P6C5);

                doc.Add(P6);
            }

            if (_vm.ReservoirsFrom != 0 && _vm.ReservoirsTo != 0)
            {
                Paragraph P7 = new Paragraph();

                Chunk P7C1 = new Chunk("Reservoirs from ", _Font14Font);
                Chunk P7C2 = new Chunk(_vm.ReservoirsFrom.ToString(), _Font14Font);
                Chunk P7C3 = new Chunk(" box(es) to ", _Font14Font);
                Chunk P7C4 = new Chunk(_vm.ReservoirsTo.ToString(), _Font14Font);
                Chunk P7C5 = new Chunk(" box(es)", _Font14Font);
                P7.Add(P7C1);
                P7.Add(P7C2);
                P7.Add(P7C3);
                P7.Add(P7C4);
                P7.Add(P7C5);

                doc.Add(P7);
            }
            //  this.AddParagraph(P1)
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Test strips from XX box(es) to XX box(es)Lancets from XX box(es)to XX box(es)"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("If you feel this is in error please contact your physician to have a corrected prescription faxed to us at 1-800-737-0012. "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("If you have any questions, please contact us between the hours of 8:00am and 6:00pm"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14ItalicFont, new Chunk("Please disregard this notice if you have already contacted, or have been contacted by J&B Medical Supply."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Thank you!"));

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Sincerely,"));

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Customer Service"));


        }

        private void AddFaxMUSLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();

            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Fax #: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            // list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidentiality \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("       The information contained in this transmission is confidential health information that is privileged and legally protected from disclosure by the Health Insurance Portability Accountability Act. (HIPPA).  This information is intended only for the individual named above. The recipient of this information is prohibited from disclosing this information to any other party unless required to do so by law or regulation and is required to destroy the information after its stated need has been fulfilled.  If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or action taken in reliance on the contents of these documents is strictly prohibited.  If the information was received in error, Please notify J &B Medical immediately to arrange for the return or destruction of these documents.    \n\n"));



        }

        private void AddEmailUSLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Email: ");
            table.AddCell(_vm.Email);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            //list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:\n", _largeFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page



            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));


        }
        public void BuildPhysicianUnableToServiceLetterPdf(GeneratorModel _vm)
        {

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_PSL" + ".pdf";



            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//1 Page" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.AddPhysicianUnableToServiceLetter(doc, _vm);


                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.AddEmailPUSLetter(doc, _vm);
                    this.AddPhysicianUnableToServiceLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                }

                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "Physician unable to service letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    this.AddFaxPUSLetter(doc1, _vm);
                    this.AddPhysicianUnableToServiceLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;

                }
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }

        public void BuildPCPLetterPdf(GeneratorModel _vm)
        {
            bool res = AOBGenerator.CheckIfBCN(_vm.Account);

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_PCP" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_PCPTemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_PCP" + ".pdf";

            if (res == true)
            { filename = filenameTemp; }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {

                string path = "C://Letters//1 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }


                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-PCP", false);

                    if (res == false)
                    {
                        this.AddPCPLetter(doc, _vm);
                    }
                    else if (res == true)
                    {
                        this.AddPCPLetter(doc, _vm);
                        this.AddBlackPage(doc);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-PCP", false);

                    this.AddEmailCover_PCP(doc, _vm);
                    this.AddPCPLetter(doc, _vm);


                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_PCP" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "PCP Letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-PCP", false);

                    this.AddFaxCover_PCP(doc1, _vm);
                    this.AddPCPLetter(doc1, _vm);


                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_PCP" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }

        public void BuildUnabletoReorderLetterPdf(GeneratorModel _vm)
        {


            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_URL" + ".pdf";
            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {

                string path = "C://Letters//1 Page" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.UnableToReorderFax(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.AddEmailPUSLetter(doc, _vm);
                    this.UnableToReorderFax(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                }

                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "THC Unable to Reorder");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();
                    this.AddFaxCover_THC(doc1, _vm);
                    this.UnableToReorderFax(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                }
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }



        private void AddPhysicianUnableToServiceLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();

            doc.NewPage();

            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Dear " + "Dr. " + _vm.details.PhysicianName + ",\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            Chunk pL_c1 = new Chunk("In compliance with insurance quality standards, we are notifying you that we are unable to service your patient: ", _Font14Font);
            Chunk pL_c2 = new Chunk(_vm.details.firstName + ", " + _vm.details.DOB.Value.Month + "/" + _vm.details.DOB.Value.Day + "/" + _vm.details.DOB.Value.Year, _Font14BoldFont);
            Chunk pL_c3 = new Chunk(" the requested supplies due to the following reason:", _Font14Font);


            Phrase pL = new Phrase();
            pL.Add(pL_c1);
            pL.Add(pL_c2);
            pL.Add(pL_c3);

            Paragraph Para_PL = new Paragraph();
            Para_PL.Add(pL);
            doc.Add(Para_PL);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk(_vm.Reason));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("If you have questions, please contact us between the hours of 8:00am and 6:00pm EST  "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14ItalicFont, new Chunk("Please disregard this notice if you have already contacted, or have been contacted by J&B Medical Supply."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Thank you!"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Sincerely,"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Customer Service"));


        }

        private void AddEmailPUSLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell("Dr. " + _vm.details.PhysicianName);
            table.AddCell("Email: ");
            table.AddCell(_vm.Email);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            //list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:\n", _largeFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page



            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nIf you have any questions or concerns, please call our Customer Service Support line at (800) 737-0045.  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));


        }

        private void AddFaxPUSLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();

            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell("Dr. " + _vm.details.PhysicianName);
            table.AddCell("Fax #: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            // list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidentiality \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("       The information contained in this transmission is confidential health information that is privileged and legally protected from disclosure by the Health Insurance Portability Accountability Act. (HIPPA).  This information is intended only for the individual named above. The recipient of this information is prohibited from disclosing this information to any other party unless required to do so by law or regulation and is required to destroy the information after its stated need has been fulfilled.  If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or action taken in reliance on the contents of these documents is strictly prohibited.  If the information was received in error, Please notify J &B Medical immediately to arrange for the return or destruction of these documents.    \n\n"));



        }
        public void BuildTeacherLetterPdf(GeneratorModel _vm)
        {


            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_TL" + ".pdf";
            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//1 Page" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);


                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.AddTeacherLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.AddEmailContactCover(doc, _vm);
                    this.AddTeacherLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                }

                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "Teacher Letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    this.AddFaxContactCover(doc1, _vm);
                    this.AddTeacherLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                }
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }

        public void BuildReassessmentLetterPdf(GeneratorModel _vm)
        {
            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_RL_Temp" + ".pdf";
            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_RL" + ".pdf";
            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//2 Page" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);


                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-RL", false); //


                    this.AddReassessmentetter(doc, _vm);
                    this.AddBlackPage(doc);


                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                    doc.Close();
                    doc = null;
                    string oldFile = "C://LettersTemp//Reassessment//ReassessmentLetterMail.pdf";
                    string newFile = "C://LettersTemp//Reassessment//ReassessmentLetterMail" + _vm.Account + ".pdf";
                    string text = "Name : " + _vm.details.firstName + ", Account : " + _vm.Account;

                    manipulatePdf(oldFile, newFile, _vm.Account.ToString(), text);



                    //Manupuate second page and add items from RWO
                    string oldFile2 = "C://LettersTemp//Reassessment//ReassessmentLetterMail_2.pdf";
                    string newFile2 = "C://LettersTemp//Reassessment//ReassessmentLetterMail_2" + _vm.Account + ".pdf";
                    manipulatePdf2(oldFile2, newFile2, _vm.Account.ToString(), text, _vm.Account);


                    //Merge Files
                    MergeReassessment(path + filename, path + filenameOrigin, false, newFile, newFile2);

                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    //  this.AddEmailContactCover(doc, _vm);
                    this.AddReassessmentetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                    string oldFile = "C://LettersTemp//Reassessment//ReassessmentLetterEmail.pdf";
                    string newFile = "C://LettersTemp//Reassessment//ReassessmentLetterEmail" + _vm.Account + ".pdf";
                    string text = "Name : " + _vm.details.firstName + ", Account : " + _vm.Account;
                    manipulatePdf(oldFile, newFile, _vm.Account.ToString(), text);


                    //Manupuate second page and add items from RWO
                    string oldFile2 = "C://LettersTemp//Reassessment//ReassessmentLetterMail_2.pdf";
                    string newFile2 = "C://LettersTemp//Reassessment//ReassessmentLetterMail_2" + _vm.Account + ".pdf";
                    manipulatePdf2(oldFile2, newFile2, _vm.Account.ToString(), text, _vm.Account);


                    //Merge Files
                    MergeReassessment(path + filename, path + filenameOrigin, false, newFile, newFile2);

                    // MergeReassessment(path + filename, path + filenameOrigin, false, newFile, newFile);
                }

                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    Emails.AutoEmail(_vm.Email, path + filenameOrigin, "Reassessment Letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    this.AddFaxContactCover(doc1, _vm);
                    this.AddReassessmentetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    string oldFile = "C://LettersTemp//Reassessment//ReassessmentLetterEmail.pdf";
                    string newFile = "C://LettersTemp//Reassessment//ReassessmentLetterEmail" + _vm.Account + ".pdf";
                    string text = "Name : " + _vm.details.firstName + " " + _vm.details.lastName + ", Account : " + _vm.Account;
                    manipulatePdf(oldFile, newFile, _vm.Account.ToString(), text);


                    //Manupuate second page and add items from RWO
                    string oldFile2 = "C://LettersTemp//Reassessment//ReassessmentLetterMail_2.pdf";
                    string newFile2 = "C://LettersTemp//Reassessment//ReassessmentLetterMail_2" + _vm.Account + ".pdf";
                    manipulatePdf2(oldFile2, newFile2, _vm.Account.ToString(), text, _vm.Account);


                    //Merge Files
                    MergeReassessment(path + filename, path + filenameOrigin, false, newFile, newFile2);

                    //MergeReassessment(path + filename, path + filenameOrigin, false, newFile, newFile);
                }
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }

        public void BuildDiabeticReassessmentLetterPdf(GeneratorModel _vm)
        {
            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_DiaRL_Temp" + ".pdf";
            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_DiaRL" + ".pdf";
            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//2 Page" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);


                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    // //Generating  barcode 
                    // PdfContentByte pdfContentByte = writer.DirectContent;
                    // image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "DR", false); //


                    this.AddReassessmentetter(doc, _vm);
                    this.AddBlackPage(doc);


                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                    doc.Close();
                    doc = null;
                    string oldFile = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterMail.pdf";
                    string newFileTemp = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterMail" + _vm.Account + "_WS" + ".pdf";
                    string newFile = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterMail" + _vm.Account + ".pdf";
                    string text = "Name : " + _vm.details.firstName + ", Account : " + _vm.Account;

                    manipulateDiaRessmentLPdf(oldFile, newFileTemp, _vm.Account.ToString(), text);
                    manipulateDiabeticRLPdf2(newFileTemp, newFile, _vm.Account.ToString(), text, _vm.Account);


                    //Manupuate second page and add items from RWO
                    string oldFile2 = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterMail_2.pdf";
                    //  string newFile2 = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterMail_2" + _vm.Account + ".pdf";
                    // manipulatePdf2(oldFile2, newFile2, _vm.Account.ToString(), text, _vm.Account);
                    MergePdfs.DeleteFiles(newFileTemp);

                    //Merge Files
                    MergeReassessment(path + filename, path + filenameOrigin, false, newFile, oldFile2);

                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    //  this.AddEmailContactCover(doc, _vm);
                    this.AddReassessmentetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                    string oldFile = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterEmail.pdf";
                    string newFileTemp = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterEmail" + _vm.Account + "_WS" + ".pdf";
                    string newFile = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterEmail" + _vm.Account + ".pdf";
                    string text = "Name : " + _vm.details.firstName + ", Account : " + _vm.Account;
                    manipulateDiaRessmentLPdf(oldFile, newFileTemp, _vm.Account.ToString(), text);
                    manipulateDiabeticRLPdf2(newFileTemp, newFile, _vm.Account.ToString(), text, _vm.Account);


                    //Manupuate second page and add items from RWO
                    string oldFile2 = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterMail_2.pdf";
                    // string newFile2 = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterMail_2" + _vm.Account + ".pdf";
                    //   manipulatePdf2(oldFile2, newFile2, _vm.Account.ToString(), text, _vm.Account);
                    MergePdfs.DeleteFiles(newFileTemp);

                    //Merge Files
                    MergeReassessment(path + filename, path + filenameOrigin, false, newFile, oldFile2);

                    // MergeReassessment(path + filename, path + filenameOrigin, false, newFile, newFile);
                }

                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    Emails.AutoEmail(_vm.Email, path + filenameOrigin, "Diabetic Reassessment Letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    this.AddFaxContactCover(doc1, _vm);
                    this.AddReassessmentetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    string oldFile = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterEmail.pdf";
                    string newFileTemp = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterEmail" + _vm.Account + "_WS" + ".pdf";
                    string newFile = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterEmail" + _vm.Account + ".pdf";
                    string text = "Name : " + _vm.details.firstName + " " + _vm.details.lastName + ", Account : " + _vm.Account;
                    manipulateDiaRessmentLPdf(oldFile, newFileTemp, _vm.Account.ToString(), text);
                    manipulateDiabeticRLPdf2(newFileTemp, newFile, _vm.Account.ToString(), text, _vm.Account);
                    MergePdfs.DeleteFiles(newFileTemp);
                    //Manupuate second page and add items from RWO
                    string oldFile2 = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterMail_2.pdf";
                    // string newFile2 = "C://LettersTemp//DiabeticReassessment//ReassessmentLetterMail_2" + _vm.Account + ".pdf";
                    //manipulatePdf2(oldFile2, newFile2, _vm.Account.ToString(), text, _vm.Account);


                    //Merge Files
                    MergeReassessment(path + filename, path + filenameOrigin, false, newFile, oldFile2);

                    //MergeReassessment(path + filename, path + filenameOrigin, false, newFile, newFile);
                }
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }




            //Fax is checked


        }
        private void AddTeacherLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font14Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("To Whom It May Concern:\n\n"));



            Chunk c1 = new Chunk("We need a letter from your child’s teacher, on school letterhead, detailing the toilet training program.  The letter must be detailed and faxed to J & B Medical. The letter must address ", _Font14Font);
            Chunk c2 = new Chunk("what the training program is, how your child participates in it, what progress your child has made and what success your child is having.", _Font14UnderlineFont);
            Chunk c3 = new Chunk(" This letter will be reviewed in consideration of the continuation or initial supply of pull ons which are provided for client’s who are actively participating in a toilet training program and making progress. If Pull Ons are no longer provided, diapers or other incontinence garments will be offered.", _Font14Font);
            Chunk c4 = new Chunk("\n\n", _Font12Font);
            Chunk c5 = new Chunk("Examples of what to document:  \n\n", _Font14Font);

            Chunk c6 = new Chunk("Participation: ", _Font14BoldFont);
            Chunk c7 = new Chunk("does the client initiate toileting?  Do they need any help once at the toilet?  Do they wipe themselves?  Do they get their clothing back up?", _Font14Font);
            Chunk c8 = new Chunk("\n\n", _Font12Font);
            Chunk c9 = new Chunk("Success Rate: ", _Font14BoldFont);
            Chunk c10 = new Chunk("does the client make it to the toilet still dry?  Do they urinate in the toilet?   If so, what percentage of the time?  Do they have bowel movements in the toilet?  If so, how often?", _Font14Font);
            Chunk c11 = new Chunk("\n\n\n", _Font12Font);
            Chunk c12 = new Chunk("J&B fax number = ", _Font14Font);
            Chunk c13 = new Chunk("1-800-737-0012", _Font14BoldFont);
            Chunk c14 = new Chunk("\n\n\n", _Font12Font);
            Chunk c15 = new Chunk("Thank you,", _Font14Font);
            Chunk c16 = new Chunk("\n\n", _Font12Font);
            Chunk c17 = new Chunk("J&B Medical – DIS Program\n", _Font14Font);
            Chunk c18 = new Chunk("Staff Nurse", _Font14Font);

            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(c2);
            p1.Add(c3);
            p1.Add(c4);
            p1.Add(c5);
            p1.Add(c6);
            p1.Add(c7);
            p1.Add(c8);
            p1.Add(c9);
            p1.Add(c10);
            p1.Add(c11);
            p1.Add(c12);
            p1.Add(c13);
            p1.Add(c14);
            p1.Add(c15);
            p1.Add(c16);
            p1.Add(c17);
            p1.Add(c18);

            Paragraph P = new Paragraph();
            // P.IndentationLeft = 20f;

            P.Add(p1);
            doc.Add(P);



        }

        private void AddReassessmentetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font14Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("As one of our members we would like to thank you for your continued loyalty. We are committed to providing you with the highest value of products and customer care.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n We are writing you to complete an updated review of the products we ship to you as required by your health plan.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n Please complete the attached form(s) and return as soon as possible. If you have an online account, you can also login, complete these form(s) and upload to the website. To create an online account, go to www.jandbportal.com and register.  If you would like to complete by phone, please call 800-737-0045 and when asked “how can I help you?” answer by saying “reassessment”. \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n This review must be completed in order for supplies to continue to ship. Failing to complete this updated review may cause in delay of future orders.  \n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n\n\nThank you for your attention to this request. "));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n\n\nJ&B Medical Supply Customer Service"));

        }



        public void MergeBCNFinalNotice(string filePath, string destination, bool EmailFax)
        {
            string BCNFinalNotice = "C://LettersTemp//BCN//FinalNotice.pdf";
            if (EmailFax == true)
            {
                BCNFinalNotice = "C://LettersTemp//BCN//FinalNoticeFaxEmail.pdf";
            }

            List<string> files = new List<string>();

            files.Add(filePath);
            files.Add(BCNFinalNotice);
            // Merge it with Welcome Letter
            MergePdfs.MergeFiles(destination, files, 2);
            MergePdfs.DeleteFiles(filePath);

        }


        public void MergeReassessment(string filePath, string destination, bool EmailFax, string FileToAdd, string Form2)
        {
            string ReassessmentForm = FileToAdd;
            //   string Form2 = "C://LettersTemp//Reassessment//ReassessmentLetterMail_2.pdf";

            List<string> files = new List<string>();

            files.Add(filePath);
            files.Add(ReassessmentForm);
            files.Add(Form2);
            // Merge it with Welcome Letter
            MergePdfs.MergeFiles(destination, files, 3);
            MergePdfs.DeleteFiles(filePath);
            MergePdfs.DeleteFiles(FileToAdd);
            //  MergePdfs.DeleteFiles(Form2);

        }


        public void AddTxtToPdf(string oldFile, string newFile, string text, string DOB)
        {


            // open the reader
            PdfReader reader = new PdfReader(oldFile);
            Rectangle size = reader.GetPageSizeWithRotation(1);
            Document document = new Document(size);

            // open the writer
            FileStream fs = new FileStream(newFile, FileMode.Create, FileAccess.Write);
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();

            // the pdf content
            PdfContentByte cb = writer.DirectContent;

            // select the font properties
            BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            cb.SetFontAndSize(bf, 13);

            // write the text in the pdf content
            cb.BeginText();

            // put the alignment and coordinates here
            cb.ShowTextAligned(1, text, 180, 505, 0);
            cb.ShowTextAligned(1, DOB, 503, 505, 0);
            cb.EndText();

            cb.BeginText();

            // create the new page and add it to the pdf
            PdfImportedPage page = writer.GetImportedPage(reader, 1);
            cb.AddTemplate(page, 0, 0);


            // close the streams and voilá the file should be changed :)
            document.Close();
            fs.Close();
            writer.Close();
            reader.Close();


        }

        public void AddTxtToPdf_LT(string oldFile, string newFile, string text, string DOB)
        {


            // open the reader
            PdfReader reader = new PdfReader(oldFile);
            Rectangle size = reader.GetPageSizeWithRotation(1);
            Document document = new Document(size);

            // open the writer
            FileStream fs = new FileStream(newFile, FileMode.Create, FileAccess.Write);
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();

            // the pdf content
            PdfContentByte cb = writer.DirectContent;

            // select the font properties
            BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            cb.SetFontAndSize(bf, 13);

            // write the text in the pdf content
            cb.BeginText();

            // put the alignment and coordinates here
            cb.ShowTextAligned(1, text, 180, 305, 0);
            cb.ShowTextAligned(1, DOB, 503, 305, 0);
            cb.EndText();

            cb.BeginText();

            // create the new page and add it to the pdf
            PdfImportedPage page = writer.GetImportedPage(reader, 1);
            cb.AddTemplate(page, 0, 0);


            // close the streams and voilá the file should be changed :)
            document.Close();
            fs.Close();
            writer.Close();
            reader.Close();


        }

        public void AddAddressToPdf(string oldFile, string newFile, string name, string address, string city)
        {


            // open the reader
            PdfReader reader = new PdfReader(oldFile);
            Rectangle size = reader.GetPageSizeWithRotation(1);
            Document document = new Document(size);

            // open the writer
            FileStream fs = new FileStream(newFile, FileMode.Create, FileAccess.Write);
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();

            // the pdf content
            PdfContentByte cb = writer.DirectContent;

            // select the font properties
            BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            cb.SetFontAndSize(bf, 11);

            // write the text in the pdf content
            cb.BeginText();

            // put the alignment and coordinates here
            cb.ShowTextAligned(3, name, 35, 657, 0); // 690, 657
            cb.ShowTextAligned(3, address, 35, 642, 0); // 673,  642
            cb.ShowTextAligned(3, city, 35, 626, 0); //   657,  626

            cb.EndText();

            cb.BeginText();

            // create the new page and add it to the pdf
            PdfImportedPage page = writer.GetImportedPage(reader, 1);
            cb.AddTemplate(page, 0, 0);


            // close the streams and voilá the file should be changed :)
            document.Close();
            fs.Close();
            writer.Close();
            reader.Close();


        }
        public void AddTxtToFaxCoverLetter(string oldFile, string newFile, string name, string fax)
        {


            // open the reader
            PdfReader reader = new PdfReader(oldFile);
            Rectangle size = reader.GetPageSizeWithRotation(1);
            Document document = new Document(size);

            // open the writer
            FileStream fs = new FileStream(newFile, FileMode.Create, FileAccess.Write);
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();

            // the pdf content
            PdfContentByte cb = writer.DirectContent;

            // select the font properties
            BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            cb.SetFontAndSize(bf, 11);

            // write the text in the pdf content
            cb.BeginText();

            // put the alignment and coordinates here
            cb.ShowTextAligned(1, name, 350, 642, 0);
            cb.ShowTextAligned(1, fax, 350, 627, 0);
            cb.EndText();

            cb.BeginText();

            // create the new page and add it to the pdf
            PdfImportedPage page = writer.GetImportedPage(reader, 1);
            cb.AddTemplate(page, 0, 0);


            // close the streams and voilá the file should be changed :)
            document.Close();
            fs.Close();
            writer.Close();
            reader.Close();


        }


        public void manipulatePdf(String oldFile, String newFile, string account, string text)
        {

            //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            using (Stream inputPdfStream = new FileStream(oldFile, FileMode.Open, FileAccess.Read, FileShare.Read))

            //  using (Stream inputImageStream = new FileStream(Server.MapPath("~") + "/logo/test.jpg", FileMode.Open, FileAccess.Read, FileShare.Read))
            using (Stream outputPdfStream = new FileStream(newFile, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                var reader = new PdfReader(inputPdfStream);
                var stamper = new PdfStamper(reader, outputPdfStream);
                var pdfContentByte = stamper.GetOverContent(1);
                image39 = GetBarcode39(pdfContentByte, account + "-RL", false);
                //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(inputImageStream);
                image39.SetAbsolutePosition(450, 730);
                pdfContentByte.AddImage(image39);

                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                pdfContentByte.SetFontAndSize(bf, 13);

                // write the text in the pdf content
                pdfContentByte.BeginText();

                // put the alignment and coordinates here
                pdfContentByte.ShowTextAligned(1, text, 160, 750, 0);
                pdfContentByte.EndText();

                stamper.Close();
            }
        }



        public void manipulateArabianFirstPagePdf(String oldFile, String newFile, GeneratorModel _vm)
        {

            //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            using (Stream inputPdfStream = new FileStream(oldFile, FileMode.Open, FileAccess.Read, FileShare.Read))

            //  using (Stream inputImageStream = new FileStream(Server.MapPath("~") + "/logo/test.jpg", FileMode.Open, FileAccess.Read, FileShare.Read))
            using (Stream outputPdfStream = new FileStream(newFile, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                var reader = new PdfReader(inputPdfStream);

                var stamper = new PdfStamper(reader, outputPdfStream);

                var pdfContentByte = stamper.GetOverContent(2);
                //image39 = GetBarcode39(pdfContentByte, _vm.Account + "RL", false);
                //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(inputImageStream);
                // image39.SetAbsolutePosition(450, 730);
                //  pdfContentByte.AddImage(image39);

                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                //pdfContentByte.SetFontAndSize(bf, 13);

                //// write the text in the pdf content
                //pdfContentByte.BeginText();

                //// put the alignment and coordinates here
                //pdfContentByte.ShowTextAligned(1, _vm.details.firstName.TrimEnd().TrimStart(), 100, 640, 0);
                //pdfContentByte.EndText();

                ////address
                //pdfContentByte.BeginText();
                //// put the alignment and coordinates here
                //pdfContentByte.ShowTextAligned(1, _vm.details.address1.TrimEnd().TrimStart() + " " +_vm.details.address2, 100, 625, 0);
                //pdfContentByte.EndText();

                ////city ,state, zip
                ////address
                //pdfContentByte.BeginText();
                //// put the alignment and coordinates here
                //pdfContentByte.ShowTextAligned(1, _vm.details.city.TrimEnd().TrimStart() + ", " + _vm.details.state.TrimEnd().TrimStart() + ", "+_vm.details.zipcode.TrimEnd().TrimStart(), 100, 610, 0);
                //pdfContentByte.EndText();

                //stamper.Close(); 
            }
        }

        public void manipulateArabianLastPagePdf(String oldFile, String newFile, string account, string text)
        {

            //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            using (Stream inputPdfStream = new FileStream(oldFile, FileMode.Open, FileAccess.Read, FileShare.Read))

            //  using (Stream inputImageStream = new FileStream(Server.MapPath("~") + "/logo/test.jpg", FileMode.Open, FileAccess.Read, FileShare.Read))
            using (Stream outputPdfStream = new FileStream(newFile, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                var reader = new PdfReader(inputPdfStream);
                var stamper = new PdfStamper(reader, outputPdfStream);
                var pdfContentByte = stamper.GetOverContent(1);
                image39 = GetBarcode39(pdfContentByte, account + "-RL", false);
                //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(inputImageStream);
                image39.SetAbsolutePosition(450, 730);
                pdfContentByte.AddImage(image39);

                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                pdfContentByte.SetFontAndSize(bf, 13);

                // write the text in the pdf content
                pdfContentByte.BeginText();

                // put the alignment and coordinates here
                pdfContentByte.ShowTextAligned(1, text, 100, 450, 0);
                pdfContentByte.EndText();

                stamper.Close();
            }
        }

        public void manipulateDiaRessmentLPdf(String oldFile, String newFile, string account, string text)
        {

            //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            using (Stream inputPdfStream = new FileStream(oldFile, FileMode.Open, FileAccess.Read, FileShare.Read))

            //  using (Stream inputImageStream = new FileStream(Server.MapPath("~") + "/logo/test.jpg", FileMode.Open, FileAccess.Read, FileShare.Read))
            using (Stream outputPdfStream = new FileStream(newFile, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                var reader = new PdfReader(inputPdfStream);
                var stamper = new PdfStamper(reader, outputPdfStream);
                var pdfContentByte = stamper.GetOverContent(1);
                image39 = GetBarcode39(pdfContentByte, account + "-DR", false);
                //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(inputImageStream);
                image39.SetAbsolutePosition(450, 730);
                pdfContentByte.AddImage(image39);

                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                pdfContentByte.SetFontAndSize(bf, 13);

                // write the text in the pdf content
                pdfContentByte.BeginText();

                // put the alignment and coordinates here
                pdfContentByte.ShowTextAligned(1, text, 160, 750, 0);
                pdfContentByte.EndText();

                stamper.Close();
            }
        }


        public void manipulateLNMPdf(String oldFile, String newFile, string account, string text)
        {

            //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            using (Stream inputPdfStream = new FileStream(oldFile, FileMode.Open, FileAccess.Read, FileShare.Read))

            //  using (Stream inputImageStream = new FileStream(Server.MapPath("~") + "/logo/test.jpg", FileMode.Open, FileAccess.Read, FileShare.Read))
            using (Stream outputPdfStream = new FileStream(newFile, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                var reader = new PdfReader(inputPdfStream);
                var stamper = new PdfStamper(reader, outputPdfStream);
                var pdfContentByte = stamper.GetOverContent(1);
                image39 = GetBarcode39(pdfContentByte, account + "-LNM", false);
                //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(inputImageStream);
                image39.SetAbsolutePosition(450, 730);
                pdfContentByte.AddImage(image39);

                BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1257, BaseFont.NOT_EMBEDDED);

                pdfContentByte.SetFontAndSize(bf, 18);

                // write the text in the pdf content
                pdfContentByte.BeginText();

                // put the alignment and coordinates here
                pdfContentByte.ShowTextAligned(1, text, 160, 750, 0);
                pdfContentByte.EndText();

                stamper.Close();
            }
        }

        public void manipulateDNMPdf(String oldFile, String newFile, string account, string text)
        {

            //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            using (Stream inputPdfStream = new FileStream(oldFile, FileMode.Open, FileAccess.Read, FileShare.Read))

            //  using (Stream inputImageStream = new FileStream(Server.MapPath("~") + "/logo/test.jpg", FileMode.Open, FileAccess.Read, FileShare.Read))
            using (Stream outputPdfStream = new FileStream(newFile, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                var reader = new PdfReader(inputPdfStream);
                var stamper = new PdfStamper(reader, outputPdfStream);
                var pdfContentByte = stamper.GetOverContent(1);
                image39 = GetBarcode39(pdfContentByte, account + "-DNM", false);
                //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(inputImageStream);
                image39.SetAbsolutePosition(450, 730);
                pdfContentByte.AddImage(image39);

                BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1257, BaseFont.NOT_EMBEDDED);

                pdfContentByte.SetFontAndSize(bf, 18);

                // write the text in the pdf content
                pdfContentByte.BeginText();

                // put the alignment and coordinates here
                pdfContentByte.ShowTextAligned(1, text, 160, 750, 0);
                pdfContentByte.EndText();

                stamper.Close();
            }
        }

        public void manipulatePdf2(String oldFile, String newFile, string account, string text, long? acc)
        {
            IList<Uro_InconItems> Items = GetInconUroItems(acc);


            //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            using (Stream inputPdfStream = new FileStream(oldFile, FileMode.Open, FileAccess.Read, FileShare.Read))

            //  using (Stream inputImageStream = new FileStream(Server.MapPath("~") + "/logo/test.jpg", FileMode.Open, FileAccess.Read, FileShare.Read))
            using (Stream outputPdfStream = new FileStream(newFile, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                var reader = new PdfReader(inputPdfStream);
                var stamper = new PdfStamper(reader, outputPdfStream);
                var pdfContentByte = stamper.GetOverContent(1);

                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                pdfContentByte.SetFontAndSize(bf, 11);

                // write the text in the pdf content
                pdfContentByte.BeginText();

                // put the alignment and coordinates here
                //  pdfContentByte.ShowTextAligned(1, text, 160, 730, 0);
                //  pdfContentByte.ShowTextAligned(1, text, 160, 710, 0);
                //  pdfContentByte.ShowTextAligned(1, text, 160, 690, 0);
                //  pdfContentByte.EndText();

                //------------------------ADd Table
                PdfPCell cell = null;
                PdfPTable table = null;

                table = new PdfPTable(3);
                table.HorizontalAlignment = Element.ALIGN_LEFT;
                table.SetWidths(new float[] { 2f, 0.5f, 0.5f });
                table.SpacingBefore = 20f;

                cell = new PdfPCell(new Phrase(new Chunk("Product Description", _Font10Font)));
                table.AddCell(cell);

                cell = new PdfPCell(new Phrase(new Chunk("Quantity", _Font10Font)));
                table.AddCell(cell);

                cell = new PdfPCell(new Phrase(new Chunk("UOM", _Font10Font)));
                table.AddCell(cell);

                foreach (var rec in Items)
                {
                    cell = new PdfPCell(new Phrase(new Chunk(rec.ProdDes, _Font10Font)));
                    table.AddCell(cell);

                    cell = new PdfPCell(new Phrase(new Chunk(rec.Qty.ToString(), _Font10Font)));
                    table.AddCell(cell);

                    cell = new PdfPCell(new Phrase(new Chunk(rec.UOM.ToString(), _Font10Font)));
                    table.AddCell(cell);

                }

                ColumnText ct = new ColumnText(stamper.GetOverContent(1));
                ct.AddElement(table);
                Rectangle rect = new Rectangle(50, 50, 50, 50);
                ct.SetSimpleColumn(50, 50, PageSize.A4.Width - 50, PageSize.A4.Height - 100);
                ct.Go();
                //-------------------------------------


                stamper.Close();
            }
        }

        public void manipulateDiabeticRLPdf2(String oldFile, String newFile, string account, string text, long? acc)
        {
            IList<Uro_InconItems> Items = GetDiabeticItems(acc);


            //  iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            using (Stream inputPdfStream = new FileStream(oldFile, FileMode.Open, FileAccess.Read, FileShare.Read))

            //  using (Stream inputImageStream = new FileStream(Server.MapPath("~") + "/logo/test.jpg", FileMode.Open, FileAccess.Read, FileShare.Read))
            using (Stream outputPdfStream = new FileStream(newFile, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                var reader = new PdfReader(inputPdfStream);
                var stamper = new PdfStamper(reader, outputPdfStream);
                var pdfContentByte = stamper.GetOverContent(1);

                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                pdfContentByte.SetFontAndSize(bf, 11);

                // write the text in the pdf content
                pdfContentByte.BeginText();

                // put the alignment and coordinates here
                //  pdfContentByte.ShowTextAligned(1, text, 160, 730, 0);
                //  pdfContentByte.ShowTextAligned(1, text, 160, 710, 0);
                //  pdfContentByte.ShowTextAligned(1, text, 160, 690, 0);
                //  pdfContentByte.EndText();

                //------------------------ADd Table
                PdfPCell cell = null;
                PdfPTable table = null;

                table = new PdfPTable(3);
                table.HorizontalAlignment = Element.ALIGN_LEFT;
                table.SetWidths(new float[] { 3f, 0.5f, 0.5f });
                table.SpacingBefore = 20f;

                cell = new PdfPCell(new Phrase(new Chunk("Product Description", _Font10Font)));
                table.AddCell(cell);

                cell = new PdfPCell(new Phrase(new Chunk("Quantity", _Font10Font)));
                table.AddCell(cell);

                cell = new PdfPCell(new Phrase(new Chunk("UOM", _Font10Font)));
                table.AddCell(cell);

                foreach (var rec in Items)
                {
                    cell = new PdfPCell(new Phrase(new Chunk(rec.ProdDes, _Font10Font)));
                    table.AddCell(cell);

                    cell = new PdfPCell(new Phrase(new Chunk(rec.Qty.ToString(), _Font10Font)));
                    table.AddCell(cell);

                    cell = new PdfPCell(new Phrase(new Chunk(rec.UOM.ToString(), _Font10Font)));
                    table.AddCell(cell);

                }

                ColumnText ct = new ColumnText(stamper.GetOverContent(1));
                ct.AddElement(table);
                Rectangle rect = new Rectangle(50, 50, 50, 50);
                ct.SetSimpleColumn(50, 50, PageSize.A4.Width - 50, PageSize.A4.Height - 420);
                ct.Go();
                //-------------------------------------


                stamper.Close();
            }
        }


        public IList<Uro_InconItems> GetInconUroItems(long? account)
        {
            IList<Uro_InconItems> ItemsList = new List<Uro_InconItems>();
            using (HHSQLDBEntities _db = new HHSQLDBEntities())
            {
                ItemsList = (from r in _db.tbl_PS_RepeatingOrders
                             join p in _db.tbl_Product_Table
                                    on r.ID_Product equals p.ID
                             join jb in _db.JBCCServiceProductLine_ProductCategory
                                    on p.ID_ProductCategory equals jb.ProductCategoryId
                             join u in _db.tbl_Inv_UOM_Table
                              on p.ID_UOM equals u.ID
                             where r.Account == account && (jb.ProductLineId == 1 || jb.ProductLineId == 4)
                             select new Uro_InconItems
                             {
                                 ProdDes = p.ProductDescription,
                                 Qty = r.Qty,
                                 UOM = u.UOMName
                             }).ToList<Uro_InconItems>();
            }

            return ItemsList;

        }

        public IList<Uro_InconItems> GetDiabeticItems(long? account)
        {
            IList<Uro_InconItems> ItemsList = new List<Uro_InconItems>();
            using (HHSQLDBEntities _db = new HHSQLDBEntities())
            {
                ItemsList = (from r in _db.tbl_PS_RepeatingOrders
                             join p in _db.tbl_Product_Table
                                    on r.ID_Product equals p.ID
                             join jb in _db.JBCCServiceProductLine_ProductCategory
                                    on p.ID_ProductCategory equals jb.ProductCategoryId
                             join u in _db.tbl_Inv_UOM_Table
                              on p.ID_UOM equals u.ID
                             where r.Account == account && (jb.ProductLineId == 3)
                             select new Uro_InconItems
                             {
                                 ProdDes = p.ProductDescription,
                                 Qty = r.Qty,
                                 UOM = u.UOMName
                             }).ToList<Uro_InconItems>();
            }

            return ItemsList;

        }

        public void BuildPaymentCollectionPdf(GeneratorModel _vm)
        {
            // bool res = AOBGenerator.CheckIfBCN(_vm.Account);
            bool res = false;

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;


            string filename = Date + "_" + _vm.Account.ToString() + "_PC" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_PCTemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_PC" + ".pdf";

            if (res == true)
            { filename = filenameTemp; }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";

                string path = "C://Letters//1 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-PC", false); //


                    if (res == false)
                    {
                        this.AddPaymentCollectionLetter(doc, _vm);
                        //  this.AddContactLetter(doc, _vm);
                    }
                    else if (res == true)
                    {
                        this.AddPaymentCollectionLetter(doc, _vm);
                        this.AddBlackPage(doc);
                        //MergeBCNFinalNotice(path + filename);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }

                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";

                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-PC", false); //


                    this.AddEmailContactCover(doc, _vm);
                    this.AddPaymentCollectionLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }



                }
                filename = Date + "_" + _vm.Account.ToString() + "_PC" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    PdfReader pdfReader = new PdfReader(path + filename);
                    int numberOfPages = pdfReader.NumberOfPages;
                    if (numberOfPages != 2)
                    {
                        System.IO.File.Delete(path + filename);
                        _vm.FileExists = false;
                        _vm.IsPage = false;
                    }
                    else
                    {
                        Emails.AutoEmail(_vm.Email, path + filename, "Payment Collection Letter");
                    }
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-PC", false); //


                    this.AddFaxContactCover(doc1, _vm);
                    this.AddPaymentCollectionLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_PC" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    PdfReader pdfReader = new PdfReader(path + filename);
                    int numberOfPages = pdfReader.NumberOfPages;
                    if (numberOfPages != 2)
                    {
                        System.IO.File.Delete(path + filename);
                        _vm.FileExists = false;
                        _vm.IsPage = false;
                    }
                    else
                    {

                        Emails.AutoFax(_vm.FedEx, path + filename);


                    }
                }
            }




            //Fax is checked


        }

        public void BuildDetailedReceiptLetterPdf(GeneratorModel _vm)
        {
            // bool res = AOBGenerator.CheckIfBCN(_vm.Account);
            bool res = false;

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;


            string filename = Date + "_" + _vm.Account.ToString() + "_DRL" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_DRLTemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_DRL" + ".pdf";

            if (res == true)
            { filename = filenameTemp; }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";

                string path = "C://Letters//1 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-DRL", false); //


                    if (res == false)
                    {
                        this.AddDetailedReceiptLetter(doc, _vm, pdfContentByte, writer);
                        //  this.AddContactLetter(doc, _vm);
                    }
                    else if (res == true)
                    {
                        this.AddDetailedReceiptLetter(doc, _vm, pdfContentByte, writer);
                        this.AddBlackPage(doc);
                        //MergeBCNFinalNotice(path + filename);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }

                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";

                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-DRL", false); //


                    //   this.AddEmailContactCover(doc, _vm);
                    this.AddDetailedReceiptLetter(doc, _vm, pdfContentByte, writer);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }



                }
                filename = Date + "_" + _vm.Account.ToString() + "_DRL" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    PdfReader pdfReader = new PdfReader(path + filename);
                    int numberOfPages = pdfReader.NumberOfPages;
                    if (numberOfPages != 1)
                    {
                        System.IO.File.Delete(path + filename);
                        _vm.FileExists = false;
                        _vm.IsPage = false;
                    }
                    else
                    {
                        Emails.AutoEmailDRL(_vm.Email, path + filename, "Detailed Receipt Letter", _vm.details.firstName + " " + _vm.details.lastName);
                    }
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-DRL", false); //


                    this.AddFaxContactCover_DL(doc1, _vm);
                    this.AddDetailedReceiptLetter(doc1, _vm, pdfContentByte, writer);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_DRL" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    PdfReader pdfReader = new PdfReader(path + filename);
                    int numberOfPages = pdfReader.NumberOfPages;
                    if (numberOfPages != 2)
                    {
                        System.IO.File.Delete(path + filename);
                        _vm.FileExists = false;
                        _vm.IsPage = false;
                    }
                    else
                    {

                        Emails.AutoFax(_vm.FedEx, path + filename);


                    }
                }
            }




            //Fax is checked


        }

        public void BuildCoverLetterPdf(GeneratorModel _vm)
        {
            bool res = AOBGenerator.CheckIfBCN(_vm.Account);

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_CL" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_CLTemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_CL" + ".pdf";

            if (_vm.spanish == true)
            {
                filename = Date + "_" + _vm.Account.ToString() + "_CL_S" + ".pdf";
                filenameTemp = Date + "_" + _vm.Account.ToString() + "_CLTemp_S" + ".pdf";

                filenameOrigin = Date + "_" + _vm.Account.ToString() + "_CL_S" + ".pdf";
            }


            if (res == true)
            { filename = filenameTemp; }



            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";

                string path = "C://Letters//1 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    if (res == false)
                    {
                        if (_vm.spanish == true)
                        {
                            this.AddContactLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            this.AddContactLetter(doc, _vm);
                        }
                    }
                    else if (res == true)
                    {
                        if (_vm.spanish == true)
                        {
                            this.AddContactLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            this.AddContactLetter(doc, _vm);
                        }
                        //  this.AddContactLetter(doc, _vm);
                        this.AddBlackPage(doc);
                        //MergeBCNFinalNotice(path + filename);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }

                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";

                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    //  this.AddEmailContactCover(doc, _vm);
                    if (_vm.spanish == true)
                    {
                        this.AddContactLetter_Spanish(doc, _vm);
                    }
                    else
                    {
                        this.AddContactLetter(doc, _vm);
                    }
                    //  this.AddContactLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }



                }

                if (_vm.spanish == true)
                {
                    filename = Date + "_" + _vm.Account.ToString() + "_CL_S" + ".pdf";
                }
                else
                {
                    filename = Date + "_" + _vm.Account.ToString() + "_CL" + ".pdf";
                }
                if (System.IO.File.Exists(path + filename))
                {
                    if (_vm.spanish == true)
                    {
                        Emails.AutoEmailSpanish(_vm.Email, path + filename, "Contact Letter");
                    }
                    else
                    {
                        Emails.AutoEmail(_vm.Email, path + filename, "Contact Letter");
                    }
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    if (_vm.spanish == true)
                    {
                        this.AddFaxContactCover_Spanish(doc1, _vm);
                    }
                    else
                    {
                        this.AddFaxContactCover(doc1, _vm);
                    }

                    if (_vm.spanish == true)
                    {
                        this.AddContactLetter_Spanish(doc1, _vm);
                    }
                    else
                    {
                        this.AddContactLetter(doc1, _vm);
                    }
                    //  this.AddContactLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }

                    filename = Date + "_" + _vm.Account.ToString() + "_CL" + ".pdf";
                    if (System.IO.File.Exists(path + filename))
                    {
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                }
            }




            //Fax is checked


        }

        public void BuildSympathyContactLetterPdf(GeneratorModel _vm)
        {
            bool res = AOBGenerator.CheckIfBCN(_vm.Account);

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_SCL" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_SCLTemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_SCL" + ".pdf";

            if (_vm.spanish == true)
            {
                filename = Date + "_" + _vm.Account.ToString() + "_SCL_S" + ".pdf";
                filenameTemp = Date + "_" + _vm.Account.ToString() + "_SCLTemp_S" + ".pdf";

                filenameOrigin = Date + "_" + _vm.Account.ToString() + "_SCL_S" + ".pdf";
            }


            if (res == true)
            { filename = filenameTemp; }



            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";

                string path = "C://Letters//1 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    if (res == false)
                    {
                        if (_vm.spanish == true)
                        {
                            this.AddContactLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            this.AddSympathyContactLetter(doc, _vm);
                        }
                    }
                    else if (res == true)
                    {
                        if (_vm.spanish == true)
                        {
                            this.AddContactLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            this.AddSympathyContactLetter(doc, _vm);
                        }
                        //  this.AddContactLetter(doc, _vm);
                        this.AddBlackPage(doc);
                        //MergeBCNFinalNotice(path + filename);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }

                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";

                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    //  this.AddEmailContactCover(doc, _vm);
                    if (_vm.spanish == true)
                    {
                        this.AddContactLetter_Spanish(doc, _vm);
                    }
                    else
                    {
                        this.AddSympathyContactLetter(doc, _vm);
                    }
                    //  this.AddContactLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }



                }

                if (_vm.spanish == true)
                {
                    filename = Date + "_" + _vm.Account.ToString() + "_SCL_S" + ".pdf";
                }
                else
                {
                    filename = Date + "_" + _vm.Account.ToString() + "_SCL" + ".pdf";
                }
                if (System.IO.File.Exists(path + filename))
                {
                    if (_vm.spanish == true)
                    {
                        Emails.AutoEmailSpanish(_vm.Email, path + filename, "Sympathy Contact Letter");
                    }
                    else
                    {
                        Emails.AutoEmail(_vm.Email, path + filename, "Sympathy Contact Letter");
                    }
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    if (_vm.spanish == true)
                    {
                        this.AddFaxContactCover_Spanish(doc1, _vm);
                    }
                    else
                    {
                        this.AddFaxContactCover(doc1, _vm);
                    }

                    if (_vm.spanish == true)
                    {
                        this.AddContactLetter_Spanish(doc1, _vm);
                    }
                    else
                    {
                        this.AddSympathyContactLetter(doc1, _vm);
                    }
                    //  this.AddContactLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }

                    filename = Date + "_" + _vm.Account.ToString() + "_SCL" + ".pdf";
                    if (System.IO.File.Exists(path + filename))
                    {
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                }
            }




            //Fax is checked


        }
        public void BuildOffLableLetterPdf(GeneratorModel _vm)
        {
            bool res = AOBGenerator.CheckIfBCN(_vm.Account);

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_OLM" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_OLMTemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_OLM" + ".pdf";

            if (_vm.spanish == true)
            {
                filename = Date + "_" + _vm.Account.ToString() + "_OLM_S" + ".pdf";
                filenameTemp = Date + "_" + _vm.Account.ToString() + "_OLMTemp_S" + ".pdf";

                filenameOrigin = Date + "_" + _vm.Account.ToString() + "_OLM_S" + ".pdf";
            }


            if (res == true)
            { filename = filenameTemp; }



            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";

                string path = "C://Letters//2 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    if (res == false)
                    {
                        if (_vm.spanish == true)
                        {
                            // this.AddContactLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            this.AddOffLabelMemberLetterFirstPage(doc, _vm);
                            this.AddBlackPage(doc);
                            this.AddOffLabelMemberLetter(doc, _vm);
                            this.AddBlackPage(doc);
                        }
                    }
                    else if (res == true)
                    {
                        if (_vm.spanish == true)
                        {
                            // this.AddContactLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            this.AddOffLabelMemberLetterFirstPage(doc, _vm);
                            this.AddBlackPage(doc);
                            this.AddOffLabelMemberLetter(doc, _vm);
                        }
                        //  this.AddContactLetter(doc, _vm);
                        this.AddBlackPage(doc);
                        //MergeBCNFinalNotice(path + filename);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }

                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";

                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    //  this.AddEmailContactCover(doc, _vm);
                    if (_vm.spanish == true)
                    {
                        // this.AddContactLetter_Spanish(doc, _vm);
                    }
                    else
                    {
                        this.AddOffLabelMemberLetter(doc, _vm);

                    }
                    //  this.AddContactLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }



                }

                if (_vm.spanish == true)
                {
                    filename = Date + "_" + _vm.Account.ToString() + "_OLM_S" + ".pdf";
                }
                else
                {
                    filename = Date + "_" + _vm.Account.ToString() + "_OLM" + ".pdf";
                }
                if (System.IO.File.Exists(path + filename))
                {
                    if (_vm.spanish == true)
                    {
                        Emails.AutoEmailSpanish(_vm.Email, path + filename, "Off Label Member Letter");
                    }
                    else
                    {
                        Emails.AutoEmail(_vm.Email, path + filename, "Off Label Member Letter");
                    }
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    if (_vm.spanish == true)
                    {
                        this.AddFaxContactCover_Spanish(doc1, _vm);
                    }
                    else
                    {
                        this.AddFaxContactCover(doc1, _vm);
                    }

                    if (_vm.spanish == true)
                    {
                        this.AddContactLetter_Spanish(doc1, _vm);
                    }
                    else
                    {
                        this.AddContactLetter(doc1, _vm);
                    }
                    //  this.AddContactLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }

                    filename = Date + "_" + _vm.Account.ToString() + "_OLM" + ".pdf";
                    if (System.IO.File.Exists(path + filename))
                    {
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                }
            }




            //Fax is checked


        }

        public void BuildMediciadSecondaryLetterPdf(GeneratorModel _vm)
        {
            bool res = AOBGenerator.CheckIfBCN(_vm.Account);

            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_MSL" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_MSLTemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_MSL" + ".pdf";

            if (_vm.spanish == true)
            {
                filename = Date + "_" + _vm.Account.ToString() + "_MSL_S" + ".pdf";
                filenameTemp = Date + "_" + _vm.Account.ToString() + "_MSLTemp_S" + ".pdf";

                filenameOrigin = Date + "_" + _vm.Account.ToString() + "_MSL_S" + ".pdf";
            }


            if (res == true)
            { filename = filenameTemp; }



            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";

                string path = "C://Letters//1 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;



                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    if (res == false)
                    {
                        if (_vm.spanish == true)
                        {
                            this.AddContactLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            this.AddMedicaidSecondaryLetter(doc, _vm, writer);
                        }
                    }
                    else if (res == true)
                    {
                        if (_vm.spanish == true)
                        {
                            this.AddContactLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            this.AddMedicaidSecondaryLetter(doc, _vm, writer);
                        }
                        //  this.AddContactLetter(doc, _vm);
                        this.AddBlackPage(doc);
                        //MergeBCNFinalNotice(path + filename);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }

                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";

                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    //  this.AddEmailContactCover(doc, _vm);
                    if (_vm.spanish == true)
                    {
                        this.AddContactLetter_Spanish(doc, _vm);
                    }
                    else
                    {
                        this.AddMedicaidSecondaryLetter(doc, _vm, writer);
                    }
                    //  this.AddContactLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }



                }

                if (_vm.spanish == true)
                {
                    filename = Date + "_" + _vm.Account.ToString() + "_MSL_S" + ".pdf";
                }
                else
                {
                    filename = Date + "_" + _vm.Account.ToString() + "_MSL" + ".pdf";
                }
                if (System.IO.File.Exists(path + filename))
                {
                    if (_vm.spanish == true)
                    {
                        Emails.AutoEmailSpanish(_vm.Email, path + filename, "Medicaid as a Secondary Letter");
                    }
                    else
                    {
                        Emails.AutoEmail(_vm.Email, path + filename, "Medicaid as a Secondary Letter");
                    }
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    if (_vm.spanish == true)
                    {
                        this.AddFaxContactCover_Spanish(doc1, _vm);
                    }
                    else
                    {
                        this.AddFaxContactCover(doc1, _vm);
                    }

                    if (_vm.spanish == true)
                    {
                        this.AddContactLetter_Spanish(doc1, _vm);
                    }
                    else
                    {
                        this.AddMedicaidSecondaryLetter(doc1, _vm, writer);
                    }
                    //  this.AddContactLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }

                    filename = Date + "_" + _vm.Account.ToString() + "_MSL" + ".pdf";
                    if (System.IO.File.Exists(path + filename))
                    {
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }
                }
            }




            //Fax is checked


        }

        public void BuildBCNOrderConfirmNoticePdf(GeneratorModel _vm)
        {

            bool res = AOBGenerator.CheckIfBCN(_vm.Account);
            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_BCN_OC" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_BCN_OCTemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_BCN_OC" + ".pdf";

            if (res == true)
            { filename = filenameTemp; }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//2 Page" + "//";

                if (res == true)
                { path = "C://Letters//BCN" + "//"; }

                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();
                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-BOC", false); //


                    if (res == false)
                    {
                        this.AddBCNOrdeConfimLetter(doc, _vm);
                        this.AddBCNOrdeConfimLetter_page2(doc, _vm);
                    }
                    else if (res == true)
                    {
                        this.AddBCNOrdeConfimLetter(doc, _vm);
                        this.AddBlackPage(doc);
                        this.AddBCNOrdeConfimLetter_page2(doc, _vm);
                        this.AddBlackPage(doc);
                    }
                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";

                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-BOC", false); //


                    this.AddBCNEmailAOBCover(doc, _vm);
                    this.AddBCNOrdeConfimLetter(doc, _vm);
                    this.AddBCNOrdeConfimLetter_page2(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_BCN_OC" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "BCN Order Confirmation Notice");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-BOC", false); //


                    this.AddBCNFaxAOBCover(doc1, _vm);
                    this.AddBCNOrdeConfimLetter(doc1, _vm);
                    this.AddBCNOrdeConfimLetter_page2(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;

                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                    filename = Date + "_" + _vm.Account.ToString() + "_BCN_OC" + ".pdf";

                    if (System.IO.File.Exists(path + filename))
                    {
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }

                }
            }




            //Fax is checked


        }
        private void AddPaymentCollectionLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            int count = _vm.prodlist.Count();


            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.JPG");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(5);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 80f, 50f, 25f, 120f, 70f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);
            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(5);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 80f, 50f, 25f, 120f, 70f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);

            table3.AddCell(image39);
            doc.Add(table3);


            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("Return to J&B Medical Supply Co, Inc"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;


            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font10Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n\n\n"));
            //-------------------
            PdfPTable ProTbl = new PdfPTable(4);
            ProTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            ProTbl.WidthPercentage = 100;
            float[] ProTblwid = new float[] { 150f, 55f, 50f, 60f };
            ProTbl.SetWidths(ProTblwid);

            ProTbl.DefaultCell.Border = Rectangle.NO_BORDER;


            PdfPCell pro1 = new PdfPCell(new Phrase("Description of Product", _Font10BoldFont));
            pro1.HorizontalAlignment = Element.ALIGN_LEFT;
            pro1.Border = 0;
            ProTbl.AddCell(pro1);

            PdfPCell pro2 = new PdfPCell(new Phrase("Quantity", _Font10BoldFont));
            pro2.HorizontalAlignment = Element.ALIGN_LEFT;
            pro2.Border = 0;



            ProTbl.AddCell(pro2);

            PdfPCell pro3 = new PdfPCell(new Phrase("Insurance Rate", _Font10BoldFont));
            pro3.HorizontalAlignment = Element.ALIGN_CENTER;
            pro3.Border = 0;
            ProTbl.AddCell(pro3);

            PdfPCell pro4 = new PdfPCell(new Phrase("Amount ", _Font10BoldFont));
            pro4.HorizontalAlignment = Element.ALIGN_CENTER;
            pro4.Border = 0;
            ProTbl.AddCell(pro4);


            doc.Add(ProTbl);
            //-------------------------
            // go through product list
            int i = 0;
            foreach (var item in _vm.prodlist)
            {
                i++;
                if (item.include == true)
                {
                    PdfPTable proc = new PdfPTable(4);
                    proc.HorizontalAlignment = Element.ALIGN_LEFT;
                    // PdfPCell cell1 = new PdfPCell();
                    proc.WidthPercentage = 100;
                    float[] procwid = new float[] { 150f, 55f, 50f, 60f };
                    proc.SetWidths(procwid);

                    proc.DefaultCell.Border = Rectangle.NO_BORDER;


                    PdfPCell pc1 = new PdfPCell(new Phrase(item.Prod, _Font10Font));
                    pc1.HorizontalAlignment = Element.ALIGN_LEFT;
                    pc1.Border = 0;
                    proc.AddCell(pc1);

                    PdfPCell pc2 = new PdfPCell(new Phrase(item.qty.ToString(), _Font10Font));
                    pc2.HorizontalAlignment = Element.ALIGN_LEFT;
                    pc2.Border = 0;



                    proc.AddCell(pc2);

                    //  Decimal insRate = Convert.ToDecimal(item.insRt);
                    //  item.insRt = insRate.ToString("0.00");

                    PdfPCell pc3 = new PdfPCell(new Phrase("$" + item.insRt.ToString(), _Font10Font));
                    pc3.HorizontalAlignment = Element.ALIGN_CENTER;
                    pc3.Border = 0;
                    proc.AddCell(pc3);

                    Decimal amtRate = Convert.ToDecimal(item.amt);
                    item.amt = amtRate.ToString("0.00");

                    PdfPCell pc4 = new PdfPCell(new Phrase("$" + item.amt.ToString(), _Font10Font));
                    pc4.HorizontalAlignment = Element.ALIGN_CENTER;
                    pc4.Border = 0;
                    proc.AddCell(pc4);


                    doc.Add(proc);
                }
            }
            //------------------------

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("Coinsurance: " + _vm.Coins + "%"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("Deductible: " + "$" + _vm.Deduc));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10BoldFont, new Chunk("Amount Due: " + "$" + _vm.AmountDue));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10ItalicFont, new Chunk("(Actual costs are determined by your insurance payment)"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n\n"));

            //---------------------

            PdfPTable paytbl = new PdfPTable(1);
            paytbl.HorizontalAlignment = Element.ALIGN_CENTER;
            // PdfPCell cell1 = new PdfPCell();
            paytbl.WidthPercentage = 100;
            float[] paytblwidths = new float[] { 800f };
            paytbl.SetWidths(paytblwidths);

            paytbl.DefaultCell.Border = Rectangle.NO_BORDER;
            iTextSharp.text.Image pay1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\payment.jpg");
            pay1.ScaleToFit(500, 300);
            PdfPCell pay1imageCell = new PdfPCell(pay1);
            pay1imageCell.Colspan = 1; // either 1 if you need to insert one cell
            pay1imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            pay1imageCell.VerticalAlignment = Element.ALIGN_TOP;


            paytbl.AddCell(pay1imageCell);

            doc.Add(paytbl);




            //------------------------------

            Anchor JBPoratalLink = new Anchor("www.portal.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "https://portal.jandbmedical.com/SGAccount/MyLogin?ReturnUrl=%2f";

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _smallBoldFont, new Chunk("Your insurance may require you to confirm your supplies and/or you may have copay/coinsurance requirements that must be met before your order ships.  You can contact us by phone at (800) 737-0045 ext 125, interactive website www.jandbportal.com, J&B Medical Android or IOS app, or wait to receive a call from Victor (our automated system) 7 days before your order is due to ship.  \n\n"));
            Chunk c1 = new Chunk("Register at ", _Font12Font);

            Chunk c2 = new Chunk(" to reorder and pay for your supplies in the future!", _Font12Font);



            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(JBPoratalLink);
            p1.Add(c2);

            // p3.Add(click);
            Paragraph P1 = new Paragraph();
            P1.Add(p1);
            doc.Add(P1);


            for (int j = 0; j <= (9 - count); j++)
            {

                this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            }

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _FontGray10Font, new Chunk("BIL 2042                                  Approved By: Management                                 Revised: 2/24/2017"));



        }

        private void AddDetailedReceiptLetter(iTextSharp.text.Document doc, GeneratorModel _vm, PdfContentByte cb, iTextSharp.text.pdf.PdfWriter writer)
        {

            // int count = _vm.prodlist.Count();


            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.JPG");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(5);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 80f, 50f, 25f, 120f, 70f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);
            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(5);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 80f, 50f, 25f, 120f, 70f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);

            table3.AddCell(image39);
            doc.Add(table3);


            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("DETAILED RECEIPT FOR COPAY COLLECTED ON " + Convert.ToDateTime(_vm.DetailedReceiptDate).ToShortDateString()));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;


            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font10Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n\n\n"));
            //-------------------
            PdfPTable ProTbl = new PdfPTable(5);
            ProTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            ProTbl.WidthPercentage = 100;
            float[] ProTblwid = new float[] { 150f, 55f, 20f, 50f, 60f };
            ProTbl.SetWidths(ProTblwid);

            ProTbl.DefaultCell.Border = Rectangle.NO_BORDER;


            PdfPCell pro1 = new PdfPCell(new Phrase("Description of Product", _Font10BoldFont));
            pro1.HorizontalAlignment = Element.ALIGN_LEFT;
            pro1.Border = 0;
            ProTbl.AddCell(pro1);

            PdfPCell pro2 = new PdfPCell(new Phrase("Quantity", _Font10BoldFont));
            pro2.HorizontalAlignment = Element.ALIGN_LEFT;
            pro2.Border = 0;
            ProTbl.AddCell(pro2);

            PdfPCell proUOM = new PdfPCell(new Phrase("Uom", _Font10BoldFont));
            proUOM.HorizontalAlignment = Element.ALIGN_LEFT;
            proUOM.Border = 0;
            ProTbl.AddCell(proUOM);

            PdfPCell pro3 = new PdfPCell(new Phrase("Insurance Rate", _Font10BoldFont));
            pro3.HorizontalAlignment = Element.ALIGN_CENTER;
            pro3.Border = 0;
            ProTbl.AddCell(pro3);

            PdfPCell pro4 = new PdfPCell(new Phrase("Amount of Copay Collected", _Font10BoldFont));
            pro4.HorizontalAlignment = Element.ALIGN_CENTER;
            pro4.Border = 0;
            ProTbl.AddCell(pro4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Date of Service/Order = " + Convert.ToDateTime(_vm.DateOfService).ToShortDateString()));



            doc.Add(ProTbl);
            //-------------------------
            // go through product list
            int i = 0;
            Decimal amtTotal = 0;
            foreach (var item in _vm.prodlist)
            {
                i++;
                if (item.include == true)
                {
                    PdfPTable proc = new PdfPTable(5);
                    proc.HorizontalAlignment = Element.ALIGN_LEFT;
                    // PdfPCell cell1 = new PdfPCell();
                    proc.WidthPercentage = 100;
                    float[] procwid = new float[] { 150f, 55f, 20f, 50f, 60f };
                    proc.SetWidths(procwid);

                    proc.DefaultCell.Border = Rectangle.NO_BORDER;


                    PdfPCell pc1 = new PdfPCell(new Phrase(item.Prod, _Font10Font));
                    pc1.HorizontalAlignment = Element.ALIGN_LEFT;
                    pc1.Border = 0;
                    proc.AddCell(pc1);



                    PdfPCell pc2 = new PdfPCell(new Phrase(item.qty.ToString(), _Font10Font));
                    pc2.HorizontalAlignment = Element.ALIGN_LEFT;
                    pc2.Border = 0;
                    proc.AddCell(pc2);

                    PdfPCell pcUOM = new PdfPCell(new Phrase(item.UOM, _Font10Font));
                    pcUOM.HorizontalAlignment = Element.ALIGN_LEFT;
                    pcUOM.Border = 0;
                    proc.AddCell(pcUOM);

                    //  Decimal insRate = Convert.ToDecimal(item.insRt);
                    // item.insRt = insRate.ToString("0.00");

                    PdfPCell pc3 = new PdfPCell(new Phrase(item.insRt.ToString(), _Font10Font));
                    pc3.HorizontalAlignment = Element.ALIGN_CENTER;
                    pc3.Border = 0;
                    proc.AddCell(pc3);

                    Decimal amtRate = Convert.ToDecimal(item.amt);
                    item.amt = amtRate.ToString("0.00");
                    amtTotal = amtTotal + amtRate;

                    PdfPCell pc4 = new PdfPCell(new Phrase("$" + item.amt.ToString(), _Font10Font));
                    pc4.HorizontalAlignment = Element.ALIGN_CENTER;
                    pc4.Border = 0;
                    proc.AddCell(pc4);


                    doc.Add(proc);
                }
            }

            //------------------------
            string amtTotalString = amtTotal.ToString("0.00");
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font10Font, new Chunk("Total : $" + amtTotalString));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("Coinsurance: " + _vm.Coins + "%"));

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("Deductible: " + "$" + _vm.Deduc));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10BoldFont, new Chunk("Amount Due: " + "$" + _vm.AmountDue));
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10ItalicFont, new Chunk("(Actual costs are determined by your insurance payment)"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n\n"));

            //---------------------

            //  PdfPTable paytbl = new PdfPTable(1);
            //   paytbl.HorizontalAlignment = Element.ALIGN_CENTER;

            // paytbl.WidthPercentage = 100;
            // float[] paytblwidths = new float[] { 800f };
            //  paytbl.SetWidths(paytblwidths);

            //  paytbl.DefaultCell.Border = Rectangle.NO_BORDER;
            //   iTextSharp.text.Image pay1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\payment.jpg");
            //  pay1.ScaleToFit(500, 300);
            //   PdfPCell pay1imageCell = new PdfPCell(pay1);
            //   pay1imageCell.Colspan = 1; // either 1 if you need to insert one cell
            //  pay1imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            //    pay1imageCell.VerticalAlignment = Element.ALIGN_TOP;


            //  paytbl.AddCell(pay1imageCell);

            //   doc.Add(paytbl);


            //------------------------------

            Anchor JBPoratalLink = new Anchor("www.portal.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "https://portal.jandbmedical.com/SGAccount/MyLogin?ReturnUrl=%2f";

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _smallBoldFont, new Chunk("Your insurance may require you to confirm your supplies and/or you may have copay/coinsurance requirements that must be met before your order ships.  You can contact us by phone at (800) 737-0045 ext 125, interactive website www.jandbportal.com, J&B Medical Android or IOS app, or wait to receive a call from Victor (our automated system) 7 days before your order is due to ship.  \n\n"));
            Chunk c1 = new Chunk("Register at ", _Font12Font);

            Chunk c2 = new Chunk(" to reorder and pay for your supplies in the future!", _Font12Font);



            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(JBPoratalLink);
            p1.Add(c2);

            // p3.Add(click);
            //Paragraph P1 = new Paragraph();
            //  P1.Add(p1);
            //for (int j = 0; j <= (28 - count); j++)
            // {

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            //}

            //  doc.Add(P1);

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _FontGray10Font, new Chunk("BIL 2042                                  Approved By: Management                                 Revised: 2/24/2017"));
            BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            cb.BeginText();

            cb.SetFontAndSize(bf, 12);
            cb.SetColorFill(Color.GRAY);
            cb.SetTextMatrix(30, 30);

            cb.ShowText("BIL 2042                                  Approved By: Management                                 Revised: 2/24/2017");
            //  cb.ShowText(p1);

            cb.EndText();

            // ColumnText ct = new ColumnText(writer.DirectContent);
            ColumnText.ShowTextAligned(writer.DirectContent,
        Element.ALIGN_CENTER, p1, 270, 50, 0);

        }
        private void AddContactLetter_Spanish(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Teléfono: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Sitio web: jandbmedical.com\n Portal de miembros: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Fecha: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Estimado Member Name " + _vm.details.firstName + ",\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Hemos tratado de comunicarnos con usted por teléfono. Necesitamos hablar con usted o un cuidador con respecto a su cuenta."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Por favor, contacte con nosotros en el número de abajo entre las 8 de la mañana y las 6 de la tarde EST para actualizar su información de contacto. "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14ItalicFont, new Chunk("Por favor, ignore este aviso si ya ha contactado o ha sido contactado por J&B Medical Supply."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("¡Gracias!"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Un cordial saludo,"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Servicio al cliente"));


        }
        private void AddContactLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Dear " + _vm.details.firstName + ",\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("We have attempted to contact you by telephone. We need to speak with you or a caregiver in regards to your account."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Please contact us at the number above between the hours of 8:00 am and 6:00 pm EST to update your contact information. "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14ItalicFont, new Chunk("Please disregard this notice if you have already contacted, or have been contacted by J&B Medical Supply."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Thank you!"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Sincerely,"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Customer Service"));


        }

        private void AddSympathyContactLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("To Whom It May Concern,"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("We are deeply saddened to hear about your recent loss of " + _vm.details.firstName + ".  Please accept our heartfelt sympathy during this difficult time.  "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("We have closed the account and no further action is required. "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14ItalicFont, new Chunk("If you have any questions or concerns please contact us at (800) 737-0045 and we will be happy to assist. "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Our sincerest condolences, "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("J&B Medical Supply Staff  "));




        }

        private void AddOffLabelMemberLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            doc.NewPage();
            PdfPTable accTbl = new PdfPTable(2);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 200f, 200f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase("J&B Medical Supply, Inc.", _Font11BoldFont));
            AC1.HorizontalAlignment = Element.ALIGN_CENTER;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("Account #:" + _vm.Account, _Font11BoldFont));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Attestation", _Font8Font));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);

            PdfPCell AC4 = new PdfPCell(new Phrase("Name:" + _vm.details.firstName, _Font8Font));
            AC4.HorizontalAlignment = Element.ALIGN_LEFT;
            AC4.Border = 0;
            accTbl.AddCell(AC4);

            PdfPCell AC5 = new PdfPCell(new Phrase(" ", _Font8Font));
            AC5.HorizontalAlignment = Element.ALIGN_CENTER;
            AC5.Border = 0;
            accTbl.AddCell(AC5);

            PdfPCell AC6 = new PdfPCell(new Phrase("DOB:" + Convert.ToDateTime(_vm.details.DOB).ToShortDateString() + "      Gender: " + _vm.details.gender, _Font8Font));
            AC6.HorizontalAlignment = Element.ALIGN_LEFT;
            AC6.Border = 0;
            accTbl.AddCell(AC6);

            PdfPCell AC7 = new PdfPCell(new Phrase("50496 W. Pontiac Trail, Wixom, MI 48393", _Font8Font));
            AC7.HorizontalAlignment = Element.ALIGN_CENTER;
            AC7.Border = 0;
            accTbl.AddCell(AC7);

            PdfPCell AC8 = new PdfPCell(new Phrase("Address: " + _vm.details.address1 + "  " + _vm.details.address2 + ", " + _vm.details.city + ", " + _vm.details.state + ", " + _vm.details.zipcode, _Font8Font));
            AC8.HorizontalAlignment = Element.ALIGN_LEFT;
            AC8.Border = 0;
            accTbl.AddCell(AC8);

            PdfPCell AC9 = new PdfPCell(new Phrase("(800) 737-0045 Main     (888) 896-6233 BCN/MAPPO", _Font8Font));
            AC9.HorizontalAlignment = Element.ALIGN_CENTER;
            AC9.Border = 0;
            accTbl.AddCell(AC9);

            PdfPCell AC10 = new PdfPCell(new Phrase("Phone:" + _vm.details.phone, _Font8Font));
            AC10.HorizontalAlignment = Element.ALIGN_LEFT;
            AC10.Border = 0;
            accTbl.AddCell(AC10);

            PdfPCell AC11 = new PdfPCell(new Phrase("(800) 737-0012 Fax", _Font8Font));
            AC11.HorizontalAlignment = Element.ALIGN_CENTER;
            AC11.Border = 0;
            accTbl.AddCell(AC11);

            PdfPCell AC12 = new PdfPCell(new Phrase("Primary:" + _vm.details.PrimaryPayer + "      Medicaid : " + _vm.details.RefNo, _Font8Font));
            AC12.HorizontalAlignment = Element.ALIGN_LEFT;
            AC12.Border = 0;
            accTbl.AddCell(AC12);




            doc.Add(accTbl);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("\nWhat you need to do : \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9Font, new Chunk("\nReview the information below \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9Font, new Chunk("\nComplete the section below \n"));

            Chunk c1 = new Chunk("                                                                Return to J&B at (800) 737-0012 or ", _Font9Font);

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont9);
            JBDocs.Reference = "JBDocs@jandbmedical.com";



            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(JBDocs);
            doc.Add(p1);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9Font, new Chunk("\nCall " + _vm.details.contactpayer + " if you have any questions or concerns \n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _BoldFont9, new Chunk("\nOff Label\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9Font, new Chunk("\nI understand that I am requesting a product to be used outside of the FDA recommendations listed below:\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9Font, new Chunk("\nMedtronic 670G: Ages 14 and older, Type 1\nMedtronic 630G: Ages 16 and older\nMedtronic 530G: Ages 16 and older\nRevel: Ages 7 and older\nGuardian Connect: Ages 14 - 75\nDexcom G5: Ages 2 and older\nDexcom G4: Pediatric: Ages 2 - 17, Adult: Ages 18 and older\nLibre: Ages 18 and older, not intended for use while pregnant – see additional safety information: \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _standardBoldBlueUnderlineFont9, new Chunk("https://www.freestylelibre.us/safety-information \n"));
            if (_vm.OffLableText != null)
            {
                this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9Font, new Chunk("Other:  " + _vm.OffLableText));
            }

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9Font, new Chunk("\n\n\n\n"));

            PdfPTable table2 = new PdfPTable(3);
            table2.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table2.WidthPercentage = 100;
            float[] widths2 = new float[] { 90f, 50f, 80f };
            table2.SetWidths(widths2);

            table2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell Cell1 = new PdfPCell(new Phrase("________________________________ ", _Font11Font));
            Cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell1.Border = 0;
            table2.AddCell(Cell1);

            PdfPCell Cell5 = new PdfPCell(new Phrase("  ", _Font11Font));
            Cell5.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell5.Border = 0;
            table2.AddCell(Cell5);

            PdfPCell Cell2 = new PdfPCell(new Phrase("_______________________ ", _Font11Font));
            Cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell2.Border = 0;
            table2.AddCell(Cell2);

            PdfPCell Cell3 = new PdfPCell(new Phrase("Signature", _Font11Font));
            Cell3.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell3.Border = 0;
            table2.AddCell(Cell3);

            PdfPCell Cell6 = new PdfPCell(new Phrase("  ", _Font11Font));
            Cell6.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell6.Border = 0;
            table2.AddCell(Cell6);

            PdfPCell Cell4 = new PdfPCell(new Phrase("Date", _Font11Font));
            Cell4.Border = 0;
            Cell4.HorizontalAlignment = Element.ALIGN_CENTER;
            table2.AddCell(Cell4);



            doc.Add(table2);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _BoldFont9, new Chunk("\nIf you are not the member and are signing on their behalf, please complete the following:\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Name: __________________________________________Relationship: ______________________ "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Address: _____________________City: _____________State/Zip: _________ Phone: ___________"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Reason why customer cannot sign this form: __________________________________________"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\nBy signing on behalf of the customer, I acknowledge that I have the authority to do so.\n\n"));

        }

        private void AddOffLabelMemberLetterFirstPage(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);




        }

        private void AddMedicaidSecondaryLetter(iTextSharp.text.Document doc, GeneratorModel _vm, PdfWriter writer)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Date: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Dear " + _vm.details.firstName + ",\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Thank you for using J&B Medical. We look forward to giving you the very best care."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Dr. " + _vm.details.PhysicianName + " ordered the following medical supplies: " + _vm.OrderedSupplies));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14ItalicFont, new Chunk("Primary Insurance allows " + _vm.PriInsAllow1));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14ItalicFont, new Chunk("Secondary Insurance allows " + _vm.SecInsAllow1 + "\n\n"));

            Chunk c11 = new Chunk("In this case ", _Font12Font);
            Chunk c12 = new Chunk(_vm.SecInsName, _Font12BoldFont);
            Chunk c13 = new Chunk(" will not pay the difference.  ", _Font12Font);


            Phrase p1 = new Phrase();
            p1.Add(c11);
            p1.Add(c12);
            p1.Add(c13);


            Paragraph P1 = new Paragraph();
            P1.Add(p1);
            doc.Add(P1);


            Chunk c21 = new Chunk("\nYour estimated cost will be ", _Font12Font);
            Chunk c22 = new Chunk("$ " + _vm.EstimateCost, _Font12BoldFont);
            Chunk c23 = new Chunk(" when you order. It must be paid before your order will ship.  You can pay online at ", _Font12Font);
            Chunk JPportallink = new Chunk("www.jandbportal.com.", _Font12BoldBlueUnderlineFont);

            Chunk c24 = new Chunk(", mail a check, mail the attached credit card form or by phone. The ", _Font12Font);
            Chunk c25 = new Chunk("payment will determine your actual costs.  Please call us with any questions.", _Font12Font);

            Phrase p2 = new Phrase();
            p2.Add(c21);
            p2.Add(c22);
            p2.Add(c23);
            p2.Add(JPportallink);
            p2.Add(c24);
            p2.Add(c25);


            Paragraph P2 = new Paragraph();
            P2.Add(p2);
            doc.Add(P2);

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n "));
            ////CheckBox
            //Rectangle _rect;
            //PdfFormField _Field1;
            //RadioCheckField _checkbox1;
            //PdfContentByte cb = writer.DirectContent;
            //float curx, cury;
            //cury = writer.GetVerticalPosition(true);
            //curx = doc.LeftMargin;
            //_rect = new Rectangle(curx, cury + 10, curx + 10, cury + 20);
            //_checkbox1 = new RadioCheckField(writer, _rect, "Testing", "on");
            //_checkbox1.CheckType = RadioCheckField.TYPE_CHECK;
            //_Field1 = _checkbox1.CheckField;
            //writer.AddAnnotation(_Field1);
            //ColumnText.ShowTextAligned(cb, Element.ALIGN_BOTTOM, new Phrase("  Please check one of the choices below:", _Font12Font), curx + 15, cury + 10, 0);


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            ////CheckBox
            //Rectangle _rect2;
            //PdfFormField _Field2;
            //RadioCheckField _checkbox2;
            //PdfContentByte cb2 = writer.DirectContent;
            //float curx2, cury2;
            //cury2 = writer.GetVerticalPosition(true);
            //curx2 = doc.LeftMargin;
            //_rect2 = new Rectangle(curx2, cury2 + 10, curx2 + 10, cury2 + 20);
            //_checkbox2 = new RadioCheckField(writer, _rect2, "Testing2", "on");
            //_checkbox2.CheckType = RadioCheckField.TYPE_CHECK;
            //_Field2 = _checkbox2.CheckField;
            //writer.AddAnnotation(_Field2);
            //ColumnText.ShowTextAligned(cb2, Element.ALIGN_BOTTOM, new Phrase("  Please send me the full order allowed by my primary insurance. \n I understand I will be responsible for the coinsurance and deductible.", _Font12Font), curx2 + 15, cury2 + 10, 0);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nPlease check one of the choices below: "));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk(" □ Please send me the full order allowed by my primary insurance.  I understand I will be responsible for the coinsurance and deductible."));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n □ Only send me the amount that is approved by my secondary insurance"));

            iTextSharp.text.Image jpg11 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\chk.jpg");
            jpg11.ScaleToFit(15, 15);
            PdfPCell Imagechk = new PdfPCell(jpg11);
            Imagechk.Colspan = 1; // either 1 if you need to insert one cell
            Imagechk.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            Imagechk.VerticalAlignment = Element.ALIGN_BOTTOM; ;

            PdfPTable tableTxt = new PdfPTable(2);
            tableTxt.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            tableTxt.WidthPercentage = 100;
            float[] widthsTxt = new float[] { 10f, 200f };
            tableTxt.SetWidths(widthsTxt);

            tableTxt.DefaultCell.Border = Rectangle.NO_BORDER;

            //PdfPCell pdfCellTx = new PdfPCell(new Phrase( "□ Please send me the full order allowed by my primary insurance.I understand I will be responsible for the coinsurance and deductible. ", _Font12Font));
            //pdfCellTx.HorizontalAlignment = Element.ALIGN_LEFT;
            //pdfCellTx.Border = 0;
            tableTxt.AddCell(Imagechk);
            tableTxt.AddCell(new Phrase("Please send me the full order allowed by my primary insurance.I understand I will be responsible for the coinsurance and deductible.", _Font12Font));
            tableTxt.AddCell("\n");
            tableTxt.AddCell("\n");
            tableTxt.AddCell(Imagechk);
            tableTxt.AddCell(new Phrase("Only send me the amount that is approved by my secondary insurance.", _Font12Font));
            // tableTxt.AddCell(pdfCellTx);

            //PdfPCell pdfCellTx2 = new PdfPCell(new Phrase("□ Only send me the amount that is approved by my secondary insurance." , _Font12Font));
            //pdfCellTx2.HorizontalAlignment = Element.ALIGN_LEFT;
            //pdfCellTx2.Border = 0;
            //tableTxt.AddCell(pdfCellTx2);

            doc.Add(tableTxt);



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n\n _________________________________                                   ____________________________"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new Chunk("Name                                                                        Date"));


        }
        private void AddBCNOrdeConfimLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(888) 896-6233";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 60f, 150f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 60f, 150f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font10Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font10Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: www.jandbmedical.com/blue-care-network \n Member Portal: www.jandbportal.com ", _Font10Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Date: " + DateDisplay));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            doc.Add(table4);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Dear Blue Care Network Member,\n\n"));



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("We are happy to announce that because you meet one of the following sets of criteria, you will no longer be required to confirm the need of your J&B Medical Supply Diabetic order before it ships:"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Type 1 Diabetic under 21 years of age ", _Font12Font));
            list.Add(new ListItem("Receiving Insulin Pump Supplies", _Font12Font));
            list.Add(new ListItem("Receiving Continued Glucose Monitoring Supplies\n", _Font12Font));

            doc.Add(list);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nAs long as you are an eligible member with BCN, your physician has provided us with a current prescription and you have authorized automatic payments (see the attached form) your order will automatically ship every 90 days. "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Please note that it is important that you contact us at least 10 days before your next shipment due date if there are any changes associated with your account , most importantly your address , insurance plan or order information. Failure to do so may result in an interruption of services and/or you being financially responsible for the order."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nIf you prefer to continue to confirm your order before it ships call 1(888) 896-6233"));
            iTextSharp.text.List list2 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list2.SetListSymbol("\u2022");
            list2.IndentationLeft = 20f;     // Indent the list 20 points
            list2.Add(new ListItem("TTY users call 711 ", _Font12Font));

            doc.Add(list2);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\nSincerely,"));

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));


            iTextSharp.text.Image jpg2 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\JennSig.jpg");
            jpg2.ScaleToFit(120f, 30f);
            //PdfPCell imageCell2 = new PdfPCell(jpg2);
            //imageCell2.Colspan = 1; // either 1 if you need to insert one cell
            jpg2.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            jpg2.Alignment = Element.ALIGN_LEFT;
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Customer Service"));

            doc.Add(jpg2);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Jennifer Mudge \nBCN Customer Liaision \nJ&B Medical Supply\n\n"));
            iTextSharp.text.Image jpg3 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\BCNSet.jpg");
            jpg3.ScaleToFit(800f, 60f);

            jpg3.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            jpg3.Alignment = Element.ALIGN_CENTER;
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Customer Service"));

            doc.Add(jpg3);

        }

        private void AddBCNOrdeConfimLetter_page2(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(888) 896-6233";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(5);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 80f, 50f, 25f, 120f, 70f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);
            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(5);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 80f, 50f, 25f, 120f, 70f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font10Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: www.jandbmedical.com/blue-care-network\n Member Portal: www.jandbportal.com ", _Font10Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);

            table3.AddCell(image39);

            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase("Account: " + _vm.Account + "\n" + _vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldFont, new Chunk("Return to J&B Medical Supply, Inc"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            doc.Add(table4);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nTo avoid a delay in future shipments you can also provide your approval for us to automatically process your credit card once your order is due to ship:  \n\n"));

            iTextSharp.text.Image tableImg = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Table.jpg");
            tableImg.ScaleToFit(480f, 280f);

            tableImg.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            tableImg.Alignment = Element.ALIGN_CENTER;
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Customer Service"));

            doc.Add(tableImg);

            Chunk c1 = new Chunk("By returning this letter signed and dated, I acknowledge that I am authorizing automatic payments of my coinsurance and/or deductible when my order is due to ship.  I agree to contact J&B Medical Supply, Inc at least 10 days before my next shipment due date if there are any changes associated with my account or order information to avoid any interruption of service.  I am aware that I can check my order status by going to ", _Font12Font);
            Chunk c2 = new Chunk("www.jandbportal.com.", _Font12BoldBlueUnderlineFont);



            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(c2);

            Paragraph P1 = new Paragraph();
            P1.Add(p1);
            doc.Add(P1);

            PdfPTable SigTable = new PdfPTable(3);
            SigTable.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            SigTable.WidthPercentage = 100;
            float[] SigWidth = new float[] { 120f, 80f, 60f };
            SigTable.SetWidths(SigWidth);

            SigTable.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell SCell1 = new PdfPCell(new Phrase("________________________________________", _Font11Font));
            SCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            SCell1.Border = 0;
            SigTable.AddCell(SCell1);

            PdfPCell SCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            SCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            SCell2.Border = 0;
            SigTable.AddCell(SCell2);

            PdfPCell SCell3 = new PdfPCell(new Phrase(" ________________ ", _Font11Font));
            SCell3.HorizontalAlignment = Element.ALIGN_LEFT;
            SCell3.Border = 0;
            SigTable.AddCell(SCell3);


            PdfPCell SCell4 = new PdfPCell(new Phrase("Signature", _Font12BoldFont));
            SCell4.HorizontalAlignment = Element.ALIGN_LEFT;
            SCell4.Border = 0;
            SigTable.AddCell(SCell4);

            PdfPCell SCell5 = new PdfPCell(new Phrase("  ", _Font11Font));
            SCell5.HorizontalAlignment = Element.ALIGN_LEFT;
            SCell5.Border = 0;
            SigTable.AddCell(SCell5);

            PdfPCell SCell6 = new PdfPCell(new Phrase(" Date", _Font12BoldFont));
            SCell6.HorizontalAlignment = Element.ALIGN_LEFT;
            SCell6.Border = 0;
            SigTable.AddCell(SCell6);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n\n"));
            doc.Add(SigTable);
        }

        public void BuildComplaintRecoveryPdf(GeneratorModel _vm)
        {


            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_ComRecL" + ".pdf";
            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//1 Page" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.AddComplaintRecoveryLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";

                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    // this.AddEmailContactCover(doc, _vm);
                    this.AddComplaintRecoveryLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    //  this.AddFaxContactCover(doc1, _vm);
                    this.AddComplaintRecoveryLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                }
            }




            //Fax is checked


        }
        private void AddComplaintRecoveryLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("J&B Medical Supply\n50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell("");

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            PdfPTable table5 = new PdfPTable(1);
            table5.HorizontalAlignment = Element.ALIGN_CENTER;

            // PdfPCell cell1 = new PdfPCell();
            table5.WidthPercentage = 30;
            float[] widths5 = new float[] { 1600f };
            table5.SetWidths(widths5);

            table5.DefaultCell.Border = Rectangle.NO_BORDER;


            table5.AddCell(imageCell);
            doc.Add(table5);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Dear " + _vm.details.firstName + ",\n\n"));

            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("We wanted to take the time to thank you for contacting us at J&B Medical with your concerns.  Our customer comments are taken seriously and help us to improve our service to all of our customers."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Satisfaction and excellent service are what we always want your experience to be with J&B Medical."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("If we have earned your appreciation we would kindly ask for a few moments of your time to update your online review to reflect your current opinion. "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            //Anchor glassDoor = new Anchor("www.glassdoor.com", _Font14UnderlineBlueFont);
            //glassDoor.Reference = "www.glassdoor.com";
            //Anchor Indeed = new Anchor("www.indeed.com ", _Font14UnderlineBlueFont);
            //Indeed.Reference = "www.indeed.com ";

            //Paragraph P1 = new Paragraph();
            //Chunk P1C1 = new Chunk(" and ", _Font14Font);


            //P1.Add(glassDoor);
            //P1.Add(P1C1);
            //P1.Add(Indeed);

            //doc.Add(P1);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Sincerely,"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("J & B Medical Supply, Inc."));




        }

        public void BuildJBCustomerSatisfactionrPdf(GeneratorModel _vm)
        {


            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_CSL" + ".pdf";
            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//1 Page" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    this.AddJBCustomerSatisfactionLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";

                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();


                    // this.AddEmailContactCover(doc, _vm);
                    this.AddJBCustomerSatisfactionLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;

                    if (System.IO.File.Exists(path + filename))
                    {
                        Emails.AutoEmailCSL(_vm.Email, path + filename, _vm.details.firstName);
                    }
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();


                    //  this.AddFaxContactCover(doc1, _vm);
                    this.AddJBCustomerSatisfactionLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                }
            }




            //Fax is checked


        }
        private void AddJBCustomerSatisfactionLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(4);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 70f, 55f, 50f, 90f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("J&B Medical Supply\n50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            //PdfPTable table5 = new PdfPTable(1);
            //table5.HorizontalAlignment = Element.ALIGN_CENTER;

            //// PdfPCell cell1 = new PdfPCell();
            //table5.WidthPercentage = 30;
            //float[] widths5 = new float[] { 1600f };
            //table5.SetWidths(widths5);

            //table5.DefaultCell.Border = Rectangle.NO_BORDER;


            //table5.AddCell(imageCell);
            //doc.Add(table5);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Date: " + DateDisplay));
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Dear " + _vm.details.firstName + ",\n\n"));

            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Thank you for contacting us and sharing your kind words!  Your opinion of our service is of great importance to us, and we will always strive to earn your praise.  "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("As you know, a company’s online reputation is extremely important.  We would be grateful if you would share your positive comments on either of these websites by following the provided links:"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new Chunk("Yelp:"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Customer satisfaction and excellent service are what we always want you to experience from our company.  With that, we kindly ask for a few minutes of your time to post those kind words on one or both of the links below."));

            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\nOnce again, we sincerely appreciate your time."));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            Anchor Yelp = new Anchor("http://bit.ly/2sZa0jE", _Font12UnderlineBlueFont);
            Yelp.Reference = "http://bit.ly/2sZa0jE";
            Anchor Google = new Anchor("https://goo.gl/xFamFd", _Font12UnderlineBlueFont);
            Google.Reference = "https://goo.gl/xFamFd";

            Paragraph P1 = new Paragraph();



            P1.Add(Yelp);
            //  P1.Add(P1C1);
            // P1.Add(Indeed);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n"));
            doc.Add(P1);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new Chunk("Google:  "));
            Paragraph P2 = new Paragraph();
            P2.Add(Google);
            doc.Add(P2);

            Paragraph P3 = new Paragraph();
            Chunk P3C1 = new Chunk("From your Smartphone:   Search for J&B Medical Supply on google.  Scroll down to the heading ", _Font12Font);
            Chunk P3C2 = new Chunk("Rate and Review. ", _Font12BoldFont);
            Chunk P3C3 = new Chunk("Choose the number of stars to rate your experience with us, then add any comments.  ", _Font12Font);
            P3.Add(P3C1);
            P3.Add(P3C2);
            P3.Add(P3C3);
            doc.Add(P3);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n\n"));
            Paragraph P4 = new Paragraph();
            Chunk P4C1 = new Chunk("From your computer:   Search for J&B Medical Supply on google. Look at the information box that’s on the right side of your page.  Near the bottom, you’ll see", _Font12Font);
            Chunk P4C2 = new Chunk(" Write a review. ", _Font12BoldFont);
            Chunk P4C3 = new Chunk(".  If you’re not signed in using your google ID and password, you’ll be asked to—and then you’ll be taken directly to the page to write a review.", _Font12Font);
            P4.Add(P4C1);
            P4.Add(P4C2);
            P4.Add(P4C3);
            doc.Add(P4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("We thank you for your business, and we look forward to caring for you in the future.  "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("Sincerely,"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14ItalicFont, new Chunk("Your friends at J & B Medical Supply, Inc. "));




        }

        public void BuildDiabeticCoinsAuthLetterPdf(GeneratorModel _vm)
        {

            bool res = AOBGenerator.CheckIfBCN(_vm.Account);
            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            string filename = Date + "_" + _vm.Account.ToString() + "_DCA" + ".pdf";
            string filenameTemp = Date + "_" + _vm.Account.ToString() + "_DCATemp" + ".pdf";

            string filenameOrigin = Date + "_" + _vm.Account.ToString() + "_DCA" + ".pdf";

            if (res == true)
            { filename = filenameTemp; }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//2 Page" + "//";
                if (res == true)
                { path = "C://Letters//BCN" + "//"; }


                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-DCA", false);


                    if (res == false)
                    {
                        this.AddGenericCoverLetter(doc, _vm);
                        this.AddDiabeticCoinsAuthLetter(doc, _vm);
                    }
                    else if (res == true)
                    {
                        this.AddGenericCoverLetter(doc, _vm);
                        this.AddBlackPage(doc);
                        this.AddDiabeticCoinsAuthLetter(doc, _vm);
                        this.AddBlackPage(doc);
                    }

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, false);
                    }
                }
            }

            if (_vm.FileEmail == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Email" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-DCA", false);


                    this.AddDiabeticCoinsAuthEmailContactCover(doc, _vm);
                    this.AddDiabeticCoinsAuthLetter(doc, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);


                    doc.Close();
                    doc = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }
                }

                filename = Date + "_" + _vm.Account.ToString() + "_DCA" + ".pdf";
                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmail(_vm.Email, path + filename, "Diabetic Coinsurance Authorization Letter");
                }
            }

            if (_vm.FileFax == true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filenameOrigin))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-DCA", false);


                    this.AddDiabeticCoinsAuthFaxContactCover(doc1, _vm);
                    this.AddDiabeticCoinsAuthLetter(doc1, _vm);

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                    if (res == true)
                    {
                        MergeBCNFinalNotice(path + filename, path + filenameOrigin, true);
                    }

                    filename = Date + "_" + _vm.Account.ToString() + "_DCA" + ".pdf";
                    if (System.IO.File.Exists(path + filename))
                    {
                        Emails.AutoFax(_vm.FedEx, path + filename);
                    }

                }
            }




            //Fax is checked


        }
        private void AddDiabeticCoinsAuthLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string DateDisplay = DateTime.Today.Month.ToString() + "/" + DateTime.Today.Day.ToString() + "/" + DateTime.Today.Year.ToString();
            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable accTbl = new PdfPTable(5);
            accTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            accTbl.WidthPercentage = 100;
            float[] AccTblwid = new float[] { 80f, 50f, 25f, 120f, 70f };
            accTbl.SetWidths(AccTblwid);

            accTbl.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell AC1 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC1.HorizontalAlignment = Element.ALIGN_LEFT;
            AC1.Border = 0;
            accTbl.AddCell(AC1);

            PdfPCell AC2 = new PdfPCell(new Phrase("  ", _Font11Font));
            AC2.HorizontalAlignment = Element.ALIGN_LEFT;
            AC2.Border = 0;
            accTbl.AddCell(AC2);


            accTbl.AddCell(AC2);

            PdfPCell AC4 = new PdfPCell(new Phrase(" ", _Font11Font));
            AC4.HorizontalAlignment = Element.ALIGN_LEFT;
            AC4.Border = 0;
            accTbl.AddCell(AC4);

            PdfPCell AC3 = new PdfPCell(new Phrase("Account#: " + _vm.Account, _Font14BoldFont));
            AC3.HorizontalAlignment = Element.ALIGN_CENTER;
            AC3.Border = 0;
            accTbl.AddCell(AC3);


            doc.Add(accTbl);

            PdfPTable table3 = new PdfPTable(5);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 80f, 50f, 25f, 120f, 70f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);

            table3.AddCell(image39);
            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font12Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Date: " + DateDisplay));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Dear " + _vm.details.firstName + ",\n\n"));



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("Thank you for choosing J & B Medical Supply Inc, Co to service your diabetic supply needs. We value our relationship with you. We know that insurance company polices can sometimes be difficult to understand so we are writing to you to keep you informed of your insurance company’s payment policy for diabetic supplies. "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nWe received an order from your physician for your diabetic supplies and have already processed your order for the supplies that your secondary insurance will allow. You should be expecting that order very soon, if you have not already received it.  Unfortunately, the quantity of supplies allowed monthly by your primary insurance and secondary insurance differ."));


            Chunk c11 = new Chunk("\nThe physician ordered supplies for you to test ", _Font10Font);
            Chunk c12 = new Chunk(_vm.PhysicianTimesTesting, _Font10BoldFont);
            Chunk c13 = new Chunk(" times a day, which your primary insurance will allow, but your secondary insurance only allows testing from ", _Font10Font);
            Chunk c14 = new Chunk(_vm.SecInsAllowedAmt, _Font10BoldFont);
            Chunk c15 = new Chunk(" times a day depending on if you are insulin treated or not.", _Font10Font);

            Phrase p1 = new Phrase();
            p1.Add(c11);
            p1.Add(c12);
            p1.Add(c13);
            p1.Add(c14);
            p1.Add(c15);


            Paragraph P1 = new Paragraph();
            P1.Add(p1);
            doc.Add(P1);


            Chunk c21 = new Chunk("\nIn most circumstances you have 100% insurance coverage for medical supplies between both of your insurance policies. Your primary insurance policy covers ", _Font10Font);
            Chunk c22 = new Chunk(_vm.PriInsCovAmt, _Font10BoldFont);
            Chunk c23 = new Chunk("% of supplies and your secondary insurance will cover the remaining amount. In this case, because your secondary insurance will only allow ", _Font10Font);
            Chunk c24 = new Chunk(_vm.SecInsAllowedAmt, _Font10BoldFont);
            Chunk c25 = new Chunk(" times testing a day, they will not pay the full coinsurance amount for all the supplies ordered by your physician without a prior authorization. Your secondary insurance will only approve a prior authorization if we obtain medical records from your physician that show you meet their guidelines to pay for the over the amount allowed. ", _Font10Font);

            Phrase p2 = new Phrase();
            p2.Add(c21);
            p2.Add(c22);
            p2.Add(c23);
            p2.Add(c24);
            p2.Add(c25);


            Paragraph P2 = new Paragraph();
            P2.Add(p2);
            doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nWe can attempt to obtain the prior authorization from your secondary insurance.  If the request is approved we will notify you and will send the amount of supplies ordered by your physician.  "));

            Chunk c31 = new Chunk("\nIf the request is denied we will only send you the amount allowed by your secondary insurance, unless you want us to supply the quantity that your primary insurance will allow and you will be responsible to pay for a portion of the supplies.  You will owe $ ", _Font10Font);
            Chunk c32 = new Chunk(_vm.MemOwedAmt, _Font10BoldFont);
            Chunk c33 = new Chunk(" coinsurance for each order, which will need to be paid prior to the order being delivered.   We will call you prior to delivery to collect, or you can give us a credit card number to keep on file.", _Font10Font);
            Phrase p3 = new Phrase();
            p3.Add(c31);
            p3.Add(c32);
            p3.Add(c33);


            Paragraph P3 = new Paragraph();
            P3.Add(p3);
            doc.Add(P3);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nBy returning this letter signed and dated, you understand that you are requesting to receive over the allowed amount of diabetic supplies which will be reimbursed by your secondary insurance and that you acknowledge that you will be responsible for a coinsurance for these supplies."));



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("______________________________                                      _____________________________"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nName                                                                                               Date"));


        }

        private void AddFaxContactCover(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";


            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Fax #: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            // list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidentiality \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("       The information contained in this transmission is confidential health information that is privileged and legally protected from disclosure by the Health Insurance Portability Accountability Act. (HIPPA).  This information is intended only for the individual named above. The recipient of this information is prohibited from disclosing this information to any other party unless required to do so by law or regulation and is required to destroy the information after its stated need has been fulfilled.  If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or action taken in reliance on the contents of these documents is strictly prohibited.  If the information was received in error, Please notify J &B Medical immediately to arrange for the return or destruction of these documents.    \n\n"));



        }
        private void AddFaxContactCover_DL(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";


            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Fax #: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            // list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            //  doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\n\n\n\n\n\n\n\n \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidentiality \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("       The information contained in this transmission is confidential health information that is privileged and legally protected from disclosure by the Health Insurance Portability Accountability Act. (HIPPA).  This information is intended only for the individual named above. The recipient of this information is prohibited from disclosing this information to any other party unless required to do so by law or regulation and is required to destroy the information after its stated need has been fulfilled.  If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or action taken in reliance on the contents of these documents is strictly prohibited.  If the information was received in error, Please notify J &B Medical immediately to arrange for the return or destruction of these documents.    \n\n"));



        }


        private void AddFaxContactCover_Spanish(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";


            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Teléfono: " + phone + "\n Fax: (800)737-0012\n Correo electrónico: Info@jandbmedical.com\n Sitio web: jandbmedical.com\n Portal miembro: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Atención:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Fax #: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPor favor......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            // list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("En contacto con nosotros: ", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tCorreo: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Correo electrónico: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nVolver puede resultar en una demora de su pedido  \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nSi usted tiene alguna pregunta o inquietud, por favor llame a nuestra línea de servicio al cliente soporte en " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nEstamos disponibles del lunes al viernes 8:00 a 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nAtentamente,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J & B fuente médica personal\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidencialidad  \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("La información contenida en esta transmisión es información confidencial de salud que es un privilegiado y protegido legalmente de la divulgación por la ley de rendición de cuentas portabilidad del seguro médico. (HIPAA). Esta información está destinada sólo a la persona nombrada arriba. El receptor de esta información está prohibido de revelar esta información a ningún tercero a menos que sea requerido por ley o reglamento y es necesaria para destruir la información después de que ha sido cumplida la necesidad indicada. Si no eres el destinatario, le informamos que cualquier divulgación, copia, distribución o acción tomada en confianza en el contenido de estos documentos está estrictamente prohibido. Si la información fue recibida por error, por favor notifique a J & B Medical inmediatamente para solicitar la devolución o destrucción de dichos documentos.       \n\n"));



        }

        private void AddFaxCover_PCP(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";


            Anchor PortalService = new Anchor("ProviderServices@jandbmedical.com", _standardBoldBlueUnderlineFont);
            PortalService.Reference = "ProviderServices@jandbmedical.com";

            Anchor medIns = new Anchor("www.jandbmedicalinsurance.com", _standardBoldBlueUnderlineFont);
            medIns.Reference = "http://www.jandbmedicalinsurance.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Fax #: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            // list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(PortalService);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(medIns);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidentiality \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("       The information contained in this transmission is confidential health information that is privileged and legally protected from disclosure by the Health Insurance Portability Accountability Act. (HIPPA).  This information is intended only for the individual named above. The recipient of this information is prohibited from disclosing this information to any other party unless required to do so by law or regulation and is required to destroy the information after its stated need has been fulfilled.  If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or action taken in reliance on the contents of these documents is strictly prohibited.  If the information was received in error, Please notify J &B Medical immediately to arrange for the return or destruction of these documents.    \n\n"));



        }

        private void AddFaxCover_THC(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";


            Anchor PortalService = new Anchor("ProviderServices@jandbmedical.com", _standardBoldBlueUnderlineFont);
            PortalService.Reference = "ProviderServices@jandbmedical.com";

            Anchor medIns = new Anchor("www.jandbmedicalinsurance.com", _standardBoldBlueUnderlineFont);
            medIns.Reference = "http://www.jandbmedicalinsurance.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Fax #: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            // list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(PortalService);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(medIns);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidentiality \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("       The information contained in this transmission is confidential health information that is privileged and legally protected from disclosure by the Health Insurance Portability Accountability Act. (HIPPA).  This information is intended only for the individual named above. The recipient of this information is prohibited from disclosing this information to any other party unless required to do so by law or regulation and is required to destroy the information after its stated need has been fulfilled.  If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or action taken in reliance on the contents of these documents is strictly prohibited.  If the information was received in error, Please notify J &B Medical immediately to arrange for the return or destruction of these documents.    \n\n"));



        }
        private void AddDiabeticCoinsAuthFaxContactCover(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";


            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Fax #: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            // list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidentiality \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("       The information contained in this transmission is confidential health information that is privileged and legally protected from disclosure by the Health Insurance Portability Accountability Act. (HIPPA).  This information is intended only for the individual named above. The recipient of this information is prohibited from disclosing this information to any other party unless required to do so by law or regulation and is required to destroy the information after its stated need has been fulfilled.  If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or action taken in reliance on the contents of these documents is strictly prohibited.  If the information was received in error, Please notify J &B Medical immediately to arrange for the return or destruction of these documents.    \n\n"));



        }

        private void AddEmailContactCover(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            doc.NewPage();

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Email: ");
            table.AddCell(_vm.Email);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            //list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:\n", _largeFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));


        }


        private void AddEmailCover_PCP(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            doc.NewPage();

            Anchor providerService = new Anchor("ProviderServices@jandbmedical.com", _standardBoldBlueUnderlineFont);
            providerService.Reference = "ProviderServices@jandbmedical.com";

            Anchor medIns = new Anchor("www.jandbmedicalinsurance.com", _standardBoldBlueUnderlineFont);
            medIns.Reference = "http://www.jandbmedicalinsurance.com";
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Email: ");
            table.AddCell(_vm.Email);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            //list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:\n", _largeFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(providerService);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(medIns);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page




            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));


        }

        private void AddDiabeticCoinsAuthEmailContactCover(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            doc.NewPage();

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Email: ");
            table.AddCell(_vm.Email);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n\n\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            //list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Contact us:\n", _largeFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));


        }


        public void BuildAOBPdf(GeneratorModel _vm)
        {




            string filename = "";
            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            if (_vm.spanish == true)
            {
                filename = Date + "_" + _vm.Account.ToString() + "_AOB_S" + ".pdf";
            }
            else
            {
                filename = Date + "_" + _vm.Account.ToString() + "_AOB" + ".pdf";
            }

            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://Letters//AOB" + "//";
                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 

                      //commented by pradeep 04/27/2020
                        PdfContentByte pdfContentByte = writer.DirectContent;
                        image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //
                   

                    // Add Generic WelcomeLetter for specific payer types
                    if (_vm.details.Payerid == 4123 || _vm.details.Payerid == 4336 || _vm.details.Payerid == 4176 || _vm.details.Payerid == 4122 || _vm.details.Payerid == 4212 ||
                       _vm.details.Payerid == 1415 || _vm.details.Payerid == 3150 || _vm.details.Payerid == 1430 || _vm.details.Payerid == 4187 || _vm.details.Payerid == 3739
                      || _vm.details.Payerid == 3179 || _vm.details.Payerid == 7 || _vm.details.Payerid == 4510 || _vm.details.Payerid == 3100 || _vm.details.Payerid == 4446
                        || _vm.details.Payerid == 4511 || _vm.details.Payerid == 4346 || _vm.details.Payerid == 4345 || _vm.details.Payerid == 3679 || _vm.details.Payerid == 4344)
                    {

                        if (_vm.spanish == true)
                        {
                            this.AddGenericCoverLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            this.AddGenericCoverLetter(doc, _vm);
                        }

                        this.AddBlackPage(doc);
                    }
                    else
                    {

                        if (_vm.spanish == true)
                        {
                            this.AddWelcomeLetter_spanish(doc, _vm);
                        }
                        else
                        {
                            this.AddWelcomeLetter(doc, _vm);
                        }


                        this.AddBlackPage(doc);
                    }






                    if (_vm.spanish == true)
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_spanish_New(doc, _vm);
                        this.AddBlackPage(doc);
                        // Add MCRStandards pages to the document
                        //  this.AddMCRStandards_spanish(doc);
                        // this.AddMCRStandards2_Spanish(doc);

                        this.AddMCRStandards_spanish_New(doc);
                        this.AddMCRStandards2_Spanish_New(doc);

                        // Add AOB Privacy_PTRights Documents always
                        //this.AddAOBPrivacy_PTRightsDoc1_spanish(doc);
                        //this.AddAOBPrivacy_PTRightsDoc2_spanish(doc);
                        //this.AddAOBPrivacy_PTRightsDoc3_spanish(doc, _vm);
                        //this.AddBlackPage(doc);

                        this.AddAOBPrivacy_PTRightsDoc1_spanish_New(doc);
                        this.AddBlackPage(doc);
                        // this.AddAOBPrivacy_PTRightsDoc3_spanish_New(doc, _vm);
                        //this.AddBlackPage(doc);
                    }
                    else
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_New(doc, _vm);
                        this.AddBlackPage(doc);
                        // Add MCRStandards pages to the document
                        this.AddMCRStandards(doc);
                        this.AddMCRStandards2(doc);

                        // Add AOB Privacy_PTRights Documents always


                        //new documnets AOB
                        //this.AddAOBPrivacy_PTRightsDoc1(doc);
                        //  this.AddAOBPrivacy_PTRightsDoc2(doc);

                        this.AddAOBPrivacy_PTRightsDoc1_New(doc);
                        this.AddBlackPage(doc);
                        //  this.AddAOBPrivacy_PTRightsDoc3_New(doc, _vm);
                        //  this.AddBlackPage(doc);

                        //  this.AddAOBPrivacy_PTRightsDoc3(doc, _vm);
                    }
                    //  this.AddBlackPage(doc);


                    // Add a page with an image to the document.  The page will be sized to match the image size.
                    //  this.AddPageWithImage(doc, "C:\\images" + "\\FinalGraph.jpg");

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);

                    // Add Generic WelcomeLetter for specific payer types
                    if (_vm.details.Payerid == 4123 || _vm.details.Payerid == 4336 || _vm.details.Payerid == 4176 || _vm.details.Payerid == 4122 || _vm.details.Payerid == 4212 ||
                       _vm.details.Payerid == 1415 || _vm.details.Payerid == 3150 || _vm.details.Payerid == 1430 || _vm.details.Payerid == 4187 || _vm.details.Payerid == 3739
                      || _vm.details.Payerid == 3179 || _vm.details.Payerid == 7 || _vm.details.Payerid == 4510 || _vm.details.Payerid == 3100 || _vm.details.Payerid == 4446
                        || _vm.details.Payerid == 4511 || _vm.details.Payerid == 4346 || _vm.details.Payerid == 4345 || _vm.details.Payerid == 3679 || _vm.details.Payerid == 4344)
                    {
                        this.AddBlackPage(doc);
                        this.AddBlackPage(doc);
                    }
                    //  this.AddBlackPage(doc);
                    //  this.AddBlackPage(doc);
                    // Add page labels to the document
                    //iTextSharp.text.pdf.PdfPageLabels pdfPageLabels = new iTextSharp.text.pdf.PdfPageLabels();
                    //pdfPageLabels.AddPageLabel(1, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Basic Formatting");
                    //pdfPageLabels.AddPageLabel(2, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Internal Links");
                    //pdfPageLabels.AddPageLabel(3, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Bullet List");
                    //pdfPageLabels.AddPageLabel(4, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Image");
                    //pdfPageLabels.AddPageLabel(5, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "External Links");
                    //writer.PageLabels = pdfPageLabels;

                    doc.Close();

                    //added pradeep BarCode
                  //  AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 440f, 760f); //Add Bar code to all pages.
                    //end
                    doc = null;
                }
            }



            //Fax is checked
            if (_vm.FileFax == true)
            {

                //"//10.10.1.200//Letters//Fax" + "//";

                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    //commented pradeep
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //
                    
                    if (_vm.spanish == true)
                    {
                        this.AddFaxAOBCover_spanish(doc, _vm);
                    }
                    else
                    {
                        this.AddFaxAOBCover(doc, _vm);
                    }



                    // Add Generic WelcomeLetter for specific payer types
                    if (_vm.details.Payerid == 4123 || _vm.details.Payerid == 4336 || _vm.details.Payerid == 4176 || _vm.details.Payerid == 4122 || _vm.details.Payerid == 4212 ||
                           _vm.details.Payerid == 1415 || _vm.details.Payerid == 3150 || _vm.details.Payerid == 1430 || _vm.details.Payerid == 4187 || _vm.details.Payerid == 3739
                          || _vm.details.Payerid == 3179 || _vm.details.Payerid == 7 || _vm.details.Payerid == 4510 || _vm.details.Payerid == 3100 || _vm.details.Payerid == 4446
                            || _vm.details.Payerid == 4511 || _vm.details.Payerid == 4346 || _vm.details.Payerid == 4345 || _vm.details.Payerid == 3679 || _vm.details.Payerid == 4344)
                    {

                        if (_vm.spanish == true)
                        {
                            // this.AddGenericCoverLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            // this.AddGenericCoverLetter(doc, _vm);
                        }



                    }
                    else
                    {

                        if (_vm.spanish == true)
                        {
                            // this.AddWelcomeLetter_spanish(doc, _vm);
                        }
                        else
                        {
                            //  this.AddWelcomeLetter(doc, _vm);
                        }



                    }


                    if (_vm.spanish == true)
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_spanish_New(doc, _vm);
                        // this.AddBlackPage(doc);
                        // Add MCRStandards pages to the document
                        this.AddMCRStandards_spanish_New(doc);
                        this.AddMCRStandards2_Spanish_New(doc);


                        // Add AOB Privacy_PTRights Documents always

                        this.AddAOBPrivacy_PTRightsDoc1_spanish_New(doc);

                        // this.AddAOBPrivacy_PTRightsDoc3_spanish_New(doc, _vm);
                        // this.AddBlackPage(doc);
                    }
                    else
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_New(doc, _vm);
                        //  this.AddBlackPage(doc);
                        // Add MCRStandards pages to the document
                        this.AddMCRStandards(doc);
                        this.AddMCRStandards2(doc);


                        // Add AOB Privacy_PTRights Documents always

                        // new document AOB
                        //  this.AddAOBPrivacy_PTRightsDoc1(doc);
                        // this.AddAOBPrivacy_PTRightsDoc2(doc);

                        this.AddAOBPrivacy_PTRightsDoc1_New(doc);
                        //   this.AddBlackPage(doc);
                        //   this.AddAOBPrivacy_PTRightsDoc3_New(doc, _vm);
                        // this.AddBlackPage(doc);
                        // this.AddAOBPrivacy_PTRightsDoc3(doc, _vm);
                    }

                    //   this.AddBlackPage(doc);


                    // Add a page with an image to the document.  The page will be sized to match the image size.
                    //  this.AddPageWithImage(doc, "C:\\images" + "\\FinalGraph.jpg");

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);

                    // Add page labels to the document
                    //iTextSharp.text.pdf.PdfPageLabels pdfPageLabels = new iTextSharp.text.pdf.PdfPageLabels();
                    //pdfPageLabels.AddPageLabel(1, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Basic Formatting");
                    //pdfPageLabels.AddPageLabel(2, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Internal Links");
                    //pdfPageLabels.AddPageLabel(3, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Bullet List");
                    //pdfPageLabels.AddPageLabel(4, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Image");
                    //pdfPageLabels.AddPageLabel(5, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "External Links");
                    //writer.PageLabels = pdfPageLabels;
                    doc.Close();

                    //added pradeep BarCode
                //    AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 440f, 760f); //Add Bar code to all pages.
                    //end
                    doc = null;

                }

                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }

            //if email is checked
            if (_vm.FileEmail == true)
            {

                string path = "C://Letters//Email" + "//";
                if (_vm.spanish == true)
                {
                    filename = Date + "_" + _vm.Account.ToString() + "_AOB_S" + ".eml";
                }
                else
                {
                    filename = Date + "_" + _vm.Account.ToString() + "_AOB" + ".eml";
                }

                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {
                    _vm.FileExists = false;
                    string emailTemplate = _vm.spanish ? (System.Web.HttpContext.Current.Server.MapPath("~/Email Template/AOB_Email_Spanish.html"))
                         : (System.Web.HttpContext.Current.Server.MapPath("~/Email Template/AOB_Email.html"));


                    //added pradeep BarCode
                 //   AddBarCodeallpagesAOB(path + filename, _vm.Account, filename, 440f, 760f); //Add Bar code to all pages.
                    //end
                    Emails.AutoEmailAOBEnglishSpanish(_vm.Email, emailTemplate, path + filename);

                }
            }
        }
        public void BuildAOBPdf_OtherLanguage(GeneratorModel _vm)
        {

            string filename = "";
            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;

            if (_vm.chinese == true)
            {
                filename = Date + "_" + _vm.Account.ToString() + "_AOB_C" + ".pdf";
            }
            else if (_vm.russian == true)
            {
                filename = Date + "_" + _vm.Account.ToString() + "_AOB_R" + ".pdf";
            }
            else if (_vm.armenian == true)
            {
                filename = Date + "_" + _vm.Account.ToString() + "_AOB_A" + ".pdf";
            }




            //   try
            //  {
            // Initialize the PDF document
            doc = new Document();
            doc1 = new Document();
            _vm.FileExists = null;

            if (_vm.FileEmail != true && _vm.FileFax != true)
            {
                // "//10.10.1.200//Letters//AOB" + "//";
                string path = "C://LettersTemp//AOB" + "//";
                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //


                    // Add Generic WelcomeLetter for specific payer types
                    if (_vm.details.Payerid == 4123 || _vm.details.Payerid == 4336 || _vm.details.Payerid == 4176 || _vm.details.Payerid == 4122 || _vm.details.Payerid == 4212 ||
                       _vm.details.Payerid == 1415 || _vm.details.Payerid == 3150 || _vm.details.Payerid == 1430 || _vm.details.Payerid == 4187 || _vm.details.Payerid == 3739
                      || _vm.details.Payerid == 3179 || _vm.details.Payerid == 7 || _vm.details.Payerid == 4510 || _vm.details.Payerid == 3100 || _vm.details.Payerid == 4446
                        || _vm.details.Payerid == 4511 || _vm.details.Payerid == 4346 || _vm.details.Payerid == 4345 || _vm.details.Payerid == 3679 || _vm.details.Payerid == 4344)
                    {

                        if (_vm.chinese == true)
                        {
                            this.AddWelcomeLetter_Chinese(doc, _vm); //Iamhere
                            this.AddBlackPage(doc);

                        }
                        else if (_vm.russian == true)
                        {
                            this.AddWelcomeLetter_Russian(doc, _vm); //Iamhere
                        }
                        else if (_vm.armenian == true)
                        {
                            this.AddWelcomeLetter_Armenian(doc, _vm); //Iamhere  // Pradeep 
                            this.AddBlackPage(doc);
                        }

                        else if (_vm.arabic == true)
                        {
                            this.AddWelcomeLetter_Armenian(doc, _vm); //Iamhere  // Pradeep 
                            this.AddBlackPage(doc);
                        }





                    }
                    else
                    {

                        if (_vm.chinese == true)
                        {
                            this.AddWelcomeLetter_Chinese(doc, _vm);
                            this.AddBlackPage(doc);
                        }
                        else if (_vm.russian == true)
                        {
                            this.AddWelcomeLetter_Russian(doc, _vm);


                        }
                        else if (_vm.armenian == true)
                        {
                            this.AddWelcomeLetter_Armenian(doc, _vm);   //Pradeep 
                            this.AddBlackPage(doc);
                        }
                        else if (_vm.arabic == true)
                        {
                            //
                        }

                    }



                    if (_vm.chinese == true)
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_Chinese(doc, _vm);
                        this.AddBlackPage(doc);
                    }
                    else if (_vm.russian == true)
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_Russian(doc, _vm);
                        this.AddBlackPage(doc);

                    }

                    else if (_vm.armenian == true)
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_Armenian(doc, _vm);  //Pradeep
                        this.AddBlackPage(doc);

                    }





                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size


                    doc.Close();
                    doc = null;
                }
            }



            //Fax is checked
            if (_vm.FileFax == true)
            {

                //"//10.10.1.200//Letters//Fax" + "//";

                string path = "C://Letters//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //

                    if (_vm.spanish == true)
                    {
                        this.AddFaxAOBCover_spanish(doc, _vm);
                    }
                    else
                    {
                        this.AddFaxAOBCover(doc, _vm);
                    }



                    // Add Generic WelcomeLetter for specific payer types
                    if (_vm.details.Payerid == 4123 || _vm.details.Payerid == 4336 || _vm.details.Payerid == 4176 || _vm.details.Payerid == 4122 || _vm.details.Payerid == 4212 ||
                           _vm.details.Payerid == 1415 || _vm.details.Payerid == 3150 || _vm.details.Payerid == 1430 || _vm.details.Payerid == 4187 || _vm.details.Payerid == 3739
                          || _vm.details.Payerid == 3179 || _vm.details.Payerid == 7 || _vm.details.Payerid == 4510 || _vm.details.Payerid == 3100 || _vm.details.Payerid == 4446
                            || _vm.details.Payerid == 4511 || _vm.details.Payerid == 4346 || _vm.details.Payerid == 4345 || _vm.details.Payerid == 3679 || _vm.details.Payerid == 4344)
                    {

                        if (_vm.spanish == true)
                        {
                            // this.AddGenericCoverLetter_Spanish(doc, _vm);
                        }
                        else
                        {
                            // this.AddGenericCoverLetter(doc, _vm);
                        }



                    }
                    else
                    {

                        if (_vm.spanish == true)
                        {
                            // this.AddWelcomeLetter_spanish(doc, _vm);
                        }
                        else
                        {
                            //  this.AddWelcomeLetter(doc, _vm);
                        }



                    }


                    if (_vm.spanish == true)
                    {
                        // this.AddBlackPage(doc);
                        // Add MCRStandards pages to the document
                        this.AddMCRStandards_spanish_New(doc);
                        this.AddMCRStandards2_Spanish_New(doc);


                        // Add AOB Privacy_PTRights Documents always

                        this.AddAOBPrivacy_PTRightsDoc1_spanish_New(doc);

                        this.AddAOBPrivacy_PTRightsDoc3_spanish_New(doc, _vm);
                        // this.AddBlackPage(doc);
                    }
                    else
                    {
                        //  this.AddBlackPage(doc);
                        // Add MCRStandards pages to the document
                        this.AddMCRStandards(doc);
                        this.AddMCRStandards2(doc);


                        // Add AOB Privacy_PTRights Documents always

                        // new document AOB
                        //  this.AddAOBPrivacy_PTRightsDoc1(doc);
                        // this.AddAOBPrivacy_PTRightsDoc2(doc);

                        this.AddAOBPrivacy_PTRightsDoc1_New(doc);
                        //   this.AddBlackPage(doc);
                        this.AddAOBPrivacy_PTRightsDoc3_New(doc, _vm);
                        // this.AddBlackPage(doc);
                        // this.AddAOBPrivacy_PTRightsDoc3(doc, _vm);
                    }

                    //   this.AddBlackPage(doc);


                    // Add a page with an image to the document.  The page will be sized to match the image size.
                    //  this.AddPageWithImage(doc, "C:\\images" + "\\FinalGraph.jpg");

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size
                                                    // this.AddPageWithExternalLinks(doc);

                    // Add page labels to the document
                    //iTextSharp.text.pdf.PdfPageLabels pdfPageLabels = new iTextSharp.text.pdf.PdfPageLabels();
                    //pdfPageLabels.AddPageLabel(1, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Basic Formatting");
                    //pdfPageLabels.AddPageLabel(2, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Internal Links");
                    //pdfPageLabels.AddPageLabel(3, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Bullet List");
                    //pdfPageLabels.AddPageLabel(4, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Image");
                    //pdfPageLabels.AddPageLabel(5, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "External Links");
                    //writer.PageLabels = pdfPageLabels;
                    doc.Close();
                    doc = null;
                }

                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoFax(_vm.FedEx, path + filename);
                }

            }

            //if email is checked
            if (_vm.FileEmail == true)
            {

                // "//10.10.1.200//Letters//Email" + "//";
                // "C://Letters//AOB"

                string path = "C://Letters//Email" + "//";


                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //

                    if (_vm.spanish == true)
                    {

                        this.AddEmailAOBCover_spanish(doc1, _vm);
                    }
                    else
                    {

                        this.AddEmailAOBCover(doc1, _vm);
                    }

                    // Add Generic WelcomeLetter for specific payer types
                    if (_vm.details.Payerid == 4123 || _vm.details.Payerid == 4336 || _vm.details.Payerid == 4176 || _vm.details.Payerid == 4122 || _vm.details.Payerid == 4212 ||
                          _vm.details.Payerid == 1415 || _vm.details.Payerid == 3150 || _vm.details.Payerid == 1430 || _vm.details.Payerid == 4187 || _vm.details.Payerid == 3739
                         || _vm.details.Payerid == 3179 || _vm.details.Payerid == 7 || _vm.details.Payerid == 4510 || _vm.details.Payerid == 3100 || _vm.details.Payerid == 4446
                           || _vm.details.Payerid == 4511 || _vm.details.Payerid == 4346 || _vm.details.Payerid == 4345 || _vm.details.Payerid == 3679 || _vm.details.Payerid == 4344)
                    {
                        if (_vm.spanish == true)
                        {
                            // this.AddGenericCoverLetter_Spanish(doc1, _vm);
                        }
                        else
                        {
                            // this.AddGenericCoverLetter(doc1, _vm);
                        }


                        // this.AddBlackPage(doc);

                    }
                    else
                    {

                        if (_vm.spanish == true)
                        {
                            // this.AddWelcomeLetter_spanish(doc1, _vm);
                        }
                        else
                        {
                            // this.AddWelcomeLetter(doc1, _vm);
                        }


                    }

                    if (_vm.spanish == true)
                    {
                        // Add MCRStandards pages to the document
                        this.AddMCRStandards_spanish_New(doc1);
                        this.AddMCRStandards2_Spanish_New(doc1);


                        // Add AOB Privacy_PTRights Documents always

                        this.AddAOBPrivacy_PTRightsDoc1_spanish_New(doc1);

                        this.AddAOBPrivacy_PTRightsDoc3_spanish_New(doc1, _vm);
                    }
                    else
                    {
                        // Add MCRStandards pages to the document
                        this.AddMCRStandards(doc1);
                        this.AddMCRStandards2(doc1);


                        // Add AOB Privacy_PTRights Documents always


                        //new documnet AOB
                        // this.AddAOBPrivacy_PTRightsDoc1(doc1);
                        // this.AddAOBPrivacy_PTRightsDoc2(doc1);
                        this.AddAOBPrivacy_PTRightsDoc1_New(doc1);

                        this.AddAOBPrivacy_PTRightsDoc3_New(doc1, _vm);

                    }


                    // this.AddBlackPage(doc);


                    // Add a page with an image to the document.  The page will be sized to match the image size.
                    //  this.AddPageWithImage(doc, "C:\\images" + "\\FinalGraph.jpg");

                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);

                    // Add page labels to the document
                    //iTextSharp.text.pdf.PdfPageLabels pdfPageLabels = new iTextSharp.text.pdf.PdfPageLabels();
                    //pdfPageLabels.AddPageLabel(1, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Basic Formatting");
                    //pdfPageLabels.AddPageLabel(2, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Internal Links");
                    //pdfPageLabels.AddPageLabel(3, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Bullet List");
                    //pdfPageLabels.AddPageLabel(4, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "Image");
                    //pdfPageLabels.AddPageLabel(5, iTextSharp.text.pdf.PdfPageLabels.EMPTY, "External Links");
                    //writer.PageLabels = pdfPageLabels;
                    doc1.Close();
                    doc1 = null;
                }

                if (System.IO.File.Exists(path + filename))
                {
                    Emails.AutoEmailAOB(_vm.Email, path + filename, "Assignment of Benefits");
                }
            }
            // RedirectToAction("Index");
            //    }
            //    catch (iTextSharp.text.DocumentException dex)
            //    {
            //    // Handle iTextSharp errors

            //}
            // finally
            // {
            // Clean up
            //doc.Close();
            //doc = null;

            // }

        }

        public void BuildBCNAOBPdf(GeneratorModel _vm)
        {

            string filename = "";
            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;
            iTextSharp.text.Document doc2 = null;
            iTextSharp.text.Document doc3 = null;

            if (_vm.spanish == true)
            {
                filename = Date + "_" + _vm.Account.ToString() + "_BCNAOB_S" + ".pdf";
            }
            else
            {
                filename = Date + "_" + _vm.Account.ToString() + "_BCNAOB" + ".pdf";
            }


            doc = new Document();
            doc1 = new Document();
            doc2 = new Document();
            doc3 = new Document();
            _vm.FileExists = null;

            if (1 == 1)
            {


                string path = "C://LettersTemp//AOB" + "//";

                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc2,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc2);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc2.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc2.Open();

                    //Generating  barcode 
                   // PdfContentByte pdfContentByte = writer.DirectContent;
                   // image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //


                    if (_vm.spanish == true)
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_spanish_New(doc2, _vm);
                      //  if (_vm.FileFax == false && _vm.FileEmail == false)
                      //  {
                            this.AddBlackPage(doc2);
                        //  }

                        // Add MCRStandards pages to the document
                        this.AddMCRStandards_spanish_New(doc2);
                        this.AddMCRStandards2_Spanish_New(doc2);

                        // Add AOB Privacy_PTRights Documents always
                        this.AddAOBPrivacy_PTRightsDoc1_spanish_New(doc2);
                        // this.AddAOBPrivacy_PTRightsDoc2_spanish(doc2);
                   //     if (_vm.FileFax == false && _vm.FileEmail == false)
                    //    {
                            this.AddBlackPage(doc2);
                    //    }
                        //this.AddAOBPrivacy_PTRightsDoc3_spanish_New(doc2, _vm);
                        //if (_vm.FileFax == false && _vm.FileEmail == false)
                        //{
                        //    this.AddBlackPage(doc2);
                        //}
                    }
                    else
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_New(doc2, _vm);
                    //    if (_vm.FileFax == false && _vm.FileEmail == false)
                    //    {
                            this.AddBlackPage(doc2);
                        //     }
                        // Add MCRStandards pages to the document
                        this.AddMCRStandards(doc2);
                        this.AddMCRStandards2(doc2);

                        // Add AOB Privacy_PTRights Documents always


                        this.AddAOBPrivacy_PTRightsDoc1_New(doc2);
                    //    if (_vm.FileFax == false && _vm.FileEmail == false)
                     //   {
                            this.AddBlackPage(doc2);
                        //   }
                        //this.AddAOBPrivacy_PTRightsDoc3_New(doc2, _vm);
                        //if (_vm.FileFax == false && _vm.FileEmail == false)
                        //{
                        //    this.AddBlackPage(doc2);
                        //}


                    }


                    // Add a final page
                    this.SetStandardPageSize(doc2);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);



                    doc2.Close();

                    doc2 = null;
                }
            }


            //Fax is checked
            if (_vm.FileFax != true && _vm.FileEmail != true)
            {

                string path = "C://LettersTemp//Mail" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc3,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc3);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc3.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc3.Open();

                    //Generating  barcode 
                     //commented pradeep
                 //   PdfContentByte pdfContentByte = writer.DirectContent;
                  //  image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //
                    
                    if (_vm.spanish == true)
                    {
                        this.AddBCNMailCoverLetter(doc3, _vm);
                    }
                    else
                    {
                        this.AddBCNMailCoverLetter(doc3, _vm);
                    }

                    this.AddBlackPage(doc3);

                    // Add a final page
                    this.SetStandardPageSize(doc3);  // Reset the margins and page size

                    doc3.Close();                  
                    doc3 = null;
                }
            }

            //Fax is checked
            if (_vm.FileFax == true)
            {

                string path = "C://LettersTemp//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();
                    // commented pradeep
                             //Generating  barcode 
                 //   PdfContentByte pdfContentByte = writer.DirectContent;
                  //  image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //
                    
                    if (_vm.spanish == true)
                    {
                        this.AddBCNFaxAOBCover_spanish(doc, _vm);
                    }
                    else
                    {
                        this.AddBCNFaxAOBCover(doc, _vm);
                    }

                    //   this.AddBlackPage(doc);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size

                    doc.Close();
                    doc = null;
                }
            }

            //if email is checked
            if (_vm.FileEmail == true)
            {


                string path = "C://LettersTemp//Email" + "//";


                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    if (_vm.spanish == true)
                    {

                        this.AddBCNEmailAOBCover_spanish(doc1, _vm);
                    }
                    else
                    {

                        this.AddBCNEmailAOBCover(doc1, _vm);
                    }


                    //   this.AddBlackPage(doc1);
                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();                
                    doc1 = null;
                }

            }


        }

        public void BuildMAPPOAOBPdf(GeneratorModel _vm)
        {

            string filename = "";
            string Date = DateTime.Today.Month.ToString() + DateTime.Today.Day.ToString() + DateTime.Today.Year.ToString();
            iTextSharp.text.Document doc = null;
            iTextSharp.text.Document doc1 = null;
            iTextSharp.text.Document doc2 = null;
            iTextSharp.text.Document doc3 = null;

            if (_vm.spanish == true)
            {
                filename = Date + "_" + _vm.Account.ToString() + "_MAPPOAOB_S" + ".pdf";
            }
            else
            {
                filename = Date + "_" + _vm.Account.ToString() + "_MAPPOAOB" + ".pdf";
            }


            doc = new Document();
            doc1 = new Document();
            doc2 = new Document();
            doc3 = new Document();
            _vm.FileExists = null;

            if (1 == 1)
            {


                string path = "C://LettersTemp//AOB" + "//";

                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc2,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc2);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc2.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc2.Open();

                    //Generating  barcode 
                   // PdfContentByte pdfContentByte = writer.DirectContent;
                   // image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //


                    if (_vm.spanish == true)
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_spanish_New(doc2, _vm);
                       // if (_vm.FileFax == false && _vm.FileEmail == false)
                      //  {
                            this.AddBlackPage(doc2);
                     //   }

                        // Add MCRStandards pages to the document
                        this.AddMCRStandards_spanish_New(doc2);
                        this.AddMCRStandards2_Spanish_New(doc2);

                        // Add AOB Privacy_PTRights Documents always
                        this.AddAOBPrivacy_PTRightsDoc1_spanish_New(doc2);
                        // this.AddAOBPrivacy_PTRightsDoc2_spanish(doc2);
                     //   if (_vm.FileFax == false && _vm.FileEmail == false)
                     //   {
                            this.AddBlackPage(doc2);
                    //    }
                        //this.AddAOBPrivacy_PTRightsDoc3_spanish_New(doc2, _vm);
                        //if (_vm.FileFax == false && _vm.FileEmail == false)
                        //{
                        //    this.AddBlackPage(doc2);
                        //}
                    }
                    else
                    {
                        this.AddAOBPrivacy_PTRightsDoc3_New(doc2, _vm);
                    //    if (_vm.FileFax == false && _vm.FileEmail == false)
                    //    {
                            this.AddBlackPage(doc2);
                     //   }
                        // Add MCRStandards pages to the document
                        this.AddMCRStandards(doc2);
                        this.AddMCRStandards2(doc2);

                        // Add AOB Privacy_PTRights Documents always


                        this.AddAOBPrivacy_PTRightsDoc1_New(doc2);
                      //  if (_vm.FileFax == false && _vm.FileEmail == false)
                     //   {
                            this.AddBlackPage(doc2);
                    //    }
                        //this.AddAOBPrivacy_PTRightsDoc3_New(doc2, _vm);
                        //if (_vm.FileFax == false && _vm.FileEmail == false)
                        //{
                        //    this.AddBlackPage(doc2);
                        //}


                    }


                    // Add a final page
                    this.SetStandardPageSize(doc2);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);



                    doc2.Close();
                    doc2 = null;
                }
            }


            //Fax is checked
            if (_vm.FileFax != true && _vm.FileEmail != true)
            {

                string path = "C://LettersTemp//Mail" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc3,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc3);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc3.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc3.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //

                    if (_vm.spanish == true)
                    {
                        this.AddBCNMailCoverLetter(doc3, _vm);
                    }
                    else
                    {
                        this.AddBCNMailCoverLetter(doc3, _vm);
                    }

                    this.AddBlackPage(doc3);

                    // Add a final page
                    this.SetStandardPageSize(doc3);  // Reset the margins and page size

                    doc3.Close();
                    doc3 = null;
                }
            }

            //Fax is checked
            if (_vm.FileFax == true)
            {

                string path = "C://LettersTemp//Fax" + "//";



                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc.Open();

                    //Generating  barcode 
                    PdfContentByte pdfContentByte = writer.DirectContent;
                    image39 = GetBarcode39(pdfContentByte, _vm.Account.ToString() + "-AOB", false); //

                    if (_vm.spanish == true)
                    {
                        this.AddBCNFaxAOBCover_spanish(doc, _vm);
                    }
                    else
                    {
                        this.AddBCNFaxAOBCover(doc, _vm);
                    }

                    //   this.AddBlackPage(doc);

                    // Add a final page
                    this.SetStandardPageSize(doc);  // Reset the margins and page size

                    doc.Close();
                    doc = null;
                }
            }

            //if email is checked
            if (_vm.FileEmail == true)
            {


                string path = "C://LettersTemp//Email" + "//";


                if (System.IO.File.Exists(path + filename))
                {
                    _vm.FileExists = true;
                }
                else
                {

                    iTextSharp.text.pdf.PdfWriter writer = iTextSharp.text.pdf.PdfWriter.GetInstance(doc1,
                        new System.IO.FileStream(path + filename,
                            System.IO.FileMode.Create));
                    _vm.FileExists = false;

                    // Set the margins and page size
                    this.SetStandardPageSize(doc1);

                    // Add metadata to the document.  This information is visible when viewing the 
                    // document properities within Adobe Reader.
                    doc1.AddTitle("Report");

                    // Add Xmp metadata to the document.
                    this.CreateXmpMetadata(writer);

                    // Open the document for writing content
                    doc1.Open();

                    if (_vm.spanish == true)
                    {

                        this.AddBCNEmailAOBCover_spanish(doc1, _vm);
                    }
                    else
                    {

                        this.AddBCNEmailAOBCover(doc1, _vm);
                    }


                    //   this.AddBlackPage(doc1);
                    // Add a final page
                    this.SetStandardPageSize(doc1);  // Reset the margins and page size
                                                     // this.AddPageWithExternalLinks(doc);


                    doc1.Close();
                    doc1 = null;
                }
            }
        }

        public void BuildDexcomMemberLetter(GeneratorModel _vm, string path, string filename)
        {
            string phoneNo = string.Empty;
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            string pdfTemplate = "C://LettersTemp//Dexcom//NEW Dexcom Member Letter_2019.pdf";

            PdfReader pdfReader = new PdfReader(pdfTemplate);
            PdfStamper pdfStamper = new PdfStamper(pdfReader, new FileStream(path + filename, FileMode.Create));
            AcroFields pdfFormFields = pdfStamper.AcroFields;

            pdfFormFields.SetField("Phone1", phoneNo);
            pdfFormFields.SetField("Name1", _vm.details.firstName);
            pdfFormFields.SetField("Address1", _vm.details.address1 + " " + _vm.details.address2);
            pdfFormFields.SetField("City1", _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode);

            pdfFormFields.SetField("Phone2", phoneNo);
            pdfFormFields.SetField("Account1", _vm.Account == null ? "" : Convert.ToString(_vm.Account));
            pdfFormFields.SetField("MemberName1", _vm.details.firstName + ",");
            pdfFormFields.SetField("Phone3", phoneNo + ".");


            pdfFormFields.SetField("MemberName2", _vm.details.firstName);
            pdfFormFields.SetField("Account2", _vm.Account == null ? "" : Convert.ToString(_vm.Account));
            pdfFormFields.SetField("DOB", _vm.details.DOB == null ? "" : String.Format("{0:MM/dd/yyyy}", _vm.details.DOB));
            pdfStamper.FormFlattening = true;

            // close the pdf  
            pdfStamper.Close();


        }

        public void BuildLibreMemberLetter(GeneratorModel _vm, string path, string filename)
        {


            string phoneNo = string.Empty;
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            string pdfTemplate = "C://LettersTemp//Libre//NEW Libre Member Letter_2019.pdf";

            PdfReader pdfReader = new PdfReader(pdfTemplate);
            PdfStamper pdfStamper = new PdfStamper(pdfReader, new FileStream(path + filename, FileMode.Create));
            AcroFields pdfFormFields = pdfStamper.AcroFields;

            pdfFormFields.SetField("Phone1", phoneNo);
            pdfFormFields.SetField("Name1", _vm.details.firstName);
            pdfFormFields.SetField("Address1", _vm.details.address1 + " " + _vm.details.address2);
            pdfFormFields.SetField("City1", _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode);

            pdfFormFields.SetField("Phone2", phoneNo);
            pdfFormFields.SetField("Account1", _vm.Account == null ? "" : Convert.ToString(_vm.Account));
            pdfFormFields.SetField("MemberName1", _vm.details.firstName + ",");
            pdfFormFields.SetField("Phone3", phoneNo + ".");


            pdfFormFields.SetField("MemberName2", _vm.details.firstName);
            pdfFormFields.SetField("Account2", _vm.Account == null ? "" : Convert.ToString(_vm.Account));
            pdfFormFields.SetField("DOB", _vm.details.DOB == null ? "" : String.Format("{0:MM/dd/yyyy}", _vm.details.DOB));
            pdfStamper.FormFlattening = true;

            // close the pdf  
            pdfStamper.Close();

           // AddBarCodeallpages(path + filename, _vm.Account, "LNM");


        }


        private void AddWelcomeLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phoneNo + " \n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            //  table3.AddCell(image39);
            doc.Add(table3);

            //Added extra space for enevelope
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font11Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);




            doc.Add(table4);
            //Added blank page after address page
            this.AddBlackPage(doc);
            this.AddBlackPage(doc);


            //Adding Header
            doc.Add(table3);
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\nDear " + payerName + " Member,\n\n"));

            Chunk c1 = new Chunk("Welcome to J&B Medical ", _Font12Font);
            Chunk c2 = new Chunk("Supply!", _Font12Font);

            Phrase p2 = new Phrase();
            p2.Add(c1);
            p2.Add(c2);

            Paragraph P = new Paragraph();

            P.Add(p2);
            doc.Add(P);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font12Font, new Chunk("\nTo keep your account secure please make sure that you or your caregivers are able to provide your insurance ID number, date of birth, address or social security number.  Without this information we will not be able to access your account.\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font12Font, new Chunk("If there are changes to your name, address, phone number, insurance, physician or supplies please contact us at least 10 days before your next shipment is due.  Failure to do so may result in a delay of supplies and/or an account balance.\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font12Font, new Chunk("The supplies you have requested require a prescription that meets the guidelines set by your insurance company.  Your supplies cannot be shipped until this is returned by your physician.  Please make sure you follow up with your physician to ensure that the prescription is completed and returned to us as soon as possible.   \n\n"));

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _smallBoldFont, new Chunk("Your insurance may require you to confirm your supplies and/or you may have copay/coinsurance requirements that must be met before your order ships.  You can contact us by phone at (800) 737-0045 ext 125, interactive website www.jandbportal.com, J&B Medical Android or IOS app, or wait to receive a call from Victor (our automated system) 7 days before your order is due to ship.  \n\n"));
            Chunk c3 = new Chunk("Your insurance  ", _Font12BoldFont);
            Chunk c4 = new Chunk("may", _Font12BoldBlueUnderlineFont);
            Chunk c5 = new Chunk(" require you to confirm your supplies and/or you", _Font12BoldFont);
            Chunk c6 = new Chunk(" may", _Font12BoldUnderlineFont);
            Chunk c7 = new Chunk(" have copay/coinsurance requirements that must be met before your order ships. ", _Font12BoldFont);
            Chunk c8 = new Chunk("You can contact us by phone at (800) 737-0045 ext 125, interactive website ", _Font12BoldFont);
            //  Chunk c9 = new Chunk("www.jandbportal.com", _smallBoldFont);
            Chunk c10 = new Chunk(" , J & B Medical Android or IOS app, or wait to receive a call from Victor (our automated system) 7 days before your order is due to ship.", _Font12BoldFont);



            Phrase p3 = new Phrase();
            p3.Add(c3);
            p3.Add(c4);
            p3.Add(c5);
            p3.Add(c6);
            p3.Add(c7);
            p3.Add(c8);
            p3.Add(JBPoratalLink);
            p3.Add(c10);
            // p3.Add(click);
            Paragraph P1 = new Paragraph();
            P1.Add(p3);
            doc.Add(P1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font12Font, new Chunk("\nAs soon as you receive your supplies please open all boxes and verify all supplies and quantities received are correct.  If there are any issues with your order you must notify us within 10 days to make corrections. \n"));

            Chunk c11 = new Chunk("\nWe have included the Supplier Standards, Notice of Privacy Practices & Assignment of Benefits Form (AOB).  Please take the time to read these forms. ", _Font12Font);
            Chunk c12 = new Chunk("You must sign, date and return the AOB ", _Font12BoldFont);
            Chunk c13 = new Chunk(" in the provided ", _Font12Font);
            Chunk c14 = new Chunk(" prepaid envelope", _Font12BoldFont);
            Chunk c15 = new Chunk(" , by fax:  ", _Font12Font);
            Chunk c16 = new Chunk("(800) 737-0012 ", _Font12BoldFont);
            Chunk c17 = new Chunk(", email: ", _Font12Font);
            Chunk c18 = new Chunk("JBDocs@jandbmedical.com ", _Font12BoldBlueUnderlineFont);
            Chunk c19 = new Chunk(" or upload to our interactive website: ", _Font12Font);

            Anchor JBEmailLink = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBEmailLink.Reference = "Email:JBDocs@jandbmedical.com";

            Phrase p4 = new Phrase();
            p4.Add(c11);
            p4.Add(c12);
            p4.Add(c13);
            p4.Add(c14);
            p4.Add(c15);
            p4.Add(c16);
            p4.Add(c17);
            p4.Add(JBEmailLink);
            p4.Add(c19);
            p4.Add(JBPoratalLink);
            Paragraph P2 = new Paragraph();
            P2.Add(p4);
            doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font12Font, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phoneNo + ".  We are available Monday thru Friday 8 AM thru 6 PM EST.\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Sincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("J&B Medical Supply Staff\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font9, new Chunk("Rev 11-12-2013 \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("QUL 4240 Sec 4 \n"));
            PdfPTable Table3 = new PdfPTable(3);
            Table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            Table3.WidthPercentage = 100;
            float[] Widths3 = new float[] { 80f, 50f, 80f };
            Table3.SetWidths(Widths3);

            Table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell PfCell1 = new PdfPCell(new Phrase("QUL 4240 Sec 4", _Font8Font));
            PfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            PfCell1.Border = 0;
            Table3.AddCell(PfCell1);

            PdfPCell PfCell2 = new PdfPCell(new Phrase("  ", _Font12Font));
            PfCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            PfCell2.Border = 0;
            Table3.AddCell(PfCell2);

            PdfPCell PfCell3 = new PdfPCell(new Phrase("Rev 11-12-2013", _Font8Font));
            PfCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            PfCell3.Border = 0;
            Table3.AddCell(fCell3);
        }

        private void AddWelcomeLetter_Chinese(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string fontpath = System.Web.HttpContext.Current.Request.PhysicalApplicationPath +
                             "fonts\\arial_font.ttf";

            //"simsun.ttf" file was downloaded from web and placed in the folder
            BaseFont bf = BaseFont.CreateFont(fontpath, BaseFont.IDENTITY_H,
                                              BaseFont.EMBEDDED);


            //create new font based on BaseFont
            Font font11 = new Font(bf, 11);
            Font font12 = new Font(bf, 12);
            Font font12Bold = new Font(bf, 12, Font.BOLD);
            Font font12BoldBlueunderline = new Font(bf, 12, 1, Color.BLUE);
            Font font9 = new Font(bf, 9);
            Font font8 = new Font(bf, 8);


            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("电话: " + phoneNo + " \n 传真: (800)737-0012\n 邮箱: Info@jandbmedical.com\n 网址: jandbmedical.com\n 会员门户网站: jandbportal.com ", font11));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            //  table3.AddCell(image39);
            doc.Add(table3);


            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n"));
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font11Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);




            doc.Add(table4);

            //Added blank page after address page
            this.AddBlackPage(doc);
            this.AddBlackPage(doc);


            //Adding Header
            doc.Add(table3);
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font12, new Chunk("\n\n尊敬的 " + payerName + " 会员,\n\n"));

            Chunk c1 = new Chunk("欢迎来到 J&B Medical ", font12);
            Chunk c2 = new Chunk("Supply!", font12);

            Phrase p2 = new Phrase();
            p2.Add(c1);
            p2.Add(c2);

            Paragraph P = new Paragraph();

            P.Add(p2);
            doc.Add(P);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("\n为保障您的账户安全，请确保您或您的监护人提供您的保险ID 号、出生日期、地址和社会安全号。若无此等信息，我们将无法进入您的账户。\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("如您的姓名、地址、电话号码、保险、医生或货物发生变更，请在下次出货前至少提前十(10) 天联系我们。如未做到，可能会导致货物延期和/或账户结余。\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("您申请发货的货物需要您提供一份符合保险公司指南的处方。在您的医生返回处方前，我们将无法发出您的货物。请务必敦促您的医生，确保其尽快填写处方并将其返回给我们。   \n\n"));

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _smallBoldFont, new Chunk("Your insurance may require you to confirm your supplies and/or you may have copay/coinsurance requirements that must be met before your order ships.  You can contact us by phone at (800) 737-0045 ext 125, interactive website www.jandbportal.com, J&B Medical Android or IOS app, or wait to receive a call from Victor (our automated system) 7 days before your order is due to ship.  \n\n"));
            Chunk c3 = new Chunk("在您的订单发货前，您的保险公司 ", font12Bold);
            Chunk c4 = new Chunk("可能", font12BoldBlueunderline);
            Chunk c5 = new Chunk(" 会要求您确认您的货物和/或您可能必须满足一些自付/共保要求。您可致电(800) 737-0045（转125）联系我们，或访问互动网站 ", font12Bold);
            // Chunk c6 = new Chunk(" may", _Font12BoldUnderlineFont);
            //   Chunk c7 = new Chunk(" have copay/coinsurance requirements that must be met before your order ships. ", _Font12BoldFont);
            //  Chunk c8 = new Chunk("You can contact us by phone at (800) 737-0045 ext 125, interactive website ", _Font12BoldFont);
            //  Chunk c9 = new Chunk("www.jandbportal.com", _smallBoldFont);
            Chunk c10 = new Chunk(" J & B Medical Android 或IOS 应用程序，或等待我们的自动化系统Victor 在您的订单发货前7 天致电给您。", font12Bold);



            Phrase p3 = new Phrase();
            p3.Add(c3);
            p3.Add(c4);
            p3.Add(c5);
            //  p3.Add(c6);
            // p3.Add(c7);
            // p3.Add(c8);
            p3.Add(JBPoratalLink);
            p3.Add(c10);
            // p3.Add(click);
            Paragraph P1 = new Paragraph();
            P1.Add(p3);
            doc.Add(P1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("\n在您收到货物后，请立即打开所有盒子，确认所收到的货物和数量准确无误。如您的订单存在任何问题，请在十(10) 天内通知我们，以便解决问题。 \n"));

            Chunk c11 = new Chunk("\n我们已随附供应商规范、隐私惯例告知书和保险权益转让表(AOB)。请仔细阅读这些表格。 ", font12);
            Chunk c12 = new Chunk("您必须签署AOB，注明日期 ", font12Bold);
            Chunk c13 = new Chunk(" 并使用提供的 ", font12);
            Chunk c14 = new Chunk(" 预付费信封", font12Bold);
            Chunk c15 = new Chunk(" 寄回，或通过传真：  ", font12);
            Chunk c16 = new Chunk("(800) 737-0012 ", font12Bold);
            Chunk c17 = new Chunk(", 或电子邮箱: ", font12);
            Chunk c18 = new Chunk("JBDocs@jandbmedical.com ", _Font12BoldBlueUnderlineFont);
            Chunk c19 = new Chunk(" 发回，或将签署好的AOB 上传至我们的互动网站： ", font12);

            Anchor JBEmailLink = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBEmailLink.Reference = "Email:JBDocs@jandbmedical.com";

            Phrase p4 = new Phrase();
            p4.Add(c11);
            p4.Add(c12);
            p4.Add(c13);
            p4.Add(c14);
            p4.Add(c15);
            p4.Add(c16);
            p4.Add(c17);
            p4.Add(JBEmailLink);
            p4.Add(c19);
            p4.Add(JBPoratalLink);
            Paragraph P2 = new Paragraph();
            P2.Add(p4);
            doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("\n如您有任何问题或疑虑，请拨打我们的客户服务支持热线 " + phoneNo + "  。我们的工作时间为周一至周五上午8:00 - 下午6:00（美国东部标准时间）。\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font12, new Chunk("谨致，\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font12, new Chunk("J&B Medical Supply 全体工作人员\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, font9, new Chunk("修订日期：2013 年11 月12 日 \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font9, new Chunk("QUL 4240 第4 节\n"));
            PdfPTable Table3 = new PdfPTable(3);
            Table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            Table3.WidthPercentage = 100;
            float[] Widths3 = new float[] { 80f, 50f, 80f };
            Table3.SetWidths(Widths3);

            Table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell PfCell1 = new PdfPCell(new Phrase("QUL 4240 第4 节", font8));
            PfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            PfCell1.Border = 0;
            Table3.AddCell(PfCell1);

            PdfPCell PfCell2 = new PdfPCell(new Phrase("  ", _Font12Font));
            PfCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            PfCell2.Border = 0;
            Table3.AddCell(PfCell2);

            PdfPCell PfCell3 = new PdfPCell(new Phrase("修订日期：2013 年11 月12 日", font8));
            PfCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            PfCell3.Border = 0;
            Table3.AddCell(fCell3);
        }
        private void AddWelcomeLetter_Armenian(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string fontpath = System.Web.HttpContext.Current.Request.PhysicalApplicationPath +
                             "fonts\\arial_font.ttf";

            //"simsun.ttf" file was downloaded from web and placed in the folder
            BaseFont bf = BaseFont.CreateFont(fontpath, BaseFont.IDENTITY_H,
                                              BaseFont.EMBEDDED);


            //create new font based on BaseFont
            Font font11 = new Font(bf, 11);
            Font font12 = new Font(bf, 12);
            Font font12Bold = new Font(bf, 12, Font.BOLD);
            Font font12BoldBlueunderline = new Font(bf, 12, 1, Color.BLUE);
            Font font9 = new Font(bf, 9);
            Font font8 = new Font(bf, 8);


            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("电话: " + phoneNo + " \n 传真: (800)737-0012\n 邮箱: Info@jandbmedical.com\n 网址: jandbmedical.com\n 会员门户网站: jandbportal.com ", font11));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            //  table3.AddCell(image39);
            doc.Add(table3);


            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font11Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);




            doc.Add(table4);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font12, new Chunk("\n\n尊敬的 " + payerName + " 会员,\n\n"));

            Chunk c1 = new Chunk("欢迎来到 J&B Medical ", font12);
            Chunk c2 = new Chunk("Supply!", font12);

            Phrase p2 = new Phrase();
            p2.Add(c1);
            p2.Add(c2);

            Paragraph P = new Paragraph();

            P.Add(p2);
            doc.Add(P);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("\n为保障您的账户安全，请确保您或您的监护人提供您的保险ID 号、出生日期、地址和社会安全号。若无此等信息，我们将无法进入您的账户。\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("如您的姓名、地址、电话号码、保险、医生或货物发生变更，请在下次出货前至少提前十(10) 天联系我们。如未做到，可能会导致货物延期和/或账户结余。\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("您申请发货的货物需要您提供一份符合保险公司指南的处方。在您的医生返回处方前，我们将无法发出您的货物。请务必敦促您的医生，确保其尽快填写处方并将其返回给我们。   \n\n"));

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _smallBoldFont, new Chunk("Your insurance may require you to confirm your supplies and/or you may have copay/coinsurance requirements that must be met before your order ships.  You can contact us by phone at (800) 737-0045 ext 125, interactive website www.jandbportal.com, J&B Medical Android or IOS app, or wait to receive a call from Victor (our automated system) 7 days before your order is due to ship.  \n\n"));
            Chunk c3 = new Chunk("在您的订单发货前，您的保险公司 ", font12Bold);
            Chunk c4 = new Chunk("可能", font12BoldBlueunderline);
            Chunk c5 = new Chunk(" 会要求您确认您的货物和/或您可能必须满足一些自付/共保要求。您可致电(800) 737-0045（转125）联系我们，或访问互动网站 ", font12Bold);
            // Chunk c6 = new Chunk(" may", _Font12BoldUnderlineFont);
            //   Chunk c7 = new Chunk(" have copay/coinsurance requirements that must be met before your order ships. ", _Font12BoldFont);
            //  Chunk c8 = new Chunk("You can contact us by phone at (800) 737-0045 ext 125, interactive website ", _Font12BoldFont);
            //  Chunk c9 = new Chunk("www.jandbportal.com", _smallBoldFont);
            Chunk c10 = new Chunk(" J & B Medical Android 或IOS 应用程序，或等待我们的自动化系统Victor 在您的订单发货前7 天致电给您。", font12Bold);



            Phrase p3 = new Phrase();
            p3.Add(c3);
            p3.Add(c4);
            p3.Add(c5);
            //  p3.Add(c6);
            // p3.Add(c7);
            // p3.Add(c8);
            p3.Add(JBPoratalLink);
            p3.Add(c10);
            // p3.Add(click);
            Paragraph P1 = new Paragraph();
            P1.Add(p3);
            doc.Add(P1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("\n在您收到货物后，请立即打开所有盒子，确认所收到的货物和数量准确无误。如您的订单存在任何问题，请在十(10) 天内通知我们，以便解决问题。 \n"));

            Chunk c11 = new Chunk("\n我们已随附供应商规范、隐私惯例告知书和保险权益转让表(AOB)。请仔细阅读这些表格。 ", font12);
            Chunk c12 = new Chunk("您必须签署AOB，注明日期 ", font12Bold);
            Chunk c13 = new Chunk(" 并使用提供的 ", font12);
            Chunk c14 = new Chunk(" 预付费信封", font12Bold);
            Chunk c15 = new Chunk(" 寄回，或通过传真：  ", font12);
            Chunk c16 = new Chunk("(800) 737-0012 ", font12Bold);
            Chunk c17 = new Chunk(", 或电子邮箱: ", font12);
            Chunk c18 = new Chunk("JBDocs@jandbmedical.com ", _Font12BoldBlueUnderlineFont);
            Chunk c19 = new Chunk(" 发回，或将签署好的AOB 上传至我们的互动网站： ", font12);

            Anchor JBEmailLink = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBEmailLink.Reference = "Email:JBDocs@jandbmedical.com";

            Phrase p4 = new Phrase();
            p4.Add(c11);
            p4.Add(c12);
            p4.Add(c13);
            p4.Add(c14);
            p4.Add(c15);
            p4.Add(c16);
            p4.Add(c17);
            p4.Add(JBEmailLink);
            p4.Add(c19);
            p4.Add(JBPoratalLink);
            Paragraph P2 = new Paragraph();
            P2.Add(p4);
            doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("\n如您有任何问题或疑虑，请拨打我们的客户服务支持热线 " + phoneNo + "  。我们的工作时间为周一至周五上午8:00 - 下午6:00（美国东部标准时间）。\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font12, new Chunk("谨致，\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font12, new Chunk("J&B Medical Supply 全体工作人员\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, font9, new Chunk("修订日期：2013 年11 月12 日 \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font9, new Chunk("QUL 4240 第4 节\n"));
            PdfPTable Table3 = new PdfPTable(3);
            Table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            Table3.WidthPercentage = 100;
            float[] Widths3 = new float[] { 80f, 50f, 80f };
            Table3.SetWidths(Widths3);

            Table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell PfCell1 = new PdfPCell(new Phrase("QUL 4240 第4 节", font8));
            PfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            PfCell1.Border = 0;
            Table3.AddCell(PfCell1);

            PdfPCell PfCell2 = new PdfPCell(new Phrase("  ", _Font12Font));
            PfCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            PfCell2.Border = 0;
            Table3.AddCell(PfCell2);

            PdfPCell PfCell3 = new PdfPCell(new Phrase("修订日期：2013 年11 月12 日", font8));
            PfCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            PfCell3.Border = 0;
            Table3.AddCell(fCell3);
        }
        private void AddWelcomeLetter_Russian(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string fontpath = System.Web.HttpContext.Current.Request.PhysicalApplicationPath +
                             "fonts\\arial_font.ttf";

            //"simsun.ttf" file was downloaded from web and placed in the folder
            BaseFont bf = BaseFont.CreateFont(fontpath, BaseFont.IDENTITY_H,
                                              BaseFont.EMBEDDED);


            //create new font based on BaseFont
            Font font11 = new Font(bf, 11);
            Font font12 = new Font(bf, 12);
            Font font12Bold = new Font(bf, 12, Font.BOLD);
            Font font12BoldBlueunderline = new Font(bf, 12, 1, Color.BLUE);
            Font font9 = new Font(bf, 9);
            Font font8 = new Font(bf, 8);


            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Телефон: " + phoneNo + " \n Факс: (800)737-0012\n Адрес электронной почты: Info@jandbmedical.com\n Веб-сайт: jandbmedical.com\n Портал для участников группы: jandbportal.com ", font11));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            //  table3.AddCell(image39);
            doc.Add(table3);


            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));



            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font11Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);




            doc.Add(table4);

            // Added blank page after address page
            this.AddBlackPage(doc);
            this.AddBlackPage(doc);

            //Adding Header
            doc.Add(table3);
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font12, new Chunk("\n\nУважаемый участник группы " + payerName + " Джей энд Би Медикал,\n\n"));

            Chunk c1 = new Chunk("Добро пожаловать в компанию J&B Medical ", font12);
            Chunk c2 = new Chunk("Supply!", font12);

            Phrase p2 = new Phrase();
            p2.Add(c1);
            p2.Add(c2);

            Paragraph P = new Paragraph();

            P.Add(p2);
            doc.Add(P);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("\nЧтобы защитить свою учетную запись, убедитесь, что вы или лица, ухаживающие за вами, знаете номер вашего страхового полиса, дату рождения, адрес или номер социального обеспечения. Без этой информации мы не сможем получить доступ к вашей учетной записи.\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("В случае смены имени, адреса, номера телефона, страхового полиса, врача или товаров, свяжитесь с нами не менее чем за 10 дней до следующей отправки вашего груза. Несоблюдение этого требования может привести к задержке поставок и/или блокированию остатка средств на счете.\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("Заказываемые вами товары отпускаются по рецепту, который должен соответствовать инструкциям, установленным вашей страховой компанией. Ваши товары не будут отправлены до тех пор, пока такой рецепт не будет выдан вашим врачом. Пройдите обследование у врача для получения рецепта и его отправки нам в кратчайшие сроки.   \n\n"));

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _smallBoldFont, new Chunk("Your insurance may require you to confirm your supplies and/or you may have copay/coinsurance requirements that must be met before your order ships.  You can contact us by phone at (800) 737-0045 ext 125, interactive website www.jandbportal.com, J&B Medical Android or IOS app, or wait to receive a call from Victor (our automated system) 7 days before your order is due to ship.  \n\n"));
            Chunk c3 = new Chunk("В соответствии с условиями страхования от вас может потребоваться подтверждение поставляемых товаров и/или дополнительная плата /доля вашего участия. Такие условия должны быть выполнены до заказа поставки. Вы можете связаться с нами по телефону (800) 737-0045, добавочный 125, через интерактивный веб-сайт ", font12Bold);
            //  Chunk c4 = new Chunk("可能", font12BoldBlueunderline);
            Chunk c5 = new Chunk(" с помощью приложения для Android или IOS J & B Medical, или подождать, пока вам перезвонит Victor(наша автоматизированная система) за 7 дней до отправки заказа. ", font12Bold);
            // Chunk c6 = new Chunk(" may", _Font12BoldUnderlineFont);
            //   Chunk c7 = new Chunk(" have copay/coinsurance requirements that must be met before your order ships. ", _Font12BoldFont);
            //  Chunk c8 = new Chunk("You can contact us by phone at (800) 737-0045 ext 125, interactive website ", _Font12BoldFont);
            //  Chunk c9 = new Chunk("www.jandbportal.com", _smallBoldFont);
            //   Chunk c10 = new Chunk(" J & B Medical Android 或IOS 应用程序，或等待我们的自动化系统Victor 在您的订单发货前7 天致电给您。", font12Bold);



            Phrase p3 = new Phrase();
            p3.Add(c3);
            // p3.Add(c4);

            //  p3.Add(c6);
            // p3.Add(c7);
            // p3.Add(c8);
            p3.Add(JBPoratalLink);
            p3.Add(c5);
            // p3.Add(c10);
            // p3.Add(click);
            Paragraph P1 = new Paragraph();
            P1.Add(p3);
            doc.Add(P1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("\nПосле получения товаров откройте все коробки и проверьте наличие и количество согласно заказу. В случае проблем с заказом вы должны в течение 10 дней уведомить нас для их решения. \n"));

            Chunk c11 = new Chunk("\nМы приложили следующие документы: стандарты поставщика, уведомление о порядке использования конфиденциальной информации и форму возмещения страховщиком понесенных расходов. Пожалуйста, ознакомьтесь с этими документами. ", font12);
            Chunk c12 = new Chunk("Вы должны подписать, поставить дату и отправить форму возмещения страховщиком понесенных расходов в прилагаемом предоплаченном конверте ", font12Bold);
            Chunk c13 = new Chunk(" по факсу: ", font12);
            //  Chunk c14 = new Chunk(" 预付费信封", font12Bold);
            // Chunk c15 = new Chunk(" 寄回，或通过传真：  ", font12);
            Chunk c16 = new Chunk("(800) 737-0012 ", font12Bold);
            Chunk c17 = new Chunk(", электронной почте: ", font12);
            Chunk c18 = new Chunk("JBDocs@jandbmedical.com ", _Font12BoldBlueUnderlineFont);
            Chunk c19 = new Chunk(" или загрузить ее на наш интерактивный веб-сайт: ", font12);

            Anchor JBEmailLink = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBEmailLink.Reference = "Email:JBDocs@jandbmedical.com";

            Phrase p4 = new Phrase();
            p4.Add(c11);
            p4.Add(c12);
            p4.Add(c13);
            // p4.Add(c14);
            //  p4.Add(c15);
            p4.Add(c16);
            p4.Add(c17);
            p4.Add(JBEmailLink);
            p4.Add(c19);
            p4.Add(JBPoratalLink);
            Paragraph P2 = new Paragraph();
            P2.Add(p4);
            doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font12, new Chunk("\nПри возникновении вопросов или проблем обращайтесь в нашу службу поддержки клиентов по номеру (1800) 737-0045. Мы доступны с понедельника по пятницу с 8 утра до 6 вечера по восточному поясному времени. \n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font12, new Chunk("С уважением,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font12, new Chunk("персонал компании J&B Medical Supply\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, font9, new Chunk("Ред. 11-12-2013 \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, font9, new Chunk("QUL 4240 Раз. 4\n"));
            PdfPTable Table3 = new PdfPTable(3);
            Table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            Table3.WidthPercentage = 100;
            float[] Widths3 = new float[] { 80f, 50f, 80f };
            Table3.SetWidths(Widths3);

            Table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell PfCell1 = new PdfPCell(new Phrase("QUL 4240 Раз. 4", font8));
            PfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            PfCell1.Border = 0;
            Table3.AddCell(PfCell1);

            PdfPCell PfCell2 = new PdfPCell(new Phrase("  ", _Font12Font));
            PfCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            PfCell2.Border = 0;
            Table3.AddCell(PfCell2);

            PdfPCell PfCell3 = new PdfPCell(new Phrase("Ред. 11-12-2013", font8));
            PfCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            PfCell3.Border = 0;
            Table3.AddCell(fCell3);
        }

        private void AddWelcomeLetter_spanish(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            string phoneNo = string.Empty;
            doc.NewPage();
            if (_vm.details.contactpayer != null)
                phoneNo = _vm.details.contactpayer;
            else
                phoneNo = "(800) 737-0045";
            string payerName;
            if (_vm.details.payername != null)

                payerName = _vm.details.payername;
            else
                payerName = "J & B Medical";

            //"C:\\images" + "\\Cover_HMO.jpg"
            //Server.MapPath("/Image/Cover_HMO.jpg")
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_TOP; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 70f, 55f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);


            PdfPCell fCell3 = new PdfPCell(new Phrase("Teléfono: " + phoneNo + " \n Fax: (800)737-0012\n Correo electrónico: Info@jandbmedical.com\n Sitio web: jandbmedical.com\n Portal del miembro: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));




            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font11Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            // Added blank page after address page
            this.AddBlackPage(doc);
            this.AddBlackPage(doc);


            //Adding Header
            doc.Add(table3);
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nEstimado miembro nuevo,\n")); //payerName

            Chunk c1 = new Chunk("Queremos darle la bienvenida a J&B Medical ", _Font12Font);
            Chunk c2 = new Chunk("Supply!", _Font12Font);

            Phrase p2 = new Phrase();
            p2.Add(c1);
            p2.Add(c2);

            Paragraph P = new Paragraph();

            P.Add(p2);
            doc.Add(P);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font12Font, new Chunk("\nPara conservar la salvaguarda de su cuenta, asegúrese de que usted o su cuidador pueden proporcionar su número de identificación del seguro, fecha de nacimiento, dirección o número de seguro social. Sin esta información no podremos acceder a su cuenta.\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font12Font, new Chunk("Si surge algún cambio en su nombre, dirección, teléfono, seguro médico, médico o suministros, sírvase contactarnos por lo menos 10 días antes de su próximo envío. De no ser así, podría producirse una demora de los suministros y/o un saldo en la cuenta.\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font12Font, new Chunk("Los suministros que solicitó deben estar amparados por una receta que satisfaga los lineamientos establecidos por su compañía aseguradora. Sus suministros no podrán enviarse hasta que obtengamos la receta de su médico. Póngase en contacto con su médico para asegurarse de que haga la receta, y sírvase enviárnosla lo antes posible.   \n\n"));

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _smallBoldFont, new Chunk("Your insurance may require you to confirm your supplies and/or you may have copay/coinsurance requirements that must be met before your order ships.  You can contact us by phone at (800) 737-0045 ext 125, interactive website www.jandbportal.com, J&B Medical Android or IOS app, or wait to receive a call from Victor (our automated system) 7 days before your order is due to ship.  \n\n"));
            Chunk c3 = new Chunk("Es ", _Font12BoldFont);
            Chunk c4 = new Chunk("probable", _Font12BoldUnderlineFont);
            Chunk c5 = new Chunk(" que su seguro le exija confirmar sus suministros y/o es", _Font12BoldFont);
            Chunk c6 = new Chunk(" probable", _Font12BoldUnderlineFont);
            Chunk c7 = new Chunk(" que deba cubrir requisitos de copago/coseguro antes de que se le envíe su pedido. ", _Font12BoldFont);
            Chunk c8 = new Chunk("Puede comunicarse con nosotros por teléfono llamando al (800) 737-0045 ext. 125 o a través del sitio web interactivo ", _Font12BoldFont);
            //  Chunk c9 = new Chunk("www.jandbportal.com", _smallBoldFont);
            Chunk c10 = new Chunk(" , o mediante la aplicación de J&B Medical para Android o IOS, o puede esperar que le llame Víctor (nuestro sistema automático) 7 días antes del envío de su pedido.", _Font12BoldFont);



            Phrase p3 = new Phrase();
            p3.Add(c3);
            p3.Add(c4);
            p3.Add(c5);
            p3.Add(c6);
            p3.Add(c7);
            p3.Add(c8);
            p3.Add(JBPoratalLink);
            p3.Add(c10);
            // p3.Add(click);
            Paragraph P1 = new Paragraph();
            P1.Add(p3);
            doc.Add(P1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font12Font, new Chunk("\nTras recibir sus suministros, abra todas las cajas y verifique que todos los suministros y las cantidades recibidas sean correctas.  Si hay algún problema con el pedido deberá notificarnos en un plazo de 10 días para hacer las correcciones. \n"));

            Chunk c11 = new Chunk("\nCon esta carta hemos adjuntado las Normas de proveedores, el Aviso de prácticas de privacidad y un Formulario de Asignación de Beneficios (Assignment of Benefits, AOB).  Tómese el tiempo de leer y revisar estos formularios.", _Font12Font);
            Chunk c12 = new Chunk(" Tiene que firmar, fechar y devolver el AOB ", _Font12BoldFont);
            Chunk c13 = new Chunk("en el sobre adjunto con ", _Font12Font);
            Chunk c14 = new Chunk("franqueo prepagado ", _Font12BoldFont);
            Chunk c15 = new Chunk(",si es por fax al:", _Font12Font);
            Chunk c16 = new Chunk("(800) 737-0012", _Font12BoldFont);
            Chunk c17 = new Chunk(",si es por correo electrónico a: ", _Font12Font);
            Chunk c18 = new Chunk("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            Chunk c19 = new Chunk(" o súbalo al sitio web interactivo:", _Font12Font);

            Anchor JBEmailLink = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBEmailLink.Reference = "Email:JBDocs@jandbmedical.com";

            Phrase p4 = new Phrase();
            p4.Add(c11);
            p4.Add(c12);
            p4.Add(c13);
            p4.Add(c14);
            p4.Add(c15);
            p4.Add(c16);
            p4.Add(c17);
            p4.Add(JBEmailLink);
            p4.Add(c19);
            p4.Add(JBPoratalLink);
            Paragraph P2 = new Paragraph();
            P2.Add(p4);
            doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font12Font, new Chunk("\nSi tiene alguna pregunta o inquietud, llame a nuestra línea de Atención al Cliente al " + phoneNo + ".  Estamos disponibles de lunes a viernes de 8 am a 6 pm, Hora Estándar del Este (EST).\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Atentamente,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("El Personal de J&B Medical Supply \n"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("QUL 4240 Sec 4 \n"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font9, new Chunk("Rev 11-12-2013 \n"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("QUL 4240 Sec 4 \n"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));
            PdfPTable Tablefooter = new PdfPTable(3);
            Tablefooter.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            Tablefooter.WidthPercentage = 100;
            float[] Widthsfooter = new float[] { 80f, 50f, 80f };
            Tablefooter.SetWidths(Widthsfooter);

            Tablefooter.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell PfCell1 = new PdfPCell(new Phrase("\nQUL 4240 Sec 4", _Font8Font));
            PfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            PfCell1.Border = 0;
            Tablefooter.AddCell(PfCell1);

            PdfPCell PfCell2 = new PdfPCell(new Phrase("  ", _Font12Font));
            PfCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            PfCell2.Border = 0;
            Tablefooter.AddCell(PfCell2);

            PdfPCell PfCell3 = new PdfPCell(new Phrase("Rev 11-12-2013", _Font8Font));
            PfCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            PfCell3.Border = 0;
            Tablefooter.AddCell(PfCell3);

            doc.Add(Tablefooter);
        }
        private void AddFaxAOBCover(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();

            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Fax #: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("READ", _standardBoldFont));
            list.Add(new ListItem("SIGNED", _standardBoldFont));
            list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidentiality \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("       The information contained in this transmission is confidential health information that is privileged and legally protected from disclosure by the Health Insurance Portability Accountability Act. (HIPPA).  This information is intended only for the individual named above. The recipient of this information is prohibited from disclosing this information to any other party unless required to do so by law or regulation and is required to destroy the information after its stated need has been fulfilled.  If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or action taken in reliance on the contents of these documents is strictly prohibited.  If the information was received in error, Please notify J &B Medical immediately to arrange for the return or destruction of these documents.    \n\n"));



        }
        private void AddBCNFaxAOBCover(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();

            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Fax #: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n"));
            //iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            //list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            //list.IndentationLeft = 20f;     // Indent the list 20 points
            //list.Add(new ListItem("READ", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            //RomanList maillist = new RomanList(true, 20);
            //maillist.IndentationLeft = 10f;
            //maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            //maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            //Paragraph P1 = new Paragraph();
            //Chunk P1C1 = new Chunk("Email: ", _standardFont);

            //P1.Add(P1C1);
            //P1.Add(JBDocs);
            //ListItem docs = new ListItem(P1);
            //maillist.Add(docs);

            //Paragraph P2 = new Paragraph();
            //Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            //P2.Add(P1C2);
            //P2.Add(JBPoratalLink);
            //ListItem link = new ListItem(P2);
            //maillist.Add(link);
            //list.Add(maillist);




            //doc.Add(list);  // Add the list to the page


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font100, new Chunk("\n\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidentiality \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("       The information contained in this transmission is confidential health information that is privileged and legally protected from disclosure by the Health Insurance Portability Accountability Act. (HIPPA).  This information is intended only for the individual named above. The recipient of this information is prohibited from disclosing this information to any other party unless required to do so by law or regulation and is required to destroy the information after its stated need has been fulfilled.  If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or action taken in reliance on the contents of these documents is strictly prohibited.  If the information was received in error, Please notify J &B Medical immediately to arrange for the return or destruction of these documents.    \n\n"));



        }

        private void UnableToReorderFax(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();

            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("Account#: " + _vm.Account + "\n50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_MIDDLE, _Font12Font, new Chunk("\n Attention Dr. " + _vm.details.PhysicianName));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12Font, new Chunk("\n\n UNABLE TO CONTACT FOR REORDER\n\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("On behalf of Total Health Care, we wanted to advise you that we have been unsuccessful in contacting the patient below regarding a reorder of diabetic testing supplies. The patient may not be using the diabetic supplies as directed per your prescription. Please contact us if we can be of assistance in helping to better serve our mutual patient.\n\n\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n Patient Name: " + _vm.details.firstName + "                                           DOB: " + _vm.details.DOB.Value.Month + "/" + _vm.details.DOB.Value.Day + "/" + _vm.details.DOB.Value.Year));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n Total Health Care ID: " + _vm.details.PolicyNumber + "\n\n\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n\nRespectfully,\n\n J & B Medical Supply Customer Service\n\n(844) 236-7933 Option #2\n\n\n"));


        }

        private void AddFaxAOBCover_spanish(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";


            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Teléfono: " + phone + "\n Fax: (800)737-0012\n Correo electrónico: Info@jandbmedical.com\n Sitio web: jandbmedical.com\n Portal del miembro: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Atención:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Número de fax: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPor favor......." + "\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Lea", _standardBoldFont));
            list.Add(new ListItem("Firme", _standardBoldFont));
            list.Add(new ListItem("Devuelva el formulario a más tardar el: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tCorreo postal: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Correo electrónico: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSi no devuelve el formulario puede haber retrasos en su pedido. \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nSi tiene alguna pregunta o inquietud, llame a nuestra línea de Atención al Cliente al " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nEstamos disponibles de lunes a viernes de 8 am a 6 pm, Hora Estándar del Este (EST).\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nAtentamente,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("El Personal de J&B Medical Supply\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidencialidad \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("              La información contenida en esta transmisión es información de salud confidencial de naturaleza privilegiada cuya divulgación indebida está prohibida por la Ley de Portabilidad y Responsabilidad de los Seguros de Salud (HIPPA).   Esta información está dirigida exclusivamente a la persona mencionada antes. Se prohíbe al receptor de esta información revelar la misma a cualquier otra persona, a menos que la ley o la normativa le exijan hacerlo, y se le exige que destruya la información una vez que se haya satisfecho la necesidad establecida.   Si usted no es el receptor destinatario, le notificamos por este medio que queda estrictamente prohibida toda divulgación, copia, distribución o acción emprendida con base en el contenido de estos documentos.  Si usted recibió esta información por error, sírvase notificarlo inmediatamente a J &B Medical para coordinar la devolución o destrucción de estos documentos. \n\n"));



        }
        private void AddBCNFaxAOBCover_spanish(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";


            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";

            Anchor JBLink = new Anchor("www.jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBLink.Reference = "http://www.jandbmedical.com";



            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Teléfono: " + phone + "\n Fax: (800)737-0012\n Correo electrónico: Info@jandbmedical.com\n Sitio web: jandbmedical.com\n Portal del miembro: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            // cell.Colspan = 3;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Atención:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Número de fax: ");
            table.AddCell(_vm.FedEx);

            doc.Add(table);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPor favor......." + "\n"));
            //iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            //list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            //list.IndentationLeft = 20f;     // Indent the list 20 points
            //list.Add(new ListItem("Lea", _standardBoldFont));
            //list.Add(new ListItem("Firme", _standardBoldFont));
            //list.Add(new ListItem("Devuelva el formulario a más tardar el: \n\n", _standardBoldFont));

            //RomanList maillist = new RomanList(true, 20);
            //maillist.IndentationLeft = 10f;
            //maillist.Add(new ListItem("\tCorreo postal: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            //maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            //Paragraph P1 = new Paragraph();
            //Chunk P1C1 = new Chunk("Correo electrónico: ", _standardFont);

            //P1.Add(P1C1);
            //P1.Add(JBDocs);
            //ListItem docs = new ListItem(P1);
            //maillist.Add(docs);

            //Paragraph P2 = new Paragraph();
            //Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            //P2.Add(P1C2);
            //P2.Add(JBPoratalLink);
            //ListItem link = new ListItem(P2);
            //maillist.Add(link);
            //list.Add(maillist);




            //doc.Add(list);  // Add the list to the page


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSi no devuelve el formulario puede haber retrasos en su pedido. \n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nSi tiene alguna pregunta o inquietud, llame a nuestra línea de Atención al Cliente al " + phone + ".  \n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nEstamos disponibles de lunes a viernes de 8 am a 6 pm, Hora Estándar del Este (EST).\n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nAtentamente,\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("El Personal de J&B Medical Supply\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font100, new Chunk("\n\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("\n\nConfidencialidad \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _BoldFont9, new Chunk("              La información contenida en esta transmisión es información de salud confidencial de naturaleza privilegiada cuya divulgación indebida está prohibida por la Ley de Portabilidad y Responsabilidad de los Seguros de Salud (HIPPA).   Esta información está dirigida exclusivamente a la persona mencionada antes. Se prohíbe al receptor de esta información revelar la misma a cualquier otra persona, a menos que la ley o la normativa le exijan hacerlo, y se le exige que destruya la información una vez que se haya satisfecho la necesidad establecida.   Si usted no es el receptor destinatario, le notificamos por este medio que queda estrictamente prohibida toda divulgación, copia, distribución o acción emprendida con base en el contenido de estos documentos.  Si usted recibió esta información por error, sírvase notificarlo inmediatamente a J &B Medical para coordinar la devolución o destrucción de estos documentos. \n\n"));



        }

        private void AddGenericCoverLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {



            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            doc.NewPage();


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 70f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);
            //(800) 737-0045
            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));
            if (_vm.Option == "1") // Added extra spacing for AOB cover letters as per Debra instructions
            {
                this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));
                this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));
            }

            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font11Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);




            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("READ", _standardBoldFont));
            list.Add(new ListItem("SIGNED", _standardBoldFont));
            list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));


        }

        private void AddGenericCoverLetter_chinese(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            //Use BaseFont to load unicode fonts like Simplified Chinese font
            string fontpath = System.Web.HttpContext.Current.Request.PhysicalApplicationPath +
                              "fonts\\arial_font.ttf";

            //"simsun.ttf" file was downloaded from web and placed in the folder
            BaseFont bf = BaseFont.CreateFont(fontpath, BaseFont.IDENTITY_H,
                                              BaseFont.EMBEDDED);
            //create new font based on BaseFont
            Font font11 = new Font(bf, 11);
            Font font12 = new Font(bf, 12);


            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            doc.NewPage();


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 70f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", font11));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", font11));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);
            //(800) 737-0045
            PdfPCell fCell3 = new PdfPCell(new Phrase("电话: " + phone + "\n 传真: (800)737-0012\n 邮箱: Info@jandbmedical.com\n 网址: jandbmedical.com\n 会员门户网站: jandbportal.com ", font11));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, font12, new Chunk("\n\n"));

            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font11Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);




            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("READ", _standardBoldFont));
            list.Add(new ListItem("SIGNED", _standardBoldFont));
            list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));


        }

        private void AddBCNMailCoverLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            doc.NewPage();


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 70f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);
            //(800) 737-0045
            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font11Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);




            doc.Add(table4);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n"));
            //iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            //list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            //list.IndentationLeft = 20f;     // Indent the list 20 points
            //list.Add(new ListItem("READ", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            //RomanList maillist = new RomanList(true, 20);
            //maillist.IndentationLeft = 10f;
            //maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            //maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            //Paragraph P1 = new Paragraph();
            //Chunk P1C1 = new Chunk("Email: ", _standardFont);

            //P1.Add(P1C1);
            //P1.Add(JBDocs);
            //ListItem docs = new ListItem(P1);
            //maillist.Add(docs);

            //Paragraph P2 = new Paragraph();
            //Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            //P2.Add(P1C2);
            //P2.Add(JBPoratalLink);
            //ListItem link = new ListItem(P2);
            //maillist.Add(link);
            //list.Add(maillist);




            //doc.Add(list);  // Add the list to the page


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at " + phone + ".  \n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));


        }

        private void AddPCPLetter(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            doc.NewPage();


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(80, 70);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(5);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 80f, 50f, 25f, 120f, 70f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;



            PdfPCell fCell1 = new PdfPCell(new Phrase("J&B Medical \n 50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);
            table3.AddCell(imageCell);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            //(800) 737-0045
            PdfPCell fCell3 = new PdfPCell(new Phrase("Phone: " + phone + "\n Fax: (800)737-0012\n JBDocs@jandbmedical.com", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);

            table3.AddCell(image39);


            doc.Add(table3);

            //  table5.AddCell(image39);
            // add here


            //PdfPTable barCodeTbl = new PdfPTable(2);
            //barCodeTbl.HorizontalAlignment = Element.ALIGN_LEFT;
            //// PdfPCell cell1 = new PdfPCell();
            //barCodeTbl.WidthPercentage = 100;
            //float[] barcodeWid = new float[] {150f ,70f };
            //barCodeTbl.SetWidths(barcodeWid);

            //barCodeTbl.DefaultCell.Border = Rectangle.NO_BORDER;

            //PdfPCell bC1 = new PdfPCell(new Phrase("  ", _Font11Font));
            //bC1.HorizontalAlignment = Element.ALIGN_LEFT;
            //bC1.Border = 0;
            //barCodeTbl.AddCell(bC1);

            //barCodeTbl.AddCell(image39);

            //doc.Add(barCodeTbl);



            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);

            string todayDate = DateTime.Today.ToShortDateString();
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font11Font, new Chunk("Date : " + todayDate));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n"));

            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase("\n\n\n\n" + _vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font11Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);

            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font14BoldFont, new Chunk("\nAccount#: " + _vm.Account));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\nBeneficiary : " + _vm.details.firstName + "\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nInsurance/Medicaid ID#: " + _vm.details.SubsNumberPCP + "\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nDear Beneficiary or Caregiver, \n\n\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12FontUnderline, new Chunk("Please provide us with the current name, address and phone number of the doctor you are now seeing so that we can renew the prescription for your supplies.  We have no current doctor info on file for you, supplies may be delayed. "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\nPHYSICIAN NAME :_________________________________________________________________ "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nADDRESS: _______________________________________________________________________ "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nCITY: _____________________________ STATE: __________________ ZIP: _________________"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nPHONE & FAX NUMBER INCLUDING AREA CODE: "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("(________) _____________________________"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\nPlease call us at 1-800-737-0045 Ext 113 with this information, or you can mail back."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\nSincerely,"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("J & B Medical "));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n\n\n\n"));

            PdfPTable table33 = new PdfPTable(3);
            table33.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table33.WidthPercentage = 100;
            float[] widths33 = new float[] { 80f, 50f, 80f };
            table33.SetWidths(widths33);

            table33.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell11 = new PdfPCell(new Phrase("CMN1008", _Font9));
            fCell11.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell11.Border = 0;
            table33.AddCell(fCell11);

            PdfPCell fCell22 = new PdfPCell(new Phrase("  ", _Font12Font));
            fCell22.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell22.Border = 0;
            table33.AddCell(fCell22);

            PdfPCell fCell33 = new PdfPCell(new Phrase("Revised 3/28/07 TLG", _Font9));
            fCell33.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell33.Border = 0;
            table33.AddCell(fCell33);


            doc.Add(table33);

        }


        private void AddGenericCoverLetter_Spanish(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 70f, 50f, 90f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("50496 West Pontiac Trail\n Wixom, MI 48393", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);
            //(800) 737-0045
            PdfPCell fCell3 = new PdfPCell(new Phrase("Teléfono: " + phone + "\n Fax: (800)737-0012\n Correo electrónico: Info@jandbmedical.com\n Sitio web: jandbmedical.com\n Portal del miembro: jandbportal.com ", _Font11Font));
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table4 = new PdfPTable(1);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 40;
            float[] widths4 = new float[] { 800f };
            table4.SetWidths(widths4);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell pdfCell1 = new PdfPCell(new Phrase(_vm.details.firstName + "\n" + _vm.details.address1 + " " + _vm.details.address2 + "\n" + _vm.details.city + " ," + _vm.details.state + " ," + _vm.details.zipcode, _Font11Font));
            pdfCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfCell1.Border = 0;
            table4.AddCell(pdfCell1);




            doc.Add(table4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPor favor......." + "\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Lea", _standardBoldFont));
            list.Add(new ListItem("Firme", _standardBoldFont));
            list.Add(new ListItem("Devuelva el formulario a más tardar el: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tCorreo postal (se adjunta sobre con franqueo prepagado)", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Correo electrónico: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSi no devuelve el formulario puede haber retrasos en su pedido.\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nSi tiene alguna pregunta o inquietud, llame a nuestra línea de Atención al Cliente al (800) 737-0045.    \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nEstamos disponibles de lunes a viernes de 8 am a 6 pm, Hora Estándar del Este (EST).\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nAtentamente,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("El Personal de J&B Medical Supply\n\n"));


        }

        private void AddEmailAOBCover(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Email: ");
            table.AddCell(_vm.Email);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("READ", _standardBoldFont));
            list.Add(new ListItem("SIGNED", _standardBoldFont));
            list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Email: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at (800) 737-0045.  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));


        }
        private void AddBCNEmailAOBCover(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Attention:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Email: ");
            table.AddCell(_vm.Email);

            doc.Add(table);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPLEASE......." + "\n"));
            //iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            //list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            //list.IndentationLeft = 20f;     // Indent the list 20 points
            //list.Add(new ListItem("READ", _standardBoldFont));
            //list.Add(new ListItem("SIGNED", _standardBoldFont));
            //list.Add(new ListItem("RETURN form by: \n\n", _standardBoldFont));

            //RomanList maillist = new RomanList(true, 20);
            //maillist.IndentationLeft = 10f;
            //maillist.Add(new ListItem("\tMail: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            //maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            //Paragraph P1 = new Paragraph();
            //Chunk P1C1 = new Chunk("Email: ", _standardFont);

            //P1.Add(P1C1);
            //P1.Add(JBDocs);
            //ListItem docs = new ListItem(P1);
            //maillist.Add(docs);

            //Paragraph P2 = new Paragraph();
            //Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            //P2.Add(P1C2);
            //P2.Add(JBPoratalLink);
            //ListItem link = new ListItem(P2);
            //maillist.Add(link);
            //list.Add(maillist);




            //doc.Add(list);  // Add the list to the page



            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nFailure to return may result in a delay of your order \n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nIf you have any questions or concerns, please call our Customer Service Support line at (800) 737-0045.  \n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nWe are available Monday thru Friday 8 AM thru 6 PM EST.\n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSincerely,\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("J&B Medical Supply Staff\n\n"));


        }

        private void AddEmailAOBCover_spanish(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Teléfono: " + phone + "\n Fax: (800)737-0012\n Correo electrónico: Info@jandbmedical.com\n Sitio web: jandbmedical.com\n Portal del miembro: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Atención:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Correo electrónico: ");
            table.AddCell(_vm.Email);

            doc.Add(table);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPor favor......." + "\n"));
            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Lea", _standardBoldFont));
            list.Add(new ListItem("Firme", _standardBoldFont));
            list.Add(new ListItem("Devuelva el formulario a más tardar el: \n\n", _standardBoldFont));

            RomanList maillist = new RomanList(true, 20);
            maillist.IndentationLeft = 10f;
            maillist.Add(new ListItem("\tCorreo postal: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Correo electrónico: ", _standardFont);

            P1.Add(P1C1);
            P1.Add(JBDocs);
            ListItem docs = new ListItem(P1);
            maillist.Add(docs);

            Paragraph P2 = new Paragraph();
            Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            P2.Add(P1C2);
            P2.Add(JBPoratalLink);
            ListItem link = new ListItem(P2);
            maillist.Add(link);
            list.Add(maillist);




            doc.Add(list);  // Add the list to the page



            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSi no devuelve el formulario puede haber retrasos en su pedido. \n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nSi tiene alguna pregunta o inquietud, llame a nuestra línea de Atención al Cliente al " + phone + ".  \n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nEstamos disponibles de lunes a viernes de 8 am a 6 pm, Hora Estándar del Este (EST).\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nAtentamente,\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("El Personal de J&B Medical Supply\n\n"));


        }

        private void AddBCNEmailAOBCover_spanish(iTextSharp.text.Document doc, GeneratorModel _vm)
        {

            doc.NewPage();
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";

            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _standardBoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _standardBoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";
            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Teléfono: " + phone + "\n Fax: (800)737-0012\n Correo electrónico: Info@jandbmedical.com\n Sitio web: jandbmedical.com\n Portal del miembro: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.ElementMerge.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));

            PdfPTable table = new PdfPTable(2);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f, 100f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("Atención:");
            table.AddCell(_vm.details.firstName);
            table.AddCell("Correo electrónico: ");
            table.AddCell(_vm.Email);

            doc.Add(table);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _largeFont, new Chunk("\n\nPor favor......." + "\n"));
            //iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            //list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            //list.IndentationLeft = 20f;     // Indent the list 20 points
            //list.Add(new ListItem("Lea", _standardBoldFont));
            //list.Add(new ListItem("Firme", _standardBoldFont));
            //list.Add(new ListItem("Devuelva el formulario a más tardar el: \n\n", _standardBoldFont));

            //RomanList maillist = new RomanList(true, 20);
            //maillist.IndentationLeft = 10f;
            //maillist.Add(new ListItem("\tCorreo postal: 50496 West Pontiac Trail Wixom, MI 48393", _standardFont));
            //maillist.Add(new ListItem("\tFax: 800.737.0012", _standardFont));

            //Paragraph P1 = new Paragraph();
            //Chunk P1C1 = new Chunk("Correo electrónico: ", _standardFont);

            //P1.Add(P1C1);
            //P1.Add(JBDocs);
            //ListItem docs = new ListItem(P1);
            //maillist.Add(docs);

            //Paragraph P2 = new Paragraph();
            //Chunk P1C2 = new Chunk("Portal: ", _standardFont);

            //P2.Add(P1C2);
            //P2.Add(JBPoratalLink);
            //ListItem link = new ListItem(P2);
            //maillist.Add(link);
            //list.Add(maillist);




            //doc.Add(list);  // Add the list to the page



            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nSi no devuelve el formulario puede haber retrasos en su pedido. \n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nSi tiene alguna pregunta o inquietud, llame a nuestra línea de Atención al Cliente al " + phone + ".  \n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\nEstamos disponibles de lunes a viernes de 8 am a 6 pm, Hora Estándar del Este (EST).\n"));


            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("\n\nAtentamente,\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("El Personal de J&B Medical Supply\n\n"));


        }
        private void AddBlackPage(iTextSharp.text.Document doc)
        {

            doc.NewPage();
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("\n\n"));



        }

        private iTextSharp.text.Document AddBarCode(iTextSharp.text.Document doc)
        {
            PdfPTable table = new PdfPTable(1);
            table.WidthPercentage = 20;
            float[] width = new float[] { 65f };
            table.SetWidths(width);
            table.DefaultCell.Border = Rectangle.NO_BORDER;
            table.AddCell(image39);
            doc.Add(table);
            return doc;
        }
        private void AddMCRStandards(iTextSharp.text.Document doc)
        {
            doc.NewPage();
            //Add Bar code :pradeep 04/21/2020

            //   doc = AddBarCode(doc);
            //end
            // Write page content.  Note the use of fonts and alignment attributes.
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldUnderlineFont, new iTextSharp.text.Chunk("MEDICARE DMEPOS SUPPLIER STANDARDS"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("\nNote:  This is an abbreviated version of the supplier standards every Medicare DMEPOS supplier must meet in order to obtain and retain their billing privileges. These standards, in their entirety, are listed in 42 C.F.R. 424.57(c).\n\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem("A supplier must be in compliance with all applicable Federal and State licensure and regulatory requirements.", _Font10Font));
            //2
            list.Add(new ListItem("A supplier must provide complete and accurate information on the DMEPOS supplier application. Any changes to this information must be reported to the National Supplier Clearinghouse within 30 days.", _Font10Font));
            //3
            list.Add(new ListItem("A supplier must have an authorized individual (whose signature is binding) sign the enrollment application for billing privileges.", _Font10Font));
            //4
            list.Add(new ListItem("A supplier must fill orders from its own inventory, or contract with other companies for the purchase of items necessary to fill orders. A supplier may not contract with any entity that is currently excluded from the Medicare program, any State health care programs, or any other Federal procurement or non-procurement programs.", _Font10Font));
            //5
            list.Add(new ListItem("A supplier must advise beneficiaries that they may rent or purchase inexpensive or routinely purchased durable medical equipment, and of the purchase option for capped rental equipment.", _Font10Font));
            //6
            list.Add(new ListItem("A supplier must notify beneficiaries of warranty coverage and honor all warranties under applicable State law, and repair or replace free of charge Medicare covered items that are under warranty.", _Font10Font));
            //7
            list.Add(new ListItem("A supplier must maintain a physical facility on an appropriate site and must maintain a visible sign with posted hours of operation. The location must be accessible to the public and staffed during posted hours of business. The location must be at least 200 square feet and contain space for storing records.", _Font10Font));
            //8
            list.Add(new ListItem("A supplier must permit CMS or its agents to conduct on-site inspections to ascertain the supplier’s compliance with these standards.", _Font10Font));
            //9
            list.Add(new ListItem("A supplier must maintain a primary business telephone listed under the name of the business in a local directory or a toll free number available through directory assistance. The exclusive use of a beeper, answering machine, answering service or cell phone during posted business hours is prohibited.", _Font10Font));
            //10
            list.Add(new ListItem("  A supplier must have comprehensive liability insurance in the amount of at least $300,000 that covers both the supplier’s place of business and all customers and employees of the supplier. If the supplier manufactures its own items, this insurance must also cover product liability and completed operations.", _Font10Font));
            //11
            list.Add(new ListItem("  A supplier is prohibited from direct solicitation to Medicare beneficiaries. For complete details on this prohibition see 42 CFR§ 424.57(c)(11).", _Font10Font));
            //12
            list.Add(new ListItem("  A supplier is responsible for delivery of and must instruct beneficiaries on the use of Medicare covered items, and maintain proof of delivery and beneficiary instruction.", _Font10Font));
            //13
            list.Add(new ListItem("  A supplier must answer questions and respond to complaints of beneficiaries, and maintain documentation of such contacts.", _Font10Font));
            //14
            list.Add(new ListItem("  A supplier must maintain and replace at no charge or repair cost either directly, or through a service contract with another company, any Medicare-covered items it has rented to beneficiaries.", _Font10Font));
            //15
            list.Add(new ListItem("  A supplier must accept returns of substandard (less than full quality for the particular item) or unsuitable items (inappropriate for the beneficiary at the time it was fitted and rented or sold) from beneficiaries.", _Font10Font));
            //16
            list.Add(new ListItem("  A supplier must disclose these standards to each beneficiary it supplies a Medicare-covered item.", _Font10Font));
            //17
            list.Add(new ListItem("  A supplier must disclose any person having ownership, financial, or control interest in the supplier.", _Font10Font));
            //18
            list.Add(new ListItem("  A supplier must not convey or reassign a supplier number; i.e., the supplier may not sell or allow another entity to use its Medicare billing number.", _Font10Font));
            //19
            list.Add(new ListItem("  A supplier must have a complaint resolution protocol established to address beneficiary complaints that relate to these standards. A record of these complaints must be maintained at the physical facility.", _Font10Font));
            //20
            list.Add(new ListItem("  Complaint records must include: the name, address, telephone number and health insurance claim number of the beneficiary, a summary of the complaint, and any actions taken to resolve it.", _Font10Font));
            //21
            list.Add(new ListItem("  A supplier must agree to furnish CMS any information required by the Medicare statute and regulations.", _Font10Font));
            //22
            list.Add(new ListItem("  All suppliers must be accredited by a CMS-approved accreditation organization in order to receive and retain a supplier billing number. The accreditation must indicate the specific products and services, for which the supplier is accredited in order for the supplier to receive payment for those specific products and services (except for certain exempt pharmaceuticals).", _Font10Font));
            //23
            list.Add(new ListItem("  All suppliers must notify their accreditation organization when a new DMEPOS location is opened.", _Font10Font));
            //24
            list.Add(new ListItem("  All supplier locations, whether owned or subcontracted, must meet the DMEPOS quality standards and be separately accredited in order to bill Medicare.", _Font10Font));
            //25
            list.Add(new ListItem("  All suppliers must disclose upon enrollment all products and services, including the addition of new product lines for which they are seeking accreditation.", _Font10Font));
            //26
            list.Add(new ListItem("  A supplier must meet the surety bond requirements specified in 42 CFR § 424.57 (d).", _Font10Font));
            //27
            list.Add(new ListItem("  A supplier must obtain oxygen from a state-licensed oxygen supplier", _Font10Font));
            //28
            list.Add(new ListItem("  A supplier must maintain ordering and referring documentation consistent with provisions found in 42 CFR § 424.516(f).", _Font10Font));
            //29
            list.Add(new ListItem("  A supplier is prohibited from sharing a practice location with other Medicare providers and suppliers.", _Font10Font));
            //30
            list.Add(new ListItem("  A supplier must remain open to the public for a minimum of 30 hours per week except physicians (as defined in section 1848(j)(3) of the Act) or physical and occupational therapists or a DMEPOS supplier working with custom made orthotics and prosthetics.", _Font10Font));
            doc.Add(list);  // Add the list to the page

            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new iTextSharp.text.Chunk("\nPalmetto GBA\n"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new iTextSharp.text.Chunk("National Supplier Clearinghouse\n"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new iTextSharp.text.Chunk("P.O. Box 100142 ~ Columbia, South Carolina ~ 29202-3142 ~ (866) 238-9652\n"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new iTextSharp.text.Chunk("A CMS Contracted Intermediary and Carrier\n"));


        }

        private void AddMCRStandards_spanish(iTextSharp.text.Document doc)
        {
            doc.NewPage();
            // Write page content.  Note the use of fonts and alignment attributes.
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldUnderlineFont, new iTextSharp.text.Chunk("NORMAS DE PROVEEDORES DE EQUIPO MÉDICO DURADERO, APARATOS "));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldUnderlineFont, new iTextSharp.text.Chunk("PROTÉSICOS, ORTOPÉDICOS Y SUMINISTROS"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("\nNota: Esta es una versión abreviada de las normas de proveedores que todo proveedor de equipo médico duradero, aparatos protésicos, ortopédicos y suministros (DMEPOS por su sigla en inglés) debe cumplir con objeto de obtener y conservar sus privilegios de facturación. Estas normas se encuentran estipuladas en su totalidad en la Sección 424.57(c)  del capítulo 42 del Código de Reglamentos Federales (C.F.R.).\n\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem("Todo proveedor debe cumplir con todas las exigencias normativas y las licencias correspondientes a nivel estatal y federal.", _Font10Font));
            //2
            list.Add(new ListItem("Todo proveedor debe indicar en la solicitud de proveedor DMEPOS información completa y exacta. Todo cambio en esta información debe informarse al Centro de Coordinación Nacional de Proveedores (National Supplier Clearinghouse) en un plazo de 30 días.", _Font10Font));
            //3
            list.Add(new ListItem("Cada proveedor debe nombrar a una persona autorizada (cuya firma creará obligaciones) para que firme la solicitud de inscripción a los privilegios de facturación.", _Font10Font));
            //4
            list.Add(new ListItem("Cada proveedor deberá surtir los pedidos de su inventario propio, o bien contratar a otras compañías para comprar los artículos necesarios para surtir los pedidos. Ningún proveedor podrá contratar a otra entidad que actualmente esté excluida del programa Medicare, cualquier programa estatal de atención sanitaria o cualquier otro programa federal, sea o no de aprovisionamiento de suministros.", _Font10Font));
            //5
            list.Add(new ListItem("Los proveedores deberán dar aviso a los beneficiarios sobre la posibilidad que se les brinda de alquilar o comprar el equipo médico duradero de bajo costo o de adquisición periódica, así como de la opción de compra del equipo alquilado por un plazo tope establecido.", _Font10Font));
            //6
            list.Add(new ListItem("Los proveedores deben notificar a los beneficiarios la cobertura de la garantía y respetar todas las garantías establecidas por la ley estatal que corresponda, así como reparar o reemplazar sin costo los artículos cubiertos por Medicare que estén amparados por dicha garantía.", _Font10Font));
            //7
            list.Add(new ListItem("Todo proveedor deberá contar con un local físico en un sitio adecuado y mantener publicado un letrero visible con los horarios de operación. El local deberá ser accesible al público y estar dotado de personal durante el horario de operación. El local deberá tener al menos 200 pies cuadrados de superficie y contar con espacio para guardar archivos.", _Font10Font));
            //8
            list.Add(new ListItem("Los proveedores deben permitir que CMS y sus agentes realicen inspecciones del local para determinar si el proveedor cumple con estas normas.", _Font10Font));
            //9
            list.Add(new ListItem("Los proveedores deben publicar en un directorio local su nombre comercial y un número telefónico comercial principal, o bien un número gratuito que esté disponible a través del servicio de asistencia de operadora de directorio. Está prohibido que durante el horario de operaciones el proveedor use exclusivamente un localizador, una máquina contestadora telefónica, un servicio de respuesta automático o un teléfono celular. ", _Font10Font));
            //10
            list.Add(new ListItem("  Todo proveedor debe contar con un seguro de responsabilidad civil completo por un monto mínimo de $300,000 que cubra tanto el local comercial del proveedor como a todos los clientes y empleados de este. En caso de que el proveedor fabrique sus propios artículos, dicho seguro también debe cubrirlo por responsabilidad civil sobre el producto y las operaciones completadas.", _Font10Font));
            //11
            list.Add(new ListItem("  A todo proveedor se le prohíbe promoverse comercialmente en forma directa con los beneficiarios de Medicare. Para consultar todos los detalles de esta prohibición consulte la Sección 424.57 (c) (11) del capítulo 42 del CFR.", _Font10Font));
            //12
            list.Add(new ListItem("  Todo proveedor es responsable de la entrega de los artículos cubiertos por Medicare y de instruir al beneficiario para su uso, así como conservar constancia de la entrega y la instrucción proporcionada al beneficiario.", _Font10Font));
            //13
            list.Add(new ListItem("  Los proveedores deben contestar las preguntas y responder las quejas de los beneficiarios, así como conservar la documentación de dichos contactos.", _Font10Font));
            //14
            list.Add(new ListItem("  Los proveedores deben mantener y reemplazar si cargo ni costo de reparación los artículos cubiertos por Medicare que han alquilado a los beneficiarios; podrán hacerlo en forma directa o a través de un contrato de servicio con otra compañía.", _Font10Font));
            //15
            list.Add(new ListItem("  Todo proveedor debe aceptar de los beneficiarios las devoluciones de artículos que no satisfagan las normas (con calidad menor a la calidad total del artículo en cuestión) o los artículos no aptos (no adecuados para el beneficiario al momento en que se le adaptó y se le alquiló o vendió).", _Font10Font));
            //16
            list.Add(new ListItem("  Los proveedores deben revelar estas normas a cada beneficiario al que suministren un artículo cubierto por Medicare.", _Font10Font));
            //17
            list.Add(new ListItem("  Los proveedores deben revelar el nombre de toda persona o entidad que sea titular o tenga una participación financiera o de control sobre el proveedor.", _Font10Font));
            //18
            list.Add(new ListItem("  Los proveedores no deben transferir ni ceder su número de proveedor, es decir, no podrán vender ni permitir que otra entidad utilice su número de facturación de Medicare.", _Font10Font));
            //19
            list.Add(new ListItem("  Los proveedores deben contar con un protocolo establecido para la resolución de quejas, mediante el cual abordarán las quejas de los beneficiarios relacionadas con estas normas. Deberá conservarse en el local físico un registro de estas quejas.", _Font10Font));
            //20
            list.Add(new ListItem("  Los registros de quejas deberán incluir: el nombre, la dirección, el número telefónico y el número de reclamo de seguro médico del beneficiario, un resumen de la queja y las acciones emprendidas para resolverla.", _Font10Font));
            //21
            list.Add(new ListItem("  Los proveedores deben consentir la entrega a CMS de toda información establecida por las leyes y regulaciones de Medicare.", _Font10Font));
            //22
            list.Add(new ListItem("  Para recibir y conservar un número de facturación de proveedor, todo proveedor debe estar acreditado por una organización de acreditación aprobada por CMS. La acreditación deberá indicar los productos y servicios específicos para los cuales se acredita al proveedor con el fin de que este reciba el pago por esos productos y servicios específicos (excepto en el caso de determinados productos farmacéuticos exentos).", _Font10Font));
            //23
            list.Add(new ListItem("  Todos los proveedores deben notificar el nombre de la organización de acreditación cada vez que abran un nuevo local de DMEPOS.", _Font10Font));
            //24
            list.Add(new ListItem("  Todos los locales del proveedor, sean de su propiedad o subcontratados, deberán cumplir con todas las normas de calidad y contar con una acreditación por separado con el fin de facturar a Medicare.", _Font10Font));
            //25
            list.Add(new ListItem("  Todos los proveedores, al inscribirse para la acreditación, deben revelar todos los productos y servicios para los cuales solicitan la acreditación, incluidas las líneas de productos nuevos o añadidos.", _Font10Font));
            //26
            list.Add(new ListItem("  Los proveedores deben cumplir con el requisito de fianza especificado en la Sección 424.57 (d) del capítulo 42 del CFR. ", _Font10Font));
            //27
            list.Add(new ListItem("  Los proveedores deben obtener el oxígeno de un proveedor de oxígeno autorizado por el estado.", _Font10Font));
            //28
            list.Add(new ListItem("  Los proveedores deben conservar la documentación de los pedidos y las remisiones en forma coherente con las disposiciones de la Sección 424.516(f) del capítulo 42 del CFR.", _Font10Font));
            //29
            list.Add(new ListItem("  Se prohíbe a los proveedores compartir un local profesional con otros proveedores de Medicare.", _Font10Font));
            //30
            list.Add(new ListItem("  Los proveedores deben abrir al público durante al menos 30 horas a la semana, excepto los médicos (de conformidad con la definición de la Sección 1848(j).(3) de la Ley) o los fisioterapeutas y terapeutas ocupacionales o proveedores de DMEPOS que trabajen con aparatos protésicos u ortopédicos hechos a la medida.", _Font10Font));
            doc.Add(list);  // Add the list to the page

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new iTextSharp.text.Chunk("\nPalmetto GBA\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new iTextSharp.text.Chunk("National Supplier Clearinghouse\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new iTextSharp.text.Chunk("P.O. Box 100142 ~ Columbia, South Carolina ~ 29202-3142 ~ (866) 238-9652\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new iTextSharp.text.Chunk("A CMS Contracted Intermediary and Carrier\n"));


        }
        private void AddMCRStandards_spanish_New(iTextSharp.text.Document doc)
        {
            doc.NewPage();
            // Write page content.  Note the use of fonts and alignment attributes.
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldUnderlineFont, new iTextSharp.text.Chunk("NORMAS PARA LOS PROVEEDORES DE DMEPOS DE MEDICARE"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldUnderlineFont, new iTextSharp.text.Chunk("PROTÉSICOS, ORTOPÉDICOS Y SUMINISTROS"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("\nNota: Esta es una versión abreviada de las normas para los proveedores que cada proveedor de equipos médicos duraderos, prótesis, aparatos ortopédicos y otros suministros médicos (DMEPOS, por sus siglas en inglés) de Medicare debe cumplir para obtener y conservar sus privilegios de facturación. Estas normas, en su totalidad, se encuentran en el Título 42 C.F.R. 424.57(c) del Código de Regulaciones Federales.\n\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem("Un proveedor debe cumplir con todas las licencias y requisitos reglamentarios aplicables federales y estatales.", _Font10Font));
            //2
            list.Add(new ListItem("Un proveedor debe proporcionar información completa y precisa sobre la solicitud de proveedor de DMEPOS. Deben comunicarse todos los cambios en esta información al National Supplier Clearinghouse (Centro Nacional de Coordinación de Proveedores) en un plazo de 30 días.", _Font10Font));
            //3
            list.Add(new ListItem("Un proveedor debe tener una persona autorizada (cuya firma es vinculante) para que firme la solicitud de inscripción para los privilegios de facturación.", _Font10Font));
            //4
            list.Add(new ListItem("Un proveedor debe completar los pedidos de su propio inventario o contratar con otras compañías para la adquisición de los artículos necesarios para completar los pedidos. Un proveedor no puede contratar con ninguna entidad que se encuentre actualmente excluida del programa de Medicare, con ningún programa estatal de atención de la salud, ni con ningún otro programa federal de adquisiciones o no adquisiciones.", _Font10Font));
            //5
            list.Add(new ListItem("Un proveedor debe informar a los beneficiarios que pueden alquilar o comprar equipos médicos duraderos económicos o que se adquieren habitualmente, y también debe informarles sobre la opción de compra de equipos en alquiler que entren en la categoría de “capped”.", _Font10Font));
            //6
            list.Add(new ListItem("Un proveedor debe notificar a los beneficiarios sobre la cobertura de la garantía y cumplir con todas las garantías según las leyes estatales aplicables, así como reparar o reemplazar sin ningún costo los artículos cubiertos por Medicare que tengan garantía.", _Font10Font));
            //7
            list.Add(new ListItem("Un proveedor debe mantener una instalación física en un lugar apropiado y un aviso visible con el horario de atención publicado. El lugar debe ser accesible al público y debe contar con personal durante el horario de oficina publicado. Asimismo, debe tener por lo menos 200 pies cuadrados (19 metros cuadrados) y contar con espacio para almacenar los registros.", _Font10Font));
            //8
            list.Add(new ListItem("Un proveedor debe permitir al Centro de Servicios de Medicare y Medicaid (CMS, por sus siglas en inglés) o a sus agentes realizar inspecciones en el sitio para verificar que el proveedor cumpla con estas normas.", _Font10Font));
            //9
            list.Add(new ListItem("Un proveedor debe mantener un número de teléfono de negocios principal que aparezca debajo del nombre del negocio en un directorio telefónico local, o un número de llamadas gratuitas disponible a través del servicio de asistencia telefónica. Está prohibido el uso exclusivo de un buscapersonas, máquina contestadora, servicio de respuesta o teléfono celular durante el horario de oficina publicado.", _Font10Font));
            //10
            list.Add(new ListItem(" Un proveedor debe tener un seguro de responsabilidad general por un monto de por lo menos $300.000 que cubra tanto el lugar de negocios del proveedor, como a todos los clientes y empleados del proveedor. Si el proveedor fabrica sus propios artículos, este seguro también debe cubrir la responsabilidad por los productos y por las operaciones completadas.", _Font10Font));
            //11
            list.Add(new ListItem(" Está prohibido que un proveedor realice ofrecimientos directos a los beneficiarios de Medicare. Para conocer los detalles completos de esta prohibición, consulte el Título 42 CFR§ 424.57(c)(11) del Código de Regulaciones Federales.", _Font10Font));
            //12
            list.Add(new ListItem(" Un proveedor es responsable del suministro a los beneficiarios y debe entrenarlos en el uso de los artículos cubiertos por Medicare, así como conservar una prueba de la entrega y de la instrucción proporcionada a los beneficiarios.", _Font10Font));
            //13
            list.Add(new ListItem(" Un proveedor debe responder a las preguntas y contestar las quejas de los beneficiarios, así como mantener la documentación de dichos contactos.", _Font10Font));
            //14
            list.Add(new ListItem(" Un proveedor debe mantener y reemplazar sin cargo o reponer el costo, ya sea directamente o a través de un contrato de servicios con otra compañía, de todos los artículos cubiertos por Medicare que hubiera alquilado a los beneficiarios.", _Font10Font));
            //15
            list.Add(new ListItem(" Un proveedor debe aceptar las devoluciones de artículos de calidad inferior (que tienen una calidad menor que la calidad óptima de un artículo particular) o artículos inadecuados (inapropiados para el beneficiario al momento en que se entregó, alquiló o vendió) por parte de los beneficiarios.", _Font10Font));
            //16
            list.Add(new ListItem(" Un proveedor debe divulgar estas normas a cada beneficiario al que suministra un artículo cubierto por Medicare", _Font10Font));
            //17
            list.Add(new ListItem(" Un proveedor debe informar sobre toda persona que tenga participación accionarial, interés financiero o interés de control en el proveedor.", _Font10Font));
            //18
            list.Add(new ListItem(" Un proveedor no debe comunicar ni reasignar un número de proveedor; es decir, el proveedor no puede vender ni permitir que otra entidad use su número de facturación de Medicare.", _Font10Font));
            //19
            list.Add(new ListItem(" Un proveedor debe tener un protocolo de resolución de quejas establecido para atender las quejas de los beneficiarios que se relacionen con estas normas. Debe conservarse un registro de estas quejas en la instalación física.", _Font10Font));
            //20
            list.Add(new ListItem(" Los registros de las quejas deben incluir: el nombre, la dirección, el número de teléfono y el número de reclamo del seguro de salud del beneficiario, un resumen de la queja y todas las acciones tomadas para resolverla.", _Font10Font));
            //21
            list.Add(new ListItem(" Un proveedor debe acordar que proporcionará a CMS toda información requerida por el estatuto y las regulaciones de Medicare.", _Font10Font));
            //22
            list.Add(new ListItem(" Todos los proveedores deben estar acreditados por una organización de acreditación aprobada por CMS para recibir y mantener un número de facturación de proveedor. La acreditación debe indicar los productos y servicios específicos para los que está acreditado el proveedor, con la finalidad de que el proveedor reciba el pago por esos productos y servicios específicos (excepto ciertos productos farmacéuticos exentos).", _Font10Font));
            //23
            list.Add(new ListItem(" Todos los proveedores deben notificar a su organización de acreditación cuando se abra un nuevo local de DMEPOS.", _Font10Font));
            //24
            list.Add(new ListItem(" Todas las ubicaciones del proveedor, ya sean de su propiedad o subcontratadas, deben cumplir con los estándares de calidad de DMEPOS y deben acreditarse independientemente, para fines de facturar a Medicare.", _Font10Font));
            //25
            list.Add(new ListItem(" Todos los proveedores deben divulgar todos los productos y servicios, luego de la inscripción, incluida la adición de nuevas líneas de productos para las que están buscando acreditación.", _Font10Font));
            //26
            list.Add(new ListItem(" Un proveedor debe cumplir con los requisitos de la fianza de garantía especificados en el Título 42 CFR § 424.57 (d) del Código de Regulaciones Federales.", _Font10Font));
            //27
            list.Add(new ListItem(" Un proveedor debe obtener oxígeno de un proveedor de oxígeno autorizado por el estado.", _Font10Font));
            //28
            list.Add(new ListItem(" Un proveedor debe mantener la documentación de los pedidos y referencias en forma consistente con las disposiciones del Título 42 CFR § 424.516(f) del Código de Regulaciones Federales.", _Font10Font));
            //29
            list.Add(new ListItem(" Está prohibido que un proveedor comparta el lugar donde realiza sus actividades con otros abastecedores y proveedores de Medicare.", _Font10Font));
            //30
            list.Add(new ListItem(" Un proveedor debe permanecer abierto al público por un mínimo de 30 horas por semana, excepto los médicos (como se define en la sección 1848(j)(3) de la Ley), terapeutas físicos u ocupacionales o un proveedor de DMEPOS que trabaje con prótesis y aparatos ortopédicos hechos a la medida.", _Font10Font));
            doc.Add(list);  // Add the list to the page

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new iTextSharp.text.Chunk("\nPalmetto GBA\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new iTextSharp.text.Chunk("National Supplier Clearinghouse\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new iTextSharp.text.Chunk("P.O. Box 100142 ~ Columbia, South Carolina ~ 29202-3142 ~ (866) 238-9652\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new iTextSharp.text.Chunk("A CMS Contracted Intermediary and Carrier\n"));


        }
        private void AddMCRStandards2(iTextSharp.text.Document doc)
        {

            //   doc.NewPage();
            // Write page content.  Note the use of fonts and alignment attributes.
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldUnderlineFont, new iTextSharp.text.Chunk("MEDICARE DMEPOS SUPPLIER STANDARDS"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldUnderlineFont, new iTextSharp.text.Chunk("DMEPOS stands for durable medical equipment, prosthetics, orthotics and supplies"));

            //Add Bar code :pradeep 04/21/2020

            //   doc = AddBarCode(doc);
            //end
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n\nDMEPOS suppliers have the option to disclose the following statement to satisfy the requirement outlined in Supplier Standard 16 in lieu of providing a copy of the standards to the beneficiary.\n\n"));

            Chunk c1 = new Chunk("The products and/or services provided to you by (supplier legal business name or DBA) are subject to the supplier standards contained in the Federal regulations shown at 42 Code of Federal Regulations Section 424.57(c). These standards concern business professional and operational matters (e.g. honoring warranties and hours of operation). The full text of these standards can be obtained at ", _Font10Font);
            Chunk c2 = new Chunk(".Upon request we will furnish you a written copy of the standards.", _Font10Font);

            Anchor ecfrLink = new Anchor("http://ecfr.gpoaccess.gov", _Font10BoldBlueUnderlineFont);
            ecfrLink.Reference = "http://ecfr.gpoaccess.gov";


            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(ecfrLink);
            p1.Add(c2);

            Paragraph P1 = new Paragraph();
            P1.Add(p1);
            doc.Add(P1);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10BoldFont, new iTextSharp.text.Chunk("\nPalmetto GBA\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new iTextSharp.text.Chunk("National Supplier Clearinghouse\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new iTextSharp.text.Chunk("P.O. Box 100142 ~ Columbia, South Carolina ~ 29202-3142 ~ (866) 238-9652\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10BoldFont, new iTextSharp.text.Chunk("A CMS Contracted Intermediary and Carrier\n"));


        }

        private void AddMCRStandards2_Spanish(iTextSharp.text.Document doc)
        {

            //   doc.NewPage();
            // Write page content.  Note the use of fonts and alignment attributes.
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldUnderlineFont, new iTextSharp.text.Chunk("MEDICARE DMEPOS SUPPLIER STANDARDS"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new iTextSharp.text.Chunk("\nNORMAS DE PROVEEDORES DE EQUIPO MÉDICO DURADERO, APARATOS "));
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new iTextSharp.text.Chunk("PROTÉSICOS, ORTOPÉDICOS Y SUMINISTROS"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nLos proveedores de DMEPOS tienen la opción de publicar la siguiente declaración para cumplir con el requisito establecido en la Norma 16 de las Normas de proveedores, en sustitución de la obligación de entregar una copia de las normas al beneficiario.\n\n"));

            Chunk c1 = new Chunk("Los productos y servicios que se le entreguen a usted por parte de (nombre comercial o nombre con el que se le conoce) están sujetos a las normas de proveedores contenidas en la normativa federal incluida en la Sección 424.57(c) del capítulo 42 del Código de Reglamentos Federales. Estas normas cubren aspectos operativos y comerciales del profesional (p. ej., respetar las garantías y los horarios de operación). Puede obtener el texto íntegro de estas normas en ", _Font10Font);
            Chunk c2 = new Chunk(".A petición expresa le proporcionaremos una copia impresa de estas normas.", _Font10Font);

            Anchor ecfrLink = new Anchor("http://ecfr.gpoaccess.gov", _Font10BoldBlueUnderlineFont);
            ecfrLink.Reference = "http://ecfr.gpoaccess.gov";


            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(ecfrLink);
            p1.Add(c2);

            Paragraph P1 = new Paragraph();
            P1.Add(p1);
            doc.Add(P1);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10BoldFont, new iTextSharp.text.Chunk("\nPalmetto GBA\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new iTextSharp.text.Chunk("Centro Nacional de Información de Proveedores\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new iTextSharp.text.Chunk("Apartado postal Box 100142 ~ Columbia,Carolina del Sur ~ ~ 29202-3142(866) 238 a 9652"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10BoldFont, new iTextSharp.text.Chunk("Un intermediario y Carrier CMS Contratado\n"));


        }
        private void AddMCRStandards2_Spanish_New(iTextSharp.text.Document doc)
        {

            //   doc.NewPage();
            // Write page content.  Note the use of fonts and alignment attributes.
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldUnderlineFont, new iTextSharp.text.Chunk("MEDICARE DMEPOS SUPPLIER STANDARDS"));
            //  this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new iTextSharp.text.Chunk("\nNORMAS DE PROVEEDORES DE EQUIPO MÉDICO DURADERO, APARATOS "));
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new iTextSharp.text.Chunk("PROTÉSICOS, ORTOPÉDICOS Y SUMINISTROS"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nLos proveedores de DMEPOS tienen la opción de divulgar la siguiente declaración para cumplir con el requisito resumido en la Norma 16 de los Proveedores, en lugar de proporcionar una copia de las normas al beneficiario.\n\n"));



            Chunk c1 = new Chunk("Los productos y/o servicios que (nombre comercial legal del proveedor o nombre con el que opera) le está proporcionando están sujetos a las normas del proveedor incluidas en las regulaciones federales indicadas en la Sección 424.57(c), Título 42 del Código de Regulaciones Federales. Estas normas se refieren a asuntos comerciales, profesionales y operacionales (por ejemplo, el cumplimiento de las garantías y el horario de atención). Puede obtener el texto completo de estas normas en ", _Font10Font);
            Chunk c2 = new Chunk(". Previa solicitud le proporcionaremos una copia escrita de estas normas.", _Font10Font);

            Anchor ecfrLink = new Anchor("http://ecfr.gpoaccess.gov", _Font10BoldBlueUnderlineFont);
            ecfrLink.Reference = "http://ecfr.gpoaccess.gov";


            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(ecfrLink);
            p1.Add(c2);

            Paragraph P1 = new Paragraph();
            P1.Add(p1);
            doc.Add(P1);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10BoldFont, new iTextSharp.text.Chunk("\nPalmetto GBA\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new iTextSharp.text.Chunk("National Supplier Clearinghouse\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new iTextSharp.text.Chunk("Casilla postal 100142 ~ Columbia, Carolina del Sur ~ 29202-3142 ~ (866) 238-9652"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10BoldFont, new iTextSharp.text.Chunk("Un intermediario y operador contratado de CMS\n"));


        }

        private void AddAOBPrivacy_PTRightsDoc1(iTextSharp.text.Document doc)
        {

            doc.NewPage();
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font8Font, new iTextSharp.text.Chunk("Rev 11-12-2013  "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("Notice of Privacy Practices\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("March 16, 2012\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font11Font, new Chunk("\nThis notice describes how your protected health information (PHI) may be used and disclosed by J & B Medical Supply, and how you can access this information. Please read this notice carefully and keep it for your records.  \n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("To make this document easier to read, please remember that ‘we’ and ‘us’ mean J & B Medical Supply, and ‘you’ refers to the client receiving medical supplies \n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font11Font, new Chunk("J & B Medical Supply is required by Federal and State laws, including the Health Insurance Portability and Accountability Act (HIPAA), to protect the privacy of your PHI. Protected health information includes your name, address, telephone number, date of birth, social security number, insurance information, and medical information. The law does allow us to use and / or disclose your PHI for purposes of treatment and payment. \n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Examples Of Use / Disclosure Of Protected Health Information:"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem("For Treatment: We may use your PHI to provide and coordinate medical supplies and treatments. For example, information obtained by our nursing staff / customer service will be used to supply you with the products you need to take care of your medical condition. ", _Font11Font));
            //2
            list.Add(new ListItem("For Payment: We will use your PHI to acquire payment for the medical supplies that are provided to you. For example, some insurance companies require us to give your primary diagnosis before they will pay us for supplies.", _Font11Font));

            doc.Add(list);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("We May Use Or Disclose Your Health Information For The Following Reasons:\n"));
            iTextSharp.text.List list1 = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list1.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list1.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list1.Add(new ListItem("To communicate with individuals involved in your care or payment for your care: We may disclose certain PHI to a family member, caregiver, case worker, physician, or any other person you identify in order to keep your account information current and active.", _Font11Font));
            //2
            list1.Add(new ListItem("As Required By Law: We will release your PHI when required by law to do so. For example, in the event of an audit or government investigation, we may have to provide records of shipments, billing, and / or prescription coverage.", _Font11Font));
            //3
            list1.Add(new ListItem("If We Suspect Abuse or Neglect: We may disclose your PHI to a government agency if we have reason to suspect that you are a victim of abuse or neglect. We will only disclose enough information to assist the government agency in preventing further abuse or neglect.", _Font11Font));
            //4
            list1.Add(new ListItem("Other Uses / Disclosures: We will obtain your written permission before using or disclosing your PHI for reasons not specified in this brochure (or as permitted / required by law). ", _Font11Font));

            doc.Add(list1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Your Health Information Rights:\n"));
            iTextSharp.text.List list2 = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list2.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list2.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list2.Add(new ListItem("Paper Copy Of The Notice: You may request a copy of our current Notice at any time.", _Font11Font));
            //2
            list2.Add(new ListItem("Obtain A Copy / Request Amendment Of PHI: You have the right to obtain a copy of the PHI that we maintain about you. To do so, you must send a written request to the privacy officer. We may charge a small fee to cover the cost of copying and mailing the information to you. If you think the PHI we have is incorrect, you may request that we update it. To do so, you must send a written request to the privacy officer.  ", _Font11Font));
            //3
            list2.Add(new ListItem("Request Communication Of PHI By Alternative Means: For example, if you would prefer that we contact you on your cell phone, in writing at a certain address, etc. To request confidential communication of your PHI, please send a written request to the privacy officer.", _Font11Font));
            //4
            list2.Add(new ListItem("Where To Obtain Forms For Submitting Written Requests: You may obtain these forms by calling or writing the privacy officer.", _Font11Font));

            doc.Add(list2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("If You Have Any Questions Or Concerns, Or Do Not Understand This Notice:\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Please call us at (800) 737-0045 and ask to speak with our HIPAA Privacy Officer. If you feel your privacy rights have been violated, you can file a complaint with our Privacy Officer or with the Secretary of Health and Human Services. "));
            PdfPTable table3 = new PdfPTable(3);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 80f, 50f, 80f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell1 = new PdfPCell(new Phrase("QUL 4071 ", _Font8Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font12Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("CMN HIP Rev 03/16/12", _Font8Font));
            fCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell3.Border = 0;
            table3.AddCell(fCell3);
            doc.Add(table3);

        }

        private void AddAOBPrivacy_PTRightsDoc1_New(iTextSharp.text.Document doc)
        {

            doc.NewPage();
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font8, new iTextSharp.text.Chunk("Rev 11-12-2013  "));
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("Notice of Privacy Practices\n"));
            //    this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("March 16, 2012\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font14BoldFont, new Chunk("\nJ & B MEDICAL SUPPLY NOTICE OF"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font14BoldFont, new Chunk("PATIENT PRIVACY PRACTICES"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font14BoldFont, new Chunk("Your Information. Your Rights. Our Responsibilities."));

            //  Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);


            Chunk c1 = new Chunk("This notice describes how medical information about you may be used and disclosed and how you can get access to this information. ", _Font12Font);
            Chunk c2 = new Chunk("Please review it carefully.", _Font11BoldFont);

            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(c2);

            Paragraph P1 = new Paragraph();
            P1.Add(p1);
            doc.Add(P1);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nYour Rights\n"));

            Chunk c3 = new Chunk("When it comes to your health information, you have certain rights. ", _Font11BoldFont);
            Chunk c4 = new Chunk("This section explains your rights and some of our responsibilities to help you.", _Font11Font);

            Phrase p2 = new Phrase();
            p2.Add(c3);
            p2.Add(c4);

            Paragraph P2 = new Paragraph();
            P2.Add(p2);
            doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Get an electronic or paper copy of your medical record\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("You can ask to see or get an electronic or paper copy of your medical record and other health information we have about you. Ask us how to do this.", _Font11Font));
            list.Add(new ListItem("We will provide a copy or a summary of your health information, usually within 30 days of your request. We may charge a reasonable, cost-based fee.", _Font11Font));

            doc.Add(list);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Ask us to correct your medical record\n"));

            iTextSharp.text.List list1 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list1.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list1.IndentationLeft = 20f;     // Indent the list 20 points
            list1.Add(new ListItem("You can ask us to correct health information about you that you think is incorrect or incomplete. Ask us how to do this.", _Font12Font));
            list1.Add(new ListItem("We may say “no” to your request, but we’ll tell you why in writing within 60 days.", _Font12Font));

            doc.Add(list1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Request confidential communications\n"));

            iTextSharp.text.List list2 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list2.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list2.IndentationLeft = 20f;     // Indent the list 20 points
            list2.Add(new ListItem("You can ask us to contact you in a specific way (for example, home or office phone) or to send mail to a different address.", _Font12Font));
            list2.Add(new ListItem("We will say “yes” to all reasonable requests.", _Font12Font));

            doc.Add(list2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Ask us to limit what we use or share\n"));

            iTextSharp.text.List list3 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list3.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list3.IndentationLeft = 20f;     // Indent the list 20 points
            list3.Add(new ListItem("You can ask us not to use or share certain health information for treatment, payment, or our operations. We are not required to agree to your request, and we may say “no” if it would affect your care.", _Font12Font));
            list3.Add(new ListItem("If you pay for a service or health care item out-of-pocket in full, you can ask us not to share that information for the purpose of payment or our operations with your health insurer. We will say “yes” unless a law requires us to share that information.", _Font12Font));

            doc.Add(list3);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Get a list of those with whom we’ve shared information\n"));

            iTextSharp.text.List list4 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list4.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list4.IndentationLeft = 20f;     // Indent the list 20 points
            list4.Add(new ListItem("You can ask for a list (accounting) of the times we’ve shared your health information for six years prior to the date you ask, who we shared it with, and why.", _Font12Font));
            list4.Add(new ListItem("We will include all the disclosures except for those about treatment, payment, and health care operations, and certain other disclosures (such as any you asked us to make). We’ll provide one accounting a year for free but will charge a reasonable, cost-based fee if you ask for another one within 12 months.", _Font12Font));

            doc.Add(list4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Get a copy of this privacy notice\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("You can ask for a paper copy of this notice at any time, even if you have agreed to receive the notice electronically. We will provide you with a paper copy promptly.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Choose someone to act for you\n"));

            iTextSharp.text.List list5 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list5.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list5.IndentationLeft = 20f;     // Indent the list 20 points
            list5.Add(new ListItem("If you have given someone medical power of attorney or if someone is your legal guardian, that person can exercise your rights and make choices about your health information.", _Font12Font));
            list5.Add(new ListItem("We will make sure the person has this authority and can act for you before we take any action.", _Font12Font));

            doc.Add(list5);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("File a complaint if you feel your rights are violated\n"));

            iTextSharp.text.List list6 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list6.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list6.IndentationLeft = 20f;     // Indent the list 20 points
            list6.Add(new ListItem("You can complain if you feel we have violated your rights by contacting us using the information on page 3.", _Font11Font));
            list6.Add(new ListItem("You can also file a complaint with the U.S. Department of Health and Human Services Office for Civil Rights.", _Font11Font));
            list6.Add(new ListItem("We will not retaliate against you for filing a complaint.", _Font12Font));
            doc.Add(list6);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nYour Choices\n"));

            Chunk c5 = new Chunk("For certain health information, you can tell us your choices about what we share.", _Font11BoldFont);
            Chunk c6 = new Chunk("If you have a clear preference for how we share your information in the situations described below, talk to us. Tell us what you want us to do, and we will follow your instructions.", _Font11Font);

            Phrase p3 = new Phrase();
            p3.Add(c5);
            p3.Add(c6);

            Paragraph P3 = new Paragraph();
            P3.Add(p3);
            doc.Add(P3);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("In these cases, you have both the right and choice to tell us to:\n"));

            iTextSharp.text.List list7 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list7.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list7.IndentationLeft = 20f;     // Indent the list 20 points
            list7.Add(new ListItem("Share information with your family, close friends, or others involved in your care", _Font11Font));
            list7.Add(new ListItem("Share information in a disaster relief situation", _Font11Font));
            list7.Add(new ListItem("Include your information in a hospital directory", _Font11Font));
            doc.Add(list7);

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_MIDDLE, _Font11ItalicFont, new Chunk("If you are not able to tell us your preference, for example if you are unconscious, we may go ahead and share your information if we believe it is in your best interest. We may also share your information when needed to lessen a serious and imminent threat to health or safety.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("In these cases we never share your information unless you give us written permission:\n"));

            iTextSharp.text.List list8 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list8.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list8.IndentationLeft = 20f;     // Indent the list 20 points
            list8.Add(new ListItem("Marketing purposes", _Font11Font));
            list8.Add(new ListItem("Sale of your information", _Font11Font));
            list8.Add(new ListItem("Most sharing of psychotherapy notes", _Font11Font));
            doc.Add(list8);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("In the case of fundraising:\n"));

            iTextSharp.text.List list9 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list9.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list9.IndentationLeft = 20f;     // Indent the list 20 points
            list9.Add(new ListItem("We may contact you for fundraising efforts, but you can tell us not to contact you again.", _Font12Font));

            doc.Add(list9);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nOur Uses and Disclosures\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("How do we typically use or share your health information?\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We typically use or share your health information in the following ways.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Treat you\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We can use your health information and share it with other professionals who are treating you.\n"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11ItalicFont, new Chunk("Example: A doctor treating you for an injury asks another doctor about your overall health condition.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Run our organization\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We can use and share your health information to run our practice, improve your care, and contact you when necessary.\n"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11ItalicFont, new Chunk("Example: We use health information about you to manage your treatment and services.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Bill for your services\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We can use and share your health information to bill and get payment from health plans or other entities.\n"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11ItalicFont, new Chunk("Example: We give information about you to your health insurance plan so it will pay for your services.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nHow else can we use or share your health information?\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We are allowed or required to share your information in other ways – usually in ways that contribute to the public good, such as public health and research. We have to meet many conditions in the law before we can share your information for these purposes. For more information see:\n"));

            Anchor HippaLink = new Anchor("www.hhs.gov/ocr/privacy/hipaa/understanding/consumers/index.html.", _standardBoldBlueUnderlineFont);
            HippaLink.Reference = "http://www.hhs.gov/ocr/privacy/hipaa/understanding/consumers/index.html";

            Paragraph P4 = new Paragraph();


            P4.Add(HippaLink);

            doc.Add(P4);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Help with public health and safety issues\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We can share health information about you for certain situations such as:\n"));


            iTextSharp.text.List list91 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list91.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list91.IndentationLeft = 20f;     // Indent the list 20 points
            list91.Add(new ListItem("Preventing disease", _Font11Font));
            list91.Add(new ListItem("Helping with product recalls", _Font11Font));
            list91.Add(new ListItem("Reporting adverse reactions to medications", _Font11Font));
            list91.Add(new ListItem("Reporting suspected abuse, neglect, or domestic violence", _Font11Font));
            list91.Add(new ListItem("Preventing or reducing a serious threat to anyone’s health or safety", _Font11Font));
            doc.Add(list91);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Do research\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We can use or share your information for health research.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Comply with the law\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We will share information about you if state or federal laws require it, including with the Department of Health and Human Services if it wants to see that we’re complying with federal privacy law.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Respond to organ and tissue donation requests\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We can share health information about you with organ procurement organizations.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Work with a medical examiner or funeral director\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We can share health information with a coroner, medical examiner, or funeral director when an individual dies.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Address workers’ compensation, law enforcement, and other government requests\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We can use or share health information about you:\n"));

            iTextSharp.text.List list10 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list10.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list10.IndentationLeft = 20f;     // Indent the list 20 points
            list10.Add(new ListItem("For workers’ compensation claims", _Font11Font));
            list10.Add(new ListItem("For law enforcement purposes or with a law enforcement official", _Font11Font));
            list10.Add(new ListItem("With health oversight agencies for activities authorized by law", _Font11Font));
            list10.Add(new ListItem("For special government functions such as military, national security, and presidential protective services", _Font11Font));

            doc.Add(list10);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Respond to lawsuits and legal actions\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We can share health information about you in response to a court or administrative order, or in response to a subpoena.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nOur Responsibilities\n"));

            iTextSharp.text.List list11 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list11.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list11.IndentationLeft = 20f;     // Indent the list 20 points
            list11.Add(new ListItem("We are required by law to maintain the privacy and security of your protected health information.", _Font11Font));
            list11.Add(new ListItem("We will let you know promptly if a breach occurs that may have compromised the privacy or security of your information.", _Font11Font));
            list11.Add(new ListItem("We must follow the duties and privacy practices described in this notice and give you a copy of it.", _Font11Font));
            list11.Add(new ListItem("We will not use or share your information other than as described here unless you tell us we can in writing. If you tell us we can, you may change your mind at any time. Let us know in writing if you change your mind.", _Font11Font));

            doc.Add(list11);
            Anchor HippanoticeLink = new Anchor("www.hhs.gov/ocr/privacy/hipaa/understanding/consumers/noticepp.html.", _standardBoldBlueUnderlineFont);
            HippanoticeLink.Reference = "http://www.hhs.gov/ocr/privacy/hipaa/understanding/consumers/noticepp.html";

            Chunk c7 = new Chunk("For more information see:", _Font11Font);

            Phrase p4 = new Phrase();
            p4.Add(c7);
            p4.Add(HippanoticeLink);

            Paragraph P5 = new Paragraph();
            P5.Add(p4);
            doc.Add(P5);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nChanges to the Terms of this Notice\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("We can change the terms of this notice, and the changes will apply to all information we have about you. The new notice will be available upon request, in our office, and on our web site.\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nFor questions, please contact J & B’s privacy official, Ray Zak, at 800-737-0045 ext. 119 , or compliance@jandbmedical.com.\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\nThis Notice is effective as of September 1, 2015\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\n "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10BoldFont, new Chunk("Suggestions or Complaints "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10BoldFont, new Chunk("We value your suggestions and will work hard to resolve any complaints. You may direct your suggestions or complaints to the Customer Relations Department (800) 737-0045 or contact us on line at i nfo@jandbmedical.com. All complaints will be handled in a professional and confidential manner. All logged complaints will be investigated, acted upon, and responded to in writing or by telephone by a supervisor within a reasonable amount of time after the receipt of the complaint. If there is no satisfactory resolution of the complaint, the next level of management will be notified. All complaints are reviewed by the quarterly by the Quality Improvement team and are kept confidential. In the event that your complaint is not resolved to your satisfaction after contacting J&B, you can contact our accrediting organization – The Compliance Team at (888) 291-5353.  "));


        }
        private void AddAOBPrivacy_PTRightsDoc1_spanish(iTextSharp.text.Document doc)
        {

            doc.NewPage();
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font8Font, new iTextSharp.text.Chunk("Rev 11-12-2013  "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("Aviso de Prácticas de Privacidad\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("16 de marzo de 2012\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font10Font, new Chunk("\nEn este aviso se describe la forma en la que J & B Medical Supply podría utilizar y divulgar su información de salud protegida (protected health information, PHI) y la forma en la que usted puede tener acceso a dicha información. Sírvase leer este aviso con detenimiento y guardarlo para sus archivos.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font11BoldFont, new Chunk("Para que pueda leer con facilidad este documento, recuerde que al hablar de “nosotros” y “nuestro” nos referimos a J & B Medical Supply, y al hablar de “usted” y “su” nos referimos al cliente que recibe los suministros médicos.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font10Font, new Chunk("Las leyes estatales y federales, que incluyen la Ley de Portabilidad y Responsabilidad de los Seguros de Salud (Health Insurance Portability and Accountability Act, HIPAA) exigen que J & B Medical Supply proteja la privacidad de su información de salud protegida o PHI. La información de salud protegida incluye su nombre, dirección, número telefónico, fecha de nacimiento, número de seguro social, información de seguro e información médica. La ley nos permite que utilicemos o divulguemos su PHI para fines de tratamiento y pago. \n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Ejemplos del uso y la divulgación de la información de salud protegida:"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem("Para fines de tratamiento: Podemos usar su PHI para brindar y coordinar tratamientos y suministros médicos. Por ejemplo, la información que obtiene nuestro personal de enfermería o de atención al cliente se utilizará para suministrarle a usted los productos que necesita para atender su afección médica. ", _Font10Font));
            //2
            list.Add(new ListItem("Para fines de pago: Usaremos su PHI para obtener el pago de los suministros médicos que le entregamos a usted. Por ejemplo, algunas compañías aseguradoras nos exigen que les entreguemos el diagnóstico primario de usted antes de que nos paguen por los suministros.", _Font10Font));

            doc.Add(list);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Podríamos usar o divulgar su información de salud protegida por las siguientes razones:\n"));
            iTextSharp.text.List list1 = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list1.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list1.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list1.Add(new ListItem("Para comunicarnos con las personas que participan en su atención o el pago por su atención: Podríamos divulgar parte de su PHI a un familiar, cuidador, trabajador social, médico u otra persona que usted nombre para que mantenga la información de su cuenta actualizada y activa.", _Font10Font));
            //2
            list1.Add(new ListItem("En los casos que la ley lo exija: Divulgaremos su PHI cuando la ley nos exija hacerlo. Por ejemplo, en caso de una auditoría o investigación gubernamental nos veremos obligados a proporcionar los registros de envíos, facturación o cobertura de la receta.", _Font10Font));
            //3
            list1.Add(new ListItem("En casos donde tengamos la sospecha de maltrato o negligencia: Podríamos divulgar su PHI a una entidad gubernamental si tenemos razones para sospechar que usted es víctima de maltrato o negligencia. Divulgaremos exclusivamente la información que sea suficiente para ayudar a la entidad gubernamental a prevenir el maltrato o la negligencia.", _Font10Font));
            //4
            list1.Add(new ListItem("Otros usos y divulgaciones: Antes de usar o divulgar su PHI por razones no especificadas en este folleto (o en una forma autorizada o exigida por la ley), obtendremos el permiso de usted por escrito. ", _Font10Font));

            doc.Add(list1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Los derechos que tiene usted sobre su información de salud:\n"));
            iTextSharp.text.List list2 = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list2.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list2.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list2.Add(new ListItem("Copia impresa del aviso: En cualquier momento puede solicitar una copia de nuestro Aviso vigente.", _Font10Font));
            //2
            list2.Add(new ListItem("Obtener una copia o solicitar una modificación de su PHI: Tiene derecho de obtener una copia de su PHI que tengamos en nuestro poder. Para obtenerla, debe enviar una petición por escrito al funcionario encargado de la privacidad. Posiblemente apliquemos un cargo menor por el costo de las copias de su información y el franqueo postal. Si considera que la PHI que tenemos de usted es incorrecta, puede solicitarnos que la corrijamos. Para obtenerla, debe enviar una petición por escrito al funcionario encargado de la privacidad.  ", _Font10Font));
            //3
            list2.Add(new ListItem("Solicitar que su PHI se le comunique por un medio alternativo: Por ejemplo, si prefiere que nos comuniquemos con usted por teléfono celular o por escrito a una dirección determinada, etc. Para solicitar que la comunicación de su PHI se haga de manera confidencial, sírvase enviar una petición por escrito al funcionario encargado de la privacidad.", _Font10Font));
            //4
            list2.Add(new ListItem("Dónde conseguir los formularios para presentar las peticiones escritas: Puede obtenerlos llamando o escribiendo al funcionario encargado de la privacidad.", _Font10Font));

            doc.Add(list2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Si tiene preguntas o inquietudes o no entiende este Aviso:\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("Llámenos al (800) 737-0045 y pida hablar con el funcionario encargado de la privacidad de la HIPAA. Si usted considera que se han violado sus derechos de privacidad, puede presentar una queja antes el funcionario encargado de la privacidad o el Secretario de Salud y Servicios Humanos."));
            PdfPTable table3 = new PdfPTable(3);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 80f, 50f, 80f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell1 = new PdfPCell(new Phrase("QUL 4071 ", _Font8Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("CMN HIP Rev 03/16/12", _Font8Font));
            fCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell3.Border = 0;
            table3.AddCell(fCell3);

            doc.Add(table3);


        }
        private void AddAOBPrivacy_PTRightsDoc1_spanish_New(iTextSharp.text.Document doc)
        {

            doc.NewPage();
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font8, new iTextSharp.text.Chunk("Rev 11-12-2013  "));
            //   this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("Notice of Privacy Practices\n"));
            //    this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("March 16, 2012\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font14BoldFont, new Chunk("\nJ & B MEDICAL SUPPLY"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font14BoldFont, new Chunk("NOTIFICACIÓN SOBRE LAS PRÁCTICAS DE PRIVACIDAD DEL PACIENTE"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font14BoldFont, new Chunk("Su información. Sus derechos. Sus responsabilidades."));

            //  Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);


            Chunk c1 = new Chunk("Esta notificación describe cómo puede usarse y divulgarse la información médica sobre usted, y cómo usted puede tener acceso a esta información. ", _Font12Font);
            Chunk c2 = new Chunk("Por favor, revísela cuidadosamente.", _Font11BoldFont);

            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(c2);

            Paragraph P1 = new Paragraph();
            P1.Add(p1);
            doc.Add(P1);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nSus derechos\n"));

            Chunk c3 = new Chunk("Cuando se trata de su información de salud, usted tiene ciertos derechos. ", _Font11BoldFont);
            Chunk c4 = new Chunk("Esta sección explica sus derechos y algunas de nuestras responsabilidades para ayudarlo.", _Font11Font);

            Phrase p2 = new Phrase();
            p2.Add(c3);
            p2.Add(c4);

            Paragraph P2 = new Paragraph();
            P2.Add(p2);
            doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Obtenga una copia electrónica o una copia impresa de su historia médica\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            list.Add(new ListItem("Puede solicitar ver u obtener una copia electrónica o una copia impresa de su historia médica, así como cualquier otra información de salud que tengamos sobre usted. Pregúntenos cómo hacerlo.", _Font11Font));
            list.Add(new ListItem("Le proporcionaremos una copia o un resumen de su información de salud, normalmente dentro de los 30 días de su solicitud. Podemos cargar una tarifa razonable basada en el costo.", _Font11Font));

            doc.Add(list);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Pídanos corregir su historia médica\n"));

            iTextSharp.text.List list1 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list1.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list1.IndentationLeft = 20f;     // Indent the list 20 points
            list1.Add(new ListItem("Puede pedirnos que corrijamos la información de salud sobre usted que cree que es incorrecta o que está incompleta. Pregúntenos cómo hacerlo.", _Font12Font));
            list1.Add(new ListItem("Podemos decir “no” a su solicitud, pero le explicaremos la razón por escrito en un plazo de 60 días.", _Font12Font));

            doc.Add(list1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Solicite comunicaciones confidenciales\n"));

            iTextSharp.text.List list2 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list2.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list2.IndentationLeft = 20f;     // Indent the list 20 points
            list2.Add(new ListItem("Puede pedirnos que nos comuniquemos con usted de una forma específica (por ejemplo, por el teléfono de casa o de la oficina) o que le enviemos un correo a una dirección diferente.", _Font12Font));
            list2.Add(new ListItem("Diremos “sí” a todas las solicitudes razonables.", _Font12Font));

            doc.Add(list2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Pídanos que limitemos lo que usamos o compartimos\n"));

            iTextSharp.text.List list3 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list3.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list3.IndentationLeft = 20f;     // Indent the list 20 points
            list3.Add(new ListItem("Puede pedirnos que no usemos o compartamos cierta información de salud para el tratamiento, pago o procedimientos. No estamos obligados a aceptar su solicitud, y podemos decir “no” si esto puede afectar su atención.", _Font12Font));
            list3.Add(new ListItem("Si paga de su propio bolsillo y completamente por un servicio o por una atención de salud, puede pedirnos que no compartamos esa información para fines de pago o de nuestras operaciones con su aseguradora médica. Diremos “sí” a menos que la ley nos exija compartir esa información.", _Font12Font));

            doc.Add(list3);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Obtenga una lista de aquellos con quienes hemos compartido información\n"));

            iTextSharp.text.List list4 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list4.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list4.IndentationLeft = 20f;     // Indent the list 20 points
            list4.Add(new ListItem("Puede pedir una lista (informe detallado) de las veces que hemos compartido su información de salud en los seis años anteriores a la fecha de su solicitud, con quién la compartimos y por qué.", _Font12Font));
            list4.Add(new ListItem("Incluiremos todas las divulgaciones, excepto aquellas sobre tratamiento, pago y operaciones de atención de la salud, y algunas otras divulgaciones (tales como las que nos pidió hacer). Proporcionaremos un informe detallado por año sin costo, pero aplicaremos una tarifa razonable basada en el costo si pide otro informe dentro de los 12 meses.", _Font12Font));

            doc.Add(list4);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Obtenga una copia de esta notificación de privacidad\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Puede pedir una copia impresa de esta notificación en cualquier momento, aun si ha acordado recibir la notificación en forma electrónica. Le proporcionaremos una copia impresa con prontitud.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Elija a una persona para que lo represente\n"));

            iTextSharp.text.List list5 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list5.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list5.IndentationLeft = 20f;     // Indent the list 20 points
            list5.Add(new ListItem("Si ha dado un poder médico a alguna persona, o si alguna persona es su tutor legal, esa persona puede ejercer sus derechos y tomar decisiones sobre su información de salud.", _Font12Font));
            list5.Add(new ListItem("Nos aseguraremos que la persona tenga esta autoridad y pueda actuar en su nombre antes de tomar cualquier acción.", _Font12Font));

            doc.Add(list5);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Presente una queja si cree que se han violado sus derechos\n"));

            iTextSharp.text.List list6 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list6.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list6.IndentationLeft = 20f;     // Indent the list 20 points
            list6.Add(new ListItem("Puede quejarse si cree que se han violado sus derechos comunicándose con nosotros y utilizando la información de la página 3.", _Font11Font));
            list6.Add(new ListItem("También puede presentar una queja a la Oficina de Derechos Civiles del Departamento de Salud y Servicios Humanos de los Estados Unidos.", _Font11Font));
            list6.Add(new ListItem("No tomaremos represalias contra usted por presentar una queja.", _Font12Font));
            doc.Add(list6);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nSus opciones\n"));

            Chunk c5 = new Chunk("Para cierta información de salud puede darnos a conocer sus opciones sobre lo que compartimos.", _Font11BoldFont);
            Chunk c6 = new Chunk("Si tiene una clara preferencia sobre la forma en que compartimos su información en las situaciones que se describen a continuación, converse con nosotros. Díganos lo que quiere que hagamos y seguiremos sus instrucciones.", _Font11Font);

            Phrase p3 = new Phrase();
            p3.Add(c5);
            p3.Add(c6);

            Paragraph P3 = new Paragraph();
            P3.Add(p3);
            doc.Add(P3);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("En estos casos tiene el derecho y la opción de pedirnos que:\n"));

            iTextSharp.text.List list7 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list7.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list7.IndentationLeft = 20f;     // Indent the list 20 points
            list7.Add(new ListItem("Compartamos información con su familia, amigos cercanos y otras personas involucradas en su atención.", _Font11Font));
            list7.Add(new ListItem("Compartamos información en operaciones de socorro en caso de catástrofe", _Font11Font));
            list7.Add(new ListItem("Incluyamos su información en un directorio de hospital", _Font11Font));
            doc.Add(list7);

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_MIDDLE, _Font11ItalicFont, new Chunk("Si no puede decirnos su preferencia, por ejemplo, si está inconsciente, podemos seguir adelante y compartir su información si creemos que es para su beneficio. También podemos compartir su información cuando sea necesario para disminuir una amenaza grave e inminente a la salud o seguridad.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("En los siguientes casos nunca compartiremos su información, a menos que nos dé su permiso escrito:\n"));

            iTextSharp.text.List list8 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list8.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list8.IndentationLeft = 20f;     // Indent the list 20 points
            list8.Add(new ListItem("Fines de marketing", _Font11Font));
            list8.Add(new ListItem("Venta de su información", _Font11Font));
            list8.Add(new ListItem("Divulgación de notas de psicoterapia", _Font11Font));
            doc.Add(list8);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("En caso de recaudación de fondos:\n"));

            iTextSharp.text.List list9 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list9.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list9.IndentationLeft = 20f;     // Indent the list 20 points
            list9.Add(new ListItem("Podemos comunicarnos con usted a los efectos de recaudar fondos, pero puede pedirnos que no nos comuniquemos con usted nuevamente.", _Font12Font));

            doc.Add(list9);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nNuestros usos y divulgaciones\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("¿Cómo usamos o compartimos normalmente su información de salud?\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Normalmente usamos o compartimos su información de salud de las siguientes formas.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Para su tratamiento\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Podemos usar su información de salud y compartirla con otros profesionales que lo estén tratando.\n"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11ItalicFont, new Chunk("Ejemplo: Un médico que lo está tratando por una lesión le pregunta a otro médico sobre su condición general de salud.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Para dirigir nuestra organización\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Podemos usar y compartir su información de salud para dirigir nuestras operaciones, mejorar su atención y comunicarnos con usted cuando sea necesario.\n"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11ItalicFont, new Chunk("Ejemplo: Usamos su información de salud para administrar su tratamiento y servicios.\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Para facturar por sus servicios\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Podemos usar y compartir su información de salud para facturar y recibir el pago de los planes de salud o de otras entidades.\n"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11ItalicFont, new Chunk("Ejemplo: Proporcionamos información sobre usted a su plan de seguro de salud para que nos pague por sus servicios.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\n¿De qué otra forma podemos usar y compartir su información de salud?\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Estamos autorizados u obligados a compartir su información de otros modos, generalmente en formas que contribuyen al bienestar público, tales como la salud e investigación pública. Debemos cumplir con muchos requisitos legales antes de poder compartir su información para esos fines. Para más información consulte:\n"));

            Anchor HippaLink = new Anchor("www.hhs.gov/ocr/privacy/hipaa/understanding/consumers/index.html.", _standardBoldBlueUnderlineFont);
            HippaLink.Reference = "http://www.hhs.gov/ocr/privacy/hipaa/understanding/consumers/index.html";

            Paragraph P4 = new Paragraph();


            P4.Add(HippaLink);

            doc.Add(P4);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Ayuda a la salud y seguridad pública\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Podemos compartir su información de salud para ciertas situaciones, tales como:\n"));


            iTextSharp.text.List list91 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list91.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list91.IndentationLeft = 20f;     // Indent the list 20 points
            list91.Add(new ListItem("Prevenir enfermedades", _Font11Font));
            list91.Add(new ListItem("Ayudar a los retiros de productos", _Font11Font));
            list91.Add(new ListItem("Informar sobre reacciones adversas a los medicamentos", _Font11Font));
            list91.Add(new ListItem("Informar sobre un posible abuso, negligencia o violencia doméstica", _Font11Font));
            list91.Add(new ListItem("Evitar o reducir una amenaza grave a la salud o seguridad de una persona", _Font11Font));
            doc.Add(list91);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Hacer investigación\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Podemos usar o compartir su información para fines de investigación de la salud.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Cumplir con la ley\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Compartiremos su información si las leyes estatales o federales lo exigen, incluido el Departamento de Salud y Servicios Humanos, si quiere verificar que estamos cumpliendo con la ley federal de privacidad.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Responder a las solicitudes de donación de órganos y tejidos\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Podemos compartir su información de salud con las organizaciones de obtención de órganos.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Trabajar con un médico legista o director de una funeraria\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Podemos compartir información de salud con un médico forense, médico legista o director de una funeraria, cuando una persona fallece.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Tratar las solicitudes de compensación de los trabajadores, aplicación de la ley y otras solicitudes gubernamentales\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Podemos usar o compartir su información de salud:\n"));

            iTextSharp.text.List list10 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list10.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list10.IndentationLeft = 20f;     // Indent the list 20 points
            list10.Add(new ListItem("Para reclamos de compensación de los trabajadores", _Font11Font));
            list10.Add(new ListItem("Para fines de aplicación de la ley o con un agente del orden público", _Font11Font));
            list10.Add(new ListItem("Con agencias de supervisión de la salud para actividades autorizadas por la ley", _Font11Font));
            list10.Add(new ListItem("Para funciones gubernamentales especiales, tales como servicios militares, servicios de seguridad nacional y servicios de protección presidencial", _Font11Font));

            doc.Add(list10);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Responder a juicios y acciones legales\n"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Podemos compartir su información de salud en respuesta a una orden del tribunal u orden administrativa, o en respuesta a una citación.\n"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nNuestras responsabilidades\n"));

            iTextSharp.text.List list11 = new iTextSharp.text.List(iTextSharp.text.List.UNORDERED, 10f);
            list11.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list11.IndentationLeft = 20f;     // Indent the list 20 points
            list11.Add(new ListItem("La ley nos exige mantener la privacidad y la seguridad de su información de salud protegida.", _Font11Font));
            list11.Add(new ListItem("Le informaremos rápidamente si se produce una infracción que pueda haber comprometido la privacidad o la seguridad de su información.", _Font11Font));
            list11.Add(new ListItem("Debemos observar los deberes y las prácticas de privacidad descritas en esta notificación y debemos darle una copia de la misma.", _Font11Font));
            list11.Add(new ListItem("No usaremos ni compartiremos otra información suya diferente a la que se describe aquí, a menos que usted nos lo pida por escrito. Si nos dice que podemos hacerlo, puede cambiar de opinión en cualquier momento. Infórmenos por escrito si cambia de opinión.", _Font11Font));

            doc.Add(list11);
            Anchor HippanoticeLink = new Anchor("www.hhs.gov/ocr/privacy/hipaa/understanding/consumers/noticepp.html.", _standardBoldBlueUnderlineFont);
            HippanoticeLink.Reference = "http://www.hhs.gov/ocr/privacy/hipaa/understanding/consumers/noticepp.html";

            Chunk c7 = new Chunk("Para más información, consulte:", _Font11Font);

            Phrase p4 = new Phrase();
            p4.Add(c7);
            p4.Add(HippanoticeLink);

            Paragraph P5 = new Paragraph();
            P5.Add(p4);
            doc.Add(P5);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nCambios en los términos de esta notificación\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Podemos cambiar los términos de esta notificación, y los cambios se aplicarán a toda la información que tenemos sobre usted. La nueva notificación estará disponible, previa solicitud, en nuestra oficina y en nuestro sitio web.\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14BoldFont, new Chunk("\nSi tiene preguntas, por favor comuníquese con un funcionario de privacidad de J & B al teléfono 248-896-6238, o envíe un correo electrónico a sbigger@jandbmedical.com.\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font14Font, new Chunk("\nEsta notificación entrará en vigencia a partir del 1 de septiembre de 2015."));

        }
        private void AddAOBPrivacy_PTRightsDoc2(iTextSharp.text.Document doc)
        {

            doc.NewPage();
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font9, new iTextSharp.text.Chunk("QUL 4017	-----CMN HIP Rev 03/16/12"));
            PdfPTable table3 = new PdfPTable(3);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 80f, 50f, 80f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell1 = new PdfPCell(new Phrase("QUL 4071 ", _Font8Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("VER Rev 12/1508", _Font8Font));
            fCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            //  doc.Add(table3);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldFont, new Chunk("Patient Rights & Responsibilities\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldFont, new Chunk("Consent to Privacy Practices\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldFont, new Chunk("March 16, 2012\n\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new Chunk("Patient Rights:\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem("The patient has the right to considerate and respectful service.", _Font11Font));
            //2
            list.Add(new ListItem("The patient has the right to obtain service without regard to race, creed, national origin, sex, age, disability, diagnosis, or religious affiliation.", _Font11Font));
            //3
            list.Add(new ListItem("Subject to applicable law, the patient has the right to confidentiality of all information pertaining to his/her medical equipment service. Individuals or organizations not involved in the patient’s care, may not have access to the information without the patient’s written consent.", _Font11Font));
            //4
            list.Add(new ListItem("The patient has the right to make informed decisions about his/her care.", _Font11Font));
            //5
            list.Add(new ListItem("The patient has the right to reasonable continuity of care and service.", _Font11Font));
            //6
            list.Add(new ListItem("The patient has the right to voice grievances without fear of termination of service or other reprisal in the service process.", _Font11Font));
            //7
            list.Add(new ListItem("The patient has the right to obtain warranty information that is included on/in packaging from the manufacturer.", _Font11Font));
            //8
            list.Add(new ListItem("The patient has that right to contact J&B at (800)737-0045 with any complaints or concerns regarding supplies or shipments, ", _Font11Font));

            doc.Add(list);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new Chunk("Patient Responsibilities:\n"));

            iTextSharp.text.List list2 = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list2.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list2.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list2.Add(new ListItem("The patient should promptly notify J&B Medical Supply Co Inc. of any equipment failure or damage.", _Font11Font));
            //2
            list2.Add(new ListItem("The patient is responsible for any equipment that is lost or stolen while in their possession and should promptly notify J&B Medical Supply Co Inc. in such instances.", _Font11Font));
            //3
            list2.Add(new ListItem("The patient should promptly notify the J&B Medical Supply Co Inc. of any changes to their address or telephone.", _Font11Font));
            //4
            list2.Add(new ListItem("The patient should promptly notify the J&B Medical Supply Co Inc. of any changes concerning their physician.", _Font11Font));
            //5
            list2.Add(new ListItem("The patient should notify J&B Medical Supply Co Inc of discontinuance of use. ", _Font11Font));
            //6
            list2.Add(new ListItem("Except where contrary to federal or state law, the patient is responsible for any equipment rental and sale charges which the patient’s insurance company/companies does not pay.	", _Font11Font));

            doc.Add(list2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new Chunk("Suggestions or Complaints\n"));

            Chunk c1 = new Chunk("We value your suggestions and will work hard to resolve any complaints. You may direct your suggestions or complaints to the Customer Relations Department (800) 737-0045 or contact us on line at ", _Font11Font);
            Chunk c2 = new Chunk(".All complaints will be handled in a professional and confidential manner. All logged complaints will be investigated, acted upon, and responded to in writing or by telephone by a supervisor within a reasonable amount of time after the receipt of the complaint. If there is no satisfactory resolution of the complaint, the next level of management will be notified. All complaints are reviewed by the quarterly by the Quality Improvement team and are kept confidential. In the event that your complaint is not resolved to your satisfaction after contacting J&B, you can contact our accrediting organization – The Compliance Team at (888) 291-5353.\n\n", _Font11Font);

            Anchor JBInfoEmail = new Anchor("info@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBInfoEmail.Reference = "info@jandbmedical.com";


            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(JBInfoEmail);
            p1.Add(c2);

            Paragraph P = new Paragraph();
            P.IndentationLeft = 20f;

            P.Add(p1);
            doc.Add(P);
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font9, new iTextSharp.text.Chunk("COM 1054	--	COM Rev 03/16/12"));
            PdfPTable table4 = new PdfPTable(3);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 100;
            float[] widths4 = new float[] { 80f, 50f, 80f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell FCell1 = new PdfPCell(new Phrase("COM 1054", _Font8Font));
            FCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            FCell1.Border = 0;
            table4.AddCell(FCell1);

            PdfPCell FCell2 = new PdfPCell(new Phrase("  ", _Font12Font));
            FCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            FCell2.Border = 0;
            table4.AddCell(FCell2);

            PdfPCell FCell3 = new PdfPCell(new Phrase("COM Rev 03/16/12", _Font8Font));
            FCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            FCell3.Border = 0;
            table4.AddCell(FCell3);


            doc.Add(table4);

        }

        private void AddAOBPrivacy_PTRightsDoc2_New(iTextSharp.text.Document doc)
        {

            doc.NewPage();
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font9, new iTextSharp.text.Chunk("QUL 4017	-----CMN HIP Rev 03/16/12"));
            PdfPTable table3 = new PdfPTable(3);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 80f, 50f, 80f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell1 = new PdfPCell(new Phrase("QUL 4071 ", _Font8Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("VER Rev 12/1508", _Font8Font));
            fCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            //  doc.Add(table3);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldFont, new Chunk("Patient Rights & Responsibilities\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldFont, new Chunk("Consent to Privacy Practices\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldFont, new Chunk("March 16, 2012\n\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new Chunk("Patient Rights:\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem("The patient has the right to considerate and respectful service.", _Font11Font));
            //2
            list.Add(new ListItem("The patient has the right to obtain service without regard to race, creed, national origin, sex, age, disability, diagnosis, or religious affiliation.", _Font11Font));
            //3
            list.Add(new ListItem("Subject to applicable law, the patient has the right to confidentiality of all information pertaining to his/her medical equipment service. Individuals or organizations not involved in the patient’s care, may not have access to the information without the patient’s written consent.", _Font11Font));
            //4
            list.Add(new ListItem("The patient has the right to make informed decisions about his/her care.", _Font11Font));
            //5
            list.Add(new ListItem("The patient has the right to reasonable continuity of care and service.", _Font11Font));
            //6
            list.Add(new ListItem("The patient has the right to voice grievances without fear of termination of service or other reprisal in the service process.", _Font11Font));
            //7
            list.Add(new ListItem("The patient has the right to obtain warranty information that is included on/in packaging from the manufacturer.", _Font11Font));
            //8
            list.Add(new ListItem("The patient has that right to contact J&B at (800)737-0045 with any complaints or concerns regarding supplies or shipments, ", _Font11Font));

            doc.Add(list);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new Chunk("Patient Responsibilities:\n"));

            iTextSharp.text.List list2 = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list2.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list2.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list2.Add(new ListItem("The patient should promptly notify J&B Medical Supply Co Inc. of any equipment failure or damage.", _Font11Font));
            //2
            list2.Add(new ListItem("The patient is responsible for any equipment that is lost or stolen while in their possession and should promptly notify J&B Medical Supply Co Inc. in such instances.", _Font11Font));
            //3
            list2.Add(new ListItem("The patient should promptly notify the J&B Medical Supply Co Inc. of any changes to their address or telephone.", _Font11Font));
            //4
            list2.Add(new ListItem("The patient should promptly notify the J&B Medical Supply Co Inc. of any changes concerning their physician.", _Font11Font));
            //5
            list2.Add(new ListItem("The patient should notify J&B Medical Supply Co Inc of discontinuance of use. ", _Font11Font));
            //6
            list2.Add(new ListItem("Except where contrary to federal or state law, the patient is responsible for any equipment rental and sale charges which the patient’s insurance company/companies does not pay.	", _Font11Font));

            doc.Add(list2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12BoldFont, new Chunk("Suggestions or Complaints\n"));

            Chunk c1 = new Chunk("We value your suggestions and will work hard to resolve any complaints. You may direct your suggestions or complaints to the Customer Relations Department (800) 737-0045 or contact us on line at ", _Font11Font);
            Chunk c2 = new Chunk(".All complaints will be handled in a professional and confidential manner. All logged complaints will be investigated, acted upon, and responded to in writing or by telephone by a supervisor within a reasonable amount of time after the receipt of the complaint. If there is no satisfactory resolution of the complaint, the next level of management will be notified. All complaints are reviewed by the quarterly by the Quality Improvement team and are kept confidential. In the event that your complaint is not resolved to your satisfaction after contacting J&B, you can contact our accrediting organization – The Compliance Team at (888) 291-5353.\n\n", _Font11Font);

            Anchor JBInfoEmail = new Anchor("info@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBInfoEmail.Reference = "info@jandbmedical.com";


            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(JBInfoEmail);
            p1.Add(c2);

            Paragraph P = new Paragraph();
            P.IndentationLeft = 20f;

            P.Add(p1);
            doc.Add(P);
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font9, new iTextSharp.text.Chunk("COM 1054	--	COM Rev 03/16/12"));
            PdfPTable table4 = new PdfPTable(3);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 100;
            float[] widths4 = new float[] { 80f, 50f, 80f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell FCell1 = new PdfPCell(new Phrase("COM 1054", _Font8Font));
            FCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            FCell1.Border = 0;
            table4.AddCell(FCell1);

            PdfPCell FCell2 = new PdfPCell(new Phrase("  ", _Font12Font));
            FCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            FCell2.Border = 0;
            table4.AddCell(FCell2);

            PdfPCell FCell3 = new PdfPCell(new Phrase("COM Rev 03/16/12", _Font8Font));
            FCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            FCell3.Border = 0;
            table4.AddCell(FCell3);


            doc.Add(table4);

        }

        private void AddAOBPrivacy_PTRightsDoc2_spanish(iTextSharp.text.Document doc)
        {

            doc.NewPage();
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font9, new iTextSharp.text.Chunk("QUL 4017	-----CMN HIP Rev 03/16/12"));
            PdfPTable table3 = new PdfPTable(3);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 80f, 50f, 80f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell1 = new PdfPCell(new Phrase("QUL 4071 ", _Font8Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("VER Rev 12/1508", _Font8Font));
            fCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            // doc.Add(table3);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("Derechos y Responsabilidades del Paciente\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("Consentimiento a las Prácticas de Privacidad\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("16 de marzo de 2012\n\n"));


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Derechos del Paciente:\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem("El paciente tiene el derecho a un servicio respetuoso y atento.", _Font11Font));
            //2
            list.Add(new ListItem("El paciente tiene derecho a obtener los servicios sin importar su raza, credo, origen nacional, sexo, edad, discapacidad, diagnóstico ni afiliación religiosa.", _Font11Font));
            //3
            list.Add(new ListItem("Con excepción de lo que indique la ley correspondiente, el paciente tiene derecho a la confidencialidad de toda la información perteneciente a sus servicios de equipo médico. Las personas y organizaciones que no participen en la atención del paciente no podrán tener acceso a la información sin el consentimiento del paciente.", _Font11Font));
            //4
            list.Add(new ListItem("El paciente tiene derecho a tomar decisiones informadas acerca de su atención.", _Font11Font));
            //5
            list.Add(new ListItem("El paciente tiene derecho a una continuidad razonable de su atención y del servicio.", _Font11Font));
            //6
            list.Add(new ListItem("El paciente tiene derecho a expresar sus quejas formales sin el temor de que se dé por terminado el servicio ni de represalias en el proceso de servicio.", _Font11Font));
            //7
            list.Add(new ListItem("El paciente tiene derecho a obtener la información de la garantía que está incluida en el embalaje del fabricante.", _Font11Font));
            //8
            list.Add(new ListItem("El paciente tiene derecho a ponerse en contacto con J&B llamando al (800)737-0045 para comunicar quejas e inquietudes respecto a los suministros y envíos.", _Font11Font));

            doc.Add(list);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Responsabilidades del Paciente:\n"));

            iTextSharp.text.List list2 = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list2.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list2.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list2.Add(new ListItem("El paciente debe notificar inmediatamente a J&B Medical Supply Co Inc acerca de cualquier falla del equipo o daño al mismo.", _Font11Font));
            //2
            list2.Add(new ListItem("El pacientes es responsable de todo equipo que se pierda o sea robado mientras está en su poder y deberá notificar inmediatamente a J&B Medical Supply Co Inc en tal circunstancia.", _Font11Font));
            //3
            list2.Add(new ListItem("El paciente debe notificar inmediatamente a J&B Medical Supply Co Inc cualquier cambio en su dirección o teléfono.", _Font11Font));
            //4
            list2.Add(new ListItem("El paciente debe notificar inmediatamente a J&B Medical Supply Co Inc todo cambio relativo a sus médicos.", _Font11Font));
            //5
            list2.Add(new ListItem("El paciente debe notificar a J&B Medical Supply Co Inc cuando suspenda el uso. ", _Font11Font));
            //6
            list2.Add(new ListItem("Con excepción de lo que las leyes estatales o federales estipulen en contrario, el paciente es responsable de todos los cargos por alquiler y venta de equipo que no sean pagados por su compañía o compañías aseguradoras.	", _Font11Font));

            doc.Add(list2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11BoldFont, new Chunk("Sugerencias o Quejas\n"));

            Chunk c1 = new Chunk("Valoramos sus sugerencias y trabajaremos arduamente para resolver cualquier queja. Puede dirigir sus sugerencias y quejas al Departamento de Relaciones con el Cliente llamando al (800) 737-0045, o comunicarse con nosotros a la dirección electrónica ", _Font11Font);
            Chunk c2 = new Chunk(".Todas las quejas se tratarán en forma confidencial y profesional. En un plazo razonable tras haber recibido una queja, un supervisor investigará, procederá en consecuencia y responderá por escrito o por teléfono a todas las quejas registradas. Si la queja no se resuelve de manera satisfactoria, se notificará a la gerencia de nivel superior. El equipo de Mejoramiento de la Calidad revisa trimestralmente todas las quejas y mantiene la confidencialidad. En caso de que su queja no se resuelva en forma satisfactoria para usted tras haberse puesto en contacto con J&B, puede comunicarse con la organización que nos acreditó, The Compliance Team, llamando al (888) 291-5353.\n\n", _Font11Font);

            Anchor JBInfoEmail = new Anchor("info@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBInfoEmail.Reference = "info@jandbmedical.com";


            Phrase p1 = new Phrase();
            p1.Add(c1);
            p1.Add(JBInfoEmail);
            p1.Add(c2);

            Paragraph P = new Paragraph();
            P.IndentationLeft = 20f;

            P.Add(p1);
            doc.Add(P);
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font9, new iTextSharp.text.Chunk("COM 1054	--	COM Rev 03/16/12"));
            PdfPTable table4 = new PdfPTable(3);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 100;
            float[] widths4 = new float[] { 80f, 50f, 80f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell FCell1 = new PdfPCell(new Phrase("COM 1054", _Font8Font));
            FCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            FCell1.Border = 0;
            table4.AddCell(FCell1);

            PdfPCell FCell2 = new PdfPCell(new Phrase("  ", _Font12Font));
            FCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            FCell2.Border = 0;
            table4.AddCell(FCell2);

            PdfPCell FCell3 = new PdfPCell(new Phrase("COM Rev 03/16/12", _Font8Font));
            FCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            FCell3.Border = 0;
            table4.AddCell(FCell3);


            doc.Add(table4);

        }

        private void AddAOBPrivacy_PTRightsDoc3(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();
            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("Account#: " + _vm.Account)); // addbarcodehere



            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Phone: " + phone + "\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("Account#: "+_vm.Account ));

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));

            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("\n"));
            PdfPTable table = new PdfPTable(1);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("");

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Member Name:  ", _Font12Font);

            Chunk P1C2 = new Chunk(_vm.details.firstName, _Font12BoldUnderlineFont);
            P1.Add(P1C1);
            P1.Add(P1C2);

            doc.Add(P1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("J&B is authorized to speak to _____________________________ regarding all aspect of my account"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font9, new Chunk("                                                             (First Name & Last Name/Relationship)\n\n"));



            PdfPTable table1 = new PdfPTable(5);
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table1.WidthPercentage = 100;
            float[] widths1 = new float[] { 170f, 10f, 150f, 10f, 150f };
            table1.SetWidths(widths1);

            table1.DefaultCell.Border = Rectangle.NO_BORDER;

            //"C:\\images" + "\\chk.jpg"
            //
            iTextSharp.text.Image jpg11 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\chk.jpg");
            jpg11.ScaleToFit(10, 10);
            PdfPCell ImageCell = new PdfPCell(jpg11);
            ImageCell.Colspan = 1; // either 1 if you need to insert one cell
            ImageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            ImageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            // table.AddCell(cell);
            table1.AddCell(new Phrase("Preferred method of contact:", _Font12Font));
            table1.AddCell(ImageCell);
            table1.AddCell(new Phrase("Phone:_________________", _Font12Font));
            table1.AddCell(ImageCell);
            table1.AddCell(new Phrase("Email:_________________", _Font12Font));

            PdfPTable tablemsg = new PdfPTable(5);
            tablemsg.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            tablemsg.WidthPercentage = 100;
            float[] widthsmsg = new float[] { 170f, 10f, 80f, 10f, 80f };
            tablemsg.SetWidths(widthsmsg);

            tablemsg.DefaultCell.Border = Rectangle.NO_BORDER;

            tablemsg.AddCell(new Phrase("J&B is authorized to leave detailed messages:", _Font12Font));
            tablemsg.AddCell(ImageCell);
            tablemsg.AddCell(new Phrase("Yes	", _Font12Font));
            tablemsg.AddCell(ImageCell);
            tablemsg.AddCell(new Phrase("No ", _Font12Font));

            doc.Add(table1);

            doc.Add(tablemsg);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _standardBoldFont, new Chunk("\nAssignment of Benefits\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Supplies may include: Breast Pumps, Diabetics, Enteral, Incontinence, Ostomy, TENS Unit, Urological and/or Wound Care\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem(" I understand that signing this form authorizes J&B Medical Supply to submit claims on my behalf directly to my private health insurance provider.  J&B Medical Supply will accept assignment of these benefits. This means that J&B Medical Supply will receive direct payment for the supplies provided. I agree to cooperate fully to secure such payment.  I acknowledge that I am responsible for knowledge of and payment of co-pay, deductibles, and items not offered as a benefit.", _Font12Font));

            //2
            list.Add(new ListItem(" I understand that signing this form authorizes the release of medical or other information to my health insurance provider, applicable medical professionals, J&B Medical Co., Inc., and the affiliates of J&B Medical Supply Co., Inc.", _Font12Font));
            //3
            list.Add(new ListItem(" I understand that I must return this signed form to J&B Medical Supply in order for J&B Medical Supply to continue to provide me with supplies.  If I choose not to sign and return this form, J&B Medical Supply will not be able to continue to provide me with supplies.  ", _Font12Font));

            //4
            list.Add(new ListItem(" I have also received the Notice of Privacy Practices & Patients Rights & Responsibilities, CMS supplier standards, Product instructions, Complaint process, Warranty Information (see attached sheets). \n", _Font12Font));
            doc.Add(list);
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n__________________________                                __________________"));
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("                   Signature                             Date"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n"));


            PdfPTable table2 = new PdfPTable(3);
            table2.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table2.WidthPercentage = 100;
            float[] widths2 = new float[] { 90f, 50f, 80f };
            table2.SetWidths(widths2);

            table2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell Cell1 = new PdfPCell(new Phrase("________________________________ ", _Font12Font));
            Cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell1.Border = 0;
            table2.AddCell(Cell1);

            PdfPCell Cell5 = new PdfPCell(new Phrase("  ", _Font12Font));
            Cell5.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell5.Border = 0;
            table2.AddCell(Cell5);

            PdfPCell Cell2 = new PdfPCell(new Phrase("_______________________ ", _Font12Font));
            Cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell2.Border = 0;
            table2.AddCell(Cell2);

            PdfPCell Cell3 = new PdfPCell(new Phrase("Signature", _Font12Font));
            Cell3.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell3.Border = 0;
            table2.AddCell(Cell3);

            PdfPCell Cell6 = new PdfPCell(new Phrase("  ", _Font12Font));
            Cell6.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell6.Border = 0;
            table2.AddCell(Cell6);

            PdfPCell Cell4 = new PdfPCell(new Phrase("Date", _Font12Font));
            Cell4.Border = 0;
            Cell4.HorizontalAlignment = Element.ALIGN_CENTER;
            table2.AddCell(Cell4);



            doc.Add(table2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldFont, new Chunk("\nIf you are not the member and are signing on their behalf, please complete the following:"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Name: __________________________________________Relationship: ______________________ "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Address: _____________________City: _____________State/Zip: _________ Phone: ___________"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Reason why customer cannot sign this form: __________________________________________"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\nBy signing on behalf of the customer, I acknowledge that I have the authority to do so.\n\n"));

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("QUL 4071                                                                     VER Rev 12/1508"));
            PdfPTable table33 = new PdfPTable(3);
            table33.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table33.WidthPercentage = 100;
            float[] widths33 = new float[] { 80f, 50f, 80f };
            table33.SetWidths(widths33);

            table33.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell11 = new PdfPCell(new Phrase("QUL 4071 ", _Font9));
            fCell11.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell11.Border = 0;
            table33.AddCell(fCell1);

            PdfPCell fCell22 = new PdfPCell(new Phrase("  ", _Font12Font));
            fCell22.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell22.Border = 0;
            table33.AddCell(fCell22);

            PdfPCell fCell33 = new PdfPCell(new Phrase("VER Rev 12/1508", _Font9));
            fCell33.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell33.Border = 0;
            table33.AddCell(fCell33);


            doc.Add(table33);

        }

        private void AddAOBPrivacy_PTRightsDoc3_New(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();
            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(50, 50);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("Account#: " + _vm.Account));

            PdfPTable table5 = new PdfPTable(5);
            table5.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table5.WidthPercentage = 100;
            float[] widths5 = new float[] { 55f, 130f, 20f, 70f, 65f };
            table5.SetWidths(widths5);

            table5.DefaultCell.Border = Rectangle.NO_BORDER;

            table5.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("J & B Medical Supply", _Font25BoldItalicFont));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table5.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table5.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("Account# " + _vm.Account, _Font14BoldFont));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table5.AddCell(fCell3);
            table5.AddCell(image39);

            //if (_vm.Option != "1")
            //    table5.AddCell(image39);
            //else
            //{
            //    PdfPCell fCell4 = new PdfPCell(new Phrase("  ", _Font11Font));
            //    fCell4.HorizontalAlignment = Element.ALIGN_LEFT;
            //    fCell4.Border = 0;
            //    table5.AddCell(fCell4);
            //}

            table5.DefaultCell.Padding = 0;

            doc.Add(table5);



            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(2.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);


            PdfPTable table4 = new PdfPTable(4);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 100;
            float[] widths4 = new float[] { 110f, 20f, 80f, 90f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell41 = new PdfPCell(new Phrase("Please complete this form and fax it \n to our dedicated line 1.800.737.0012,\n Email to: JBDocs@jandbmedical.com", _Font10Font));
            fCell41.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell41.Border = 0;
            table4.AddCell(fCell41);

            PdfPCell fCell42 = new PdfPCell(new Phrase("", _Font10Font));
            fCell42.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell42.Border = 0;
            table4.AddCell(fCell42);

            PdfPCell fCell43 = new PdfPCell(new Phrase(" \n\n\n", _Font11Font));
            fCell43.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell43.Border = 0;

            table4.AddCell(fCell43);

            PdfPCell fCell44 = new PdfPCell(new Phrase("or mail to: ATTN: Customer Service \n J&B Medical Supply Co.\n50496 West Pontiac Trail\nWixom, MI 48393", _Font10Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell44.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell44.Border = 0;
            table4.AddCell(fCell44);


            doc.Add(table4);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11Font, new Chunk("Durable Medical Equipment"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font25BoldFont, new Chunk("Assignment of Benefits"));

            //Paragraph P1 = new Paragraph();

            //Chunk P1C1 = new Chunk("Customer Name: ", _Font11Font);

            //Chunk P1C2 = new Chunk(_vm.details.firstName , _Font11Font);

            //P1.Add(P1C1);
            //P1.Add(P1C2);

            //doc.Add(P1);

            // Paragraph P2 = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            ///doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11Font, new Chunk("\n"));
            PdfPTable tab1 = new PdfPTable(3);
            tab1.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            tab1.WidthPercentage = 90;
            float[] wid1 = new float[] { 10f, 110f, 500f };
            tab1.SetWidths(wid1);

            tab1.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tab1_f = new PdfPCell(new Phrase("", _Font11Font));
            tab1_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f.Border = 0;
            tab1.AddCell(tab1_f);


            PdfPCell tab1_f1 = new PdfPCell(new Phrase("Customer Name: ", _Font11Font));
            tab1_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f1.Border = 0;
            tab1.AddCell(tab1_f1);

            PdfPCell tab1_f2 = new PdfPCell(new Phrase(_vm.details.firstName, _Font11Font));
            tab1_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f2.Border = 0;
            tab1_f2.BorderWidthBottom = 0.5f;
            tab1.AddCell(tab1_f2);



            doc.Add(tab1);


            PdfPTable tab2 = new PdfPTable(3);
            tab2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2.WidthPercentage = 90;
            float[] wid2 = new float[] { 10f, 110f, 500f };
            tab2.SetWidths(wid2);

            tab2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tab2_f = new PdfPCell(new Phrase("", _Font11Font));
            tab2_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f.Border = 0;
            tab2.AddCell(tab2_f);

            PdfPCell tab2_f1 = new PdfPCell(new Phrase("Street Address: ", _Font11Font));
            tab2_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f1.Border = 0;
            tab2.AddCell(tab2_f1);

            PdfPCell tab2_f2 = new PdfPCell(new Phrase(_vm.details.address1 + "," + _vm.details.address2, _Font11Font));
            tab2_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f2.Border = 0;
            tab2_f2.BorderWidthBottom = 0.5f;
            tab2.AddCell(tab2_f2);

            doc.Add(tab2);


            PdfPTable tab3 = new PdfPTable(7);
            tab3.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3.WidthPercentage = 90;
            float[] wid3 = new float[] { 10f, 30f, 100f, 30f, 80f, 25f, 80f };
            tab3.SetWidths(wid3);

            tab3.DefaultCell.Border = Rectangle.NO_BORDER;


            PdfPCell tab3_f = new PdfPCell(new Phrase("", _Font11Font));
            tab3_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f.Border = 0;
            tab3.AddCell(tab3_f);

            PdfPCell tab3_f1 = new PdfPCell(new Phrase("City: ", _Font11Font));
            tab3_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f1.Border = 0;
            tab3.AddCell(tab3_f1);

            PdfPCell tab3_f2 = new PdfPCell(new Phrase(_vm.details.city, _Font11Font));
            tab3_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f2.Border = 0;
            tab3_f2.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f2);

            PdfPCell tab3_f3 = new PdfPCell(new Phrase("State: ", _Font11Font));
            tab3_f3.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f3.Border = 0;
            tab3.AddCell(tab3_f3);

            PdfPCell tab3_f4 = new PdfPCell(new Phrase(_vm.details.state, _Font11Font));
            tab3_f4.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f4.Border = 0;
            tab3_f4.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f4);

            PdfPCell tab3_f5 = new PdfPCell(new Phrase("Zip: ", _Font11Font));
            tab3_f5.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f5.Border = 0;
            tab3.AddCell(tab3_f5);

            PdfPCell tab3_f6 = new PdfPCell(new Phrase(_vm.details.zipcode, _Font11Font));
            tab3_f6.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f6.Border = 0;
            tab3_f6.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f6);

            doc.Add(tab3);

            PdfPTable tabEmail = new PdfPTable(3);
            tabEmail.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            tabEmail.WidthPercentage = 90;
            float[] widEmail = new float[] { 10f, 50f, 500f };
            tabEmail.SetWidths(widEmail);

            tabEmail.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tabEmail_f = new PdfPCell(new Phrase("", _Font11Font));
            tabEmail_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tabEmail_f.Border = 0;
            tabEmail.AddCell(tabEmail_f);


            PdfPCell tabEmail_f1 = new PdfPCell(new Phrase("Email:", _Font11Font));
            tabEmail_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tabEmail_f1.Border = 0;
            tabEmail.AddCell(tabEmail_f1);

            PdfPCell tabEmail_f2 = new PdfPCell(new Phrase(_vm.details.Email, _Font11Font));
            tabEmail_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tabEmail_f2.Border = 0;
            tabEmail_f2.BorderWidthBottom = 0.5f;
            tabEmail.AddCell(tabEmail_f2);



            doc.Add(tabEmail);


            // this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("Customer Name:                                " +_vm.details.firstName +"                                 ."));
            // this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("\nStreet Address:  " + _vm.details.address1 +","+  _vm.details.address2 +"                                        ."));
            //  this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("\nCity :                  " + _vm.details.city    +   ",              State :     " + _vm.details.state+      ",             Zip :   " + _vm.details.zipcode +"          ."));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font10Font, new Chunk("\nThank you for your interest in receiving your medical supplies (including incontinence, urological, ostomy, wound care, TENS units, enteral feeding and/or diabetics) through J&B Medical Supply. We are honored to serve as your provider of choice for home medical equipment and supplies. Our billing department will conveniently submit all claims for you to ensure appropriate coverage of the products and services we provide. Please sign this Assignment of Benefits (AOB) form so that we may submit your claims to Medicare and/or your private health insurance provider.\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem(" I understand that signing this form authorizes J&B Medical Supply to submit claims on my behalf directly to Medicaid, Medicare and/or my private health insurance provider. J&B Medical Supply will accept assignment of these benefits. This means that J&B Medical Supply will receive direct payment for the supplies and services provided. I agree to cooperate fully to secure such payment. I acknowledge that I am responsible for payment of co-pay, deductibles, and items not offered as a benefit.", _Font10Font));

            //2
            list.Add(new ListItem(" I also understand that signing this form authorizes the release of medical or other information to the Centers for Medicare & Medicaid Services, my health insurance provider, J&B Medical Co., Inc., and the affiliates of J&B Medical Supply Co., Inc.", _Font11Font));
            //3
            list.Add(new ListItem(" I further understand that I must return this signed AOB form to J&B Medical Supply in order for J&B Medical Supply to continue to provide me with durable medical equipment products and services. I understand that if I choose not to sign and return this form, J & B Medical Supply will not be able to continue to provide me with durable medical equipment products and services.", _Font10Font));

            //4
            list.Add(new ListItem(" I have also received the Notice of Privacy Practices & Patients Rights & Responsibilities, CMS supplier standards, Product instructions, Complaint process, Warranty Information (see attached sheets).\n", _Font10Font));
            doc.Add(list);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9, new Chunk("\n"));

            PdfPTable table2 = new PdfPTable(3);
            table2.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table2.WidthPercentage = 100;
            float[] widths2 = new float[] { 90f, 50f, 80f };
            table2.SetWidths(widths2);

            table2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell Cell1 = new PdfPCell(new Phrase("________________________________ ", _Font10Font));
            Cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell1.Border = 0;
            table2.AddCell(Cell1);

            PdfPCell Cell5 = new PdfPCell(new Phrase("  ", _Font10Font));
            Cell5.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell5.Border = 0;
            table2.AddCell(Cell5);

            PdfPCell Cell2 = new PdfPCell(new Phrase("        ________________________________ ", _Font10Font));
            Cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell2.Border = 0;
            table2.AddCell(Cell2);

            PdfPCell Cell3 = new PdfPCell(new Phrase("Signature", _Font10Font));
            Cell3.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell3.Border = 0;
            table2.AddCell(Cell3);

            PdfPCell Cell6 = new PdfPCell(new Phrase("  ", _Font10Font));
            Cell6.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell6.Border = 0;
            table2.AddCell(Cell6);

            PdfPCell Cell4 = new PdfPCell(new Phrase("Date", _Font10Font));
            Cell4.Border = 0;
            Cell4.HorizontalAlignment = Element.ALIGN_CENTER;
            table2.AddCell(Cell4);



            doc.Add(table2);

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font10BoldFont, new Chunk("\nIf someone other than the patient/beneficiary is signing this form, please complete the following information for the person signing this form:"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nRelationship to beneficiary: ___________________________________________Phone: (______) _______- ________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nStreet address of person signing: ____________________________________________________________________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nCity: _____________________________________________State: ____________________ Zip: _______________"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nReason why beneficiary cannot sign this form:_____________________________________________________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font10BoldFont, new Chunk("\nBy signing on behalf of the customer, I acknowledge that I have the legal authority to do so.\n"));



            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("QUL 4071                                                                     VER Rev 12/1508"));
            PdfPTable table33 = new PdfPTable(3);
            table33.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table33.WidthPercentage = 100;
            float[] widths33 = new float[] { 80f, 50f, 80f };
            table33.SetWidths(widths33);

            table33.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell11 = new PdfPCell(new Phrase("QUL 4071 ", _Font9));
            fCell11.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell11.Border = 0;
            table33.AddCell(fCell11);

            PdfPCell fCell22 = new PdfPCell(new Phrase("  ", _Font12Font));
            fCell22.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell22.Border = 0;
            table33.AddCell(fCell22);

            PdfPCell fCell33 = new PdfPCell(new Phrase("VER Rev 12/1508", _Font9));
            fCell33.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell33.Border = 0;
            table33.AddCell(fCell33);


            doc.Add(table33);

        }

        private void AddAOBPrivacy_PTRightsDoc3_Chinese(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string fontpath = System.Web.HttpContext.Current.Request.PhysicalApplicationPath +
                           "fonts\\arial_font.ttf";

            //"simsun.ttf" file was downloaded from web and placed in the folder
            BaseFont bf = BaseFont.CreateFont(fontpath, BaseFont.IDENTITY_H,
                                              BaseFont.EMBEDDED);


            //create new font based on BaseFont
            Font font10 = new Font(bf, 10);
            Font font10Bold = new Font(bf, 10, Font.BOLD);
            Font font11 = new Font(bf, 11);
            Font font12 = new Font(bf, 12);
            Font font12Bold = new Font(bf, 12, Font.BOLD);
            Font font12BoldBlueunderline = new Font(bf, 12, 1, Color.BLUE);
            Font font9 = new Font(bf, 9);
            Font font8 = new Font(bf, 8);


            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();
            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(50, 50);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("Account#: " + _vm.Account));

            PdfPTable table5 = new PdfPTable(5);
            table5.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table5.WidthPercentage = 100;
            float[] widths5 = new float[] { 55f, 130f, 20f, 70f, 65f };
            table5.SetWidths(widths5);

            table5.DefaultCell.Border = Rectangle.NO_BORDER;

            table5.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("J & B Medical Supply", _Font25BoldItalicFont));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table5.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table5.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("账号#: " + _vm.Account, font12Bold));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table5.AddCell(fCell3);
            table5.AddCell(image39);

            table5.DefaultCell.Padding = 0;

            doc.Add(table5);



            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(2.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);


            PdfPTable table4 = new PdfPTable(4);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 100;
            float[] widths4 = new float[] { 110f, 20f, 80f, 90f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell41 = new PdfPCell(new Phrase("请在填完本表后将其传真至 我们的专线 1-800-737-0012。, ", font10));
            fCell41.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell41.Border = 0;
            table4.AddCell(fCell41);

            PdfPCell fCell42 = new PdfPCell(new Phrase("", _Font10Font));
            fCell42.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell42.Border = 0;
            table4.AddCell(fCell42);

            PdfPCell fCell43 = new PdfPCell(new Phrase(" \n\n\n", _Font11Font));
            fCell43.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell43.Border = 0;

            table4.AddCell(fCell43);

            PdfPCell fCell44 = new PdfPCell(new Phrase("或邮寄至：收件人：客户服务 \n J&B Medical Supply Co.\n50496 West Pontiac Trail\nWixom, MI 48393", font10));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell44.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell44.Border = 0;
            table4.AddCell(fCell44);


            doc.Add(table4);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, font11, new Chunk("耐用医疗设备"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, font12Bold, new Chunk("保险金转让书"));

            //Paragraph P1 = new Paragraph();

            //Chunk P1C1 = new Chunk("Customer Name: ", _Font11Font);

            //Chunk P1C2 = new Chunk(_vm.details.firstName , _Font11Font);

            //P1.Add(P1C1);
            //P1.Add(P1C2);

            //doc.Add(P1);

            // Paragraph P2 = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            ///doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11Font, new Chunk("\n"));
            PdfPTable tab1 = new PdfPTable(3);
            tab1.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            tab1.WidthPercentage = 90;
            float[] wid1 = new float[] { 10f, 110f, 500f };
            tab1.SetWidths(wid1);

            tab1.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tab1_f = new PdfPCell(new Phrase("", _Font11Font));
            tab1_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f.Border = 0;
            tab1.AddCell(tab1_f);


            PdfPCell tab1_f1 = new PdfPCell(new Phrase("客户姓名: ", font11));
            tab1_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f1.Border = 0;
            tab1.AddCell(tab1_f1);

            PdfPCell tab1_f2 = new PdfPCell(new Phrase(_vm.details.firstName, _Font11Font));
            tab1_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f2.Border = 0;
            tab1_f2.BorderWidthBottom = 0.5f;
            tab1.AddCell(tab1_f2);



            doc.Add(tab1);


            PdfPTable tab2 = new PdfPTable(3);
            tab2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2.WidthPercentage = 90;
            float[] wid2 = new float[] { 10f, 110f, 500f };
            tab2.SetWidths(wid2);

            tab2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tab2_f = new PdfPCell(new Phrase("", _Font11Font));
            tab2_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f.Border = 0;
            tab2.AddCell(tab2_f);

            PdfPCell tab2_f1 = new PdfPCell(new Phrase("街道地址: ", font11));
            tab2_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f1.Border = 0;
            tab2.AddCell(tab2_f1);

            PdfPCell tab2_f2 = new PdfPCell(new Phrase(_vm.details.address1 + "," + _vm.details.address2, _Font11Font));
            tab2_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f2.Border = 0;
            tab2_f2.BorderWidthBottom = 0.5f;
            tab2.AddCell(tab2_f2);

            doc.Add(tab2);


            PdfPTable tab3 = new PdfPTable(7);
            tab3.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3.WidthPercentage = 90;
            float[] wid3 = new float[] { 10f, 30f, 100f, 30f, 80f, 25f, 80f };
            tab3.SetWidths(wid3);

            tab3.DefaultCell.Border = Rectangle.NO_BORDER;


            PdfPCell tab3_f = new PdfPCell(new Phrase("", _Font11Font));
            tab3_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f.Border = 0;
            tab3.AddCell(tab3_f);

            PdfPCell tab3_f1 = new PdfPCell(new Phrase("城市: ", font11));
            tab3_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f1.Border = 0;
            tab3.AddCell(tab3_f1);

            PdfPCell tab3_f2 = new PdfPCell(new Phrase(_vm.details.city, _Font11Font));
            tab3_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f2.Border = 0;
            tab3_f2.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f2);

            PdfPCell tab3_f3 = new PdfPCell(new Phrase("州: ", font11));
            tab3_f3.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f3.Border = 0;
            tab3.AddCell(tab3_f3);

            PdfPCell tab3_f4 = new PdfPCell(new Phrase(_vm.details.state, _Font11Font));
            tab3_f4.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f4.Border = 0;
            tab3_f4.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f4);

            PdfPCell tab3_f5 = new PdfPCell(new Phrase("邮编: ", font11));
            tab3_f5.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f5.Border = 0;
            tab3.AddCell(tab3_f5);

            PdfPCell tab3_f6 = new PdfPCell(new Phrase(_vm.details.zipcode, _Font11Font));
            tab3_f6.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f6.Border = 0;
            tab3_f6.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f6);

            doc.Add(tab3);

            // this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("Customer Name:                                " +_vm.details.firstName +"                                 ."));
            // this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("\nStreet Address:  " + _vm.details.address1 +","+  _vm.details.address2 +"                                        ."));
            //  this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("\nCity :                  " + _vm.details.city    +   ",              State :     " + _vm.details.state+      ",             Zip :   " + _vm.details.zipcode +"          ."));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font10, new Chunk("\n感谢您通过J&B Medical Supply 购买您的医药用品（包括失禁、泌尿、造瘘、伤口护理用品；脉冲波止痛治疗仪、肠道喂养仪和/或糖尿病药物）。因为您选择了我们作为您的家庭医疗设备和用品提供商，我们倍感荣幸。我们的开票部门会适时提交您的全部索赔单，以确保适当承保我们所提供的产品和服务。请签署本保险金转让书(AOB)，以便我们可将您的索赔书提交至联邦医疗保险和/或您的私人医疗保险提供商。\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem(" 本人知道，签署本表，即为授权J & B Medical Supply 代表本人直接向医疗补助计划、联邦医疗保险和/或本人的私人医疗保险提供商提交索赔单。J&B Medical Supply 接受该等保险金转让。这就意味着J&B Medical Supply 会直接收到所提供货物和服务的货款。本人同意全力配合该等货款的收取。本人确认，本人负有支付自付、免赔额部分和保险金未涉及的项目的责任。", font10));

            //2
            list.Add(new ListItem(" 本人还知道，签署本表，即为允许向联邦医疗保险及医疗补助服务中心、本人的医疗保险提供商、J & B Medical Co. Inc. 和Medical Supply Co., Inc. 的关联公司披露病历等资料。", font10));
            //3
            list.Add(new ListItem(" 本人还知道，本人必须将签署后的AOB 表格寄回至J&B Medical Supply，以便其继续向本人提供耐用医疗设备产品和服务。本人知道，如本人选择不签署和寄回本表，J & B Medical Supply 就无法继续向本人提供耐用医疗设备产品和服务。", font10));

            //4
            list.Add(new ListItem(" 本人同时已收到《隐私惯例及患者权利和责任告知书》、《CMS 供应商规范）、《产品说明书》、《投诉程序》和《保修说明书》（见附件）。\n", font10));
            doc.Add(list);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9, new Chunk("\n"));

            PdfPTable table2 = new PdfPTable(3);
            table2.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table2.WidthPercentage = 100;
            float[] widths2 = new float[] { 90f, 50f, 80f };
            table2.SetWidths(widths2);

            table2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell Cell1 = new PdfPCell(new Phrase("________________________________ ", _Font10Font));
            Cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell1.Border = 0;
            table2.AddCell(Cell1);

            PdfPCell Cell5 = new PdfPCell(new Phrase("  ", _Font10Font));
            Cell5.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell5.Border = 0;
            table2.AddCell(Cell5);

            PdfPCell Cell2 = new PdfPCell(new Phrase("        ________________________________ ", _Font10Font));
            Cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell2.Border = 0;
            table2.AddCell(Cell2);

            PdfPCell Cell3 = new PdfPCell(new Phrase("签字：", font10));
            Cell3.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell3.Border = 0;
            table2.AddCell(Cell3);

            PdfPCell Cell6 = new PdfPCell(new Phrase("  ", _Font10Font));
            Cell6.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell6.Border = 0;
            table2.AddCell(Cell6);

            PdfPCell Cell4 = new PdfPCell(new Phrase("日期：", font10));
            Cell4.Border = 0;
            Cell4.HorizontalAlignment = Element.ALIGN_CENTER;
            table2.AddCell(Cell4);



            doc.Add(table2);

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font10Bold, new Chunk("\n如本表由患者/受益人以外的其他人填写，请填写者填妥下表中的相关信息："));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font10, new Chunk("\n与受益人之间的关系: ___________________________________________电话: (______) _______- ________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font10, new Chunk("\n签署人街道地址： ____________________________________________________________________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font10, new Chunk("\n城市: _____________________________________________州: ____________________ 邮编: _______________"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font10, new Chunk("\n受益人无法签署本表的原因:_____________________________________________________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_CENTER, font10Bold, new Chunk("\n本人代表客户签署本表格，即表示确认本人具有相关法定授权。\n"));



            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("QUL 4071                                                                     VER Rev 12/1508"));
            PdfPTable table33 = new PdfPTable(3);
            table33.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table33.WidthPercentage = 100;
            float[] widths33 = new float[] { 80f, 50f, 80f };
            table33.SetWidths(widths33);

            table33.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell11 = new PdfPCell(new Phrase("QUL 4071 ", _Font9));
            fCell11.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell11.Border = 0;
            table33.AddCell(fCell11);

            PdfPCell fCell22 = new PdfPCell(new Phrase("  ", _Font12Font));
            fCell22.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell22.Border = 0;
            table33.AddCell(fCell22);

            PdfPCell fCell33 = new PdfPCell(new Phrase("修订版本号：12/1508", font9));
            fCell33.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell33.Border = 0;
            table33.AddCell(fCell33);


            doc.Add(table33);

        }
        private void AddAOBPrivacy_PTRightsDoc3_Armenian(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string fontpath = System.Web.HttpContext.Current.Request.PhysicalApplicationPath +
                           "fonts\\arial_font.ttf";

            //"simsun.ttf" file was downloaded from web and placed in the folder
            BaseFont bf = BaseFont.CreateFont(fontpath, BaseFont.IDENTITY_H,
                                              BaseFont.EMBEDDED);


            //create new font based on BaseFont
            Font font10 = new Font(bf, 10);
            Font font10Bold = new Font(bf, 10, Font.BOLD);
            Font font11 = new Font(bf, 11);
            Font font12 = new Font(bf, 12);
            Font font12Bold = new Font(bf, 12, Font.BOLD);
            Font font12BoldBlueunderline = new Font(bf, 12, 1, Color.BLUE);
            Font font9 = new Font(bf, 9);
            Font font8 = new Font(bf, 8);


            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();
            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(50, 50);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("Account#: " + _vm.Account));

            PdfPTable table5 = new PdfPTable(5);
            table5.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table5.WidthPercentage = 100;
            float[] widths5 = new float[] { 55f, 130f, 20f, 70f, 65f };
            table5.SetWidths(widths5);

            table5.DefaultCell.Border = Rectangle.NO_BORDER;

            table5.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("J & B Medical Supply", _Font25BoldItalicFont));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table5.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table5.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("账号#: " + _vm.Account, font12Bold));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table5.AddCell(fCell3);
            table5.AddCell(image39);

            table5.DefaultCell.Padding = 0;

            doc.Add(table5);



            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(2.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);


            PdfPTable table4 = new PdfPTable(4);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 100;
            float[] widths4 = new float[] { 110f, 20f, 80f, 90f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell41 = new PdfPCell(new Phrase("请在填完本表后将其传真至 我们的专线 1-800-737-0012。, ", font10));
            fCell41.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell41.Border = 0;
            table4.AddCell(fCell41);

            PdfPCell fCell42 = new PdfPCell(new Phrase("", _Font10Font));
            fCell42.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell42.Border = 0;
            table4.AddCell(fCell42);

            PdfPCell fCell43 = new PdfPCell(new Phrase(" \n\n\n", _Font11Font));
            fCell43.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell43.Border = 0;

            table4.AddCell(fCell43);

            PdfPCell fCell44 = new PdfPCell(new Phrase("或邮寄至：收件人：客户服务 \n J&B Medical Supply Co.\n50496 West Pontiac Trail\nWixom, MI 48393", font10));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell44.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell44.Border = 0;
            table4.AddCell(fCell44);


            doc.Add(table4);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, font11, new Chunk("耐用医疗设备"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, font12Bold, new Chunk("保险金转让书"));

            //Paragraph P1 = new Paragraph();

            //Chunk P1C1 = new Chunk("Customer Name: ", _Font11Font);

            //Chunk P1C2 = new Chunk(_vm.details.firstName , _Font11Font);

            //P1.Add(P1C1);
            //P1.Add(P1C2);

            //doc.Add(P1);

            // Paragraph P2 = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            ///doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11Font, new Chunk("\n"));
            PdfPTable tab1 = new PdfPTable(3);
            tab1.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            tab1.WidthPercentage = 90;
            float[] wid1 = new float[] { 10f, 110f, 500f };
            tab1.SetWidths(wid1);

            tab1.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tab1_f = new PdfPCell(new Phrase("", _Font11Font));
            tab1_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f.Border = 0;
            tab1.AddCell(tab1_f);


            PdfPCell tab1_f1 = new PdfPCell(new Phrase("客户姓名: ", font11));
            tab1_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f1.Border = 0;
            tab1.AddCell(tab1_f1);

            PdfPCell tab1_f2 = new PdfPCell(new Phrase(_vm.details.firstName, _Font11Font));
            tab1_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f2.Border = 0;
            tab1_f2.BorderWidthBottom = 0.5f;
            tab1.AddCell(tab1_f2);



            doc.Add(tab1);


            PdfPTable tab2 = new PdfPTable(3);
            tab2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2.WidthPercentage = 90;
            float[] wid2 = new float[] { 10f, 110f, 500f };
            tab2.SetWidths(wid2);

            tab2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tab2_f = new PdfPCell(new Phrase("", _Font11Font));
            tab2_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f.Border = 0;
            tab2.AddCell(tab2_f);

            PdfPCell tab2_f1 = new PdfPCell(new Phrase("街道地址: ", font11));
            tab2_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f1.Border = 0;
            tab2.AddCell(tab2_f1);

            PdfPCell tab2_f2 = new PdfPCell(new Phrase(_vm.details.address1 + "," + _vm.details.address2, _Font11Font));
            tab2_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f2.Border = 0;
            tab2_f2.BorderWidthBottom = 0.5f;
            tab2.AddCell(tab2_f2);

            doc.Add(tab2);


            PdfPTable tab3 = new PdfPTable(7);
            tab3.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3.WidthPercentage = 90;
            float[] wid3 = new float[] { 10f, 30f, 100f, 30f, 80f, 25f, 80f };
            tab3.SetWidths(wid3);

            tab3.DefaultCell.Border = Rectangle.NO_BORDER;


            PdfPCell tab3_f = new PdfPCell(new Phrase("", _Font11Font));
            tab3_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f.Border = 0;
            tab3.AddCell(tab3_f);

            PdfPCell tab3_f1 = new PdfPCell(new Phrase("城市: ", font11));
            tab3_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f1.Border = 0;
            tab3.AddCell(tab3_f1);

            PdfPCell tab3_f2 = new PdfPCell(new Phrase(_vm.details.city, _Font11Font));
            tab3_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f2.Border = 0;
            tab3_f2.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f2);

            PdfPCell tab3_f3 = new PdfPCell(new Phrase("州: ", font11));
            tab3_f3.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f3.Border = 0;
            tab3.AddCell(tab3_f3);

            PdfPCell tab3_f4 = new PdfPCell(new Phrase(_vm.details.state, _Font11Font));
            tab3_f4.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f4.Border = 0;
            tab3_f4.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f4);

            PdfPCell tab3_f5 = new PdfPCell(new Phrase("邮编: ", font11));
            tab3_f5.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f5.Border = 0;
            tab3.AddCell(tab3_f5);

            PdfPCell tab3_f6 = new PdfPCell(new Phrase(_vm.details.zipcode, _Font11Font));
            tab3_f6.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f6.Border = 0;
            tab3_f6.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f6);

            doc.Add(tab3);

            // this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("Customer Name:                                " +_vm.details.firstName +"                                 ."));
            // this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("\nStreet Address:  " + _vm.details.address1 +","+  _vm.details.address2 +"                                        ."));
            //  this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("\nCity :                  " + _vm.details.city    +   ",              State :     " + _vm.details.state+      ",             Zip :   " + _vm.details.zipcode +"          ."));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font10, new Chunk("\n感谢您通过J&B Medical Supply 购买您的医药用品（包括失禁、泌尿、造瘘、伤口护理用品；脉冲波止痛治疗仪、肠道喂养仪和/或糖尿病药物）。因为您选择了我们作为您的家庭医疗设备和用品提供商，我们倍感荣幸。我们的开票部门会适时提交您的全部索赔单，以确保适当承保我们所提供的产品和服务。请签署本保险金转让书(AOB)，以便我们可将您的索赔书提交至联邦医疗保险和/或您的私人医疗保险提供商。\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem(" 本人知道，签署本表，即为授权J & B Medical Supply 代表本人直接向医疗补助计划、联邦医疗保险和/或本人的私人医疗保险提供商提交索赔单。J&B Medical Supply 接受该等保险金转让。这就意味着J&B Medical Supply 会直接收到所提供货物和服务的货款。本人同意全力配合该等货款的收取。本人确认，本人负有支付自付、免赔额部分和保险金未涉及的项目的责任。", font10));

            //2
            list.Add(new ListItem(" 本人还知道，签署本表，即为允许向联邦医疗保险及医疗补助服务中心、本人的医疗保险提供商、J & B Medical Co. Inc. 和Medical Supply Co., Inc. 的关联公司披露病历等资料。", font10));
            //3
            list.Add(new ListItem(" 本人还知道，本人必须将签署后的AOB 表格寄回至J&B Medical Supply，以便其继续向本人提供耐用医疗设备产品和服务。本人知道，如本人选择不签署和寄回本表，J & B Medical Supply 就无法继续向本人提供耐用医疗设备产品和服务。", font10));

            //4
            list.Add(new ListItem(" 本人同时已收到《隐私惯例及患者权利和责任告知书》、《CMS 供应商规范）、《产品说明书》、《投诉程序》和《保修说明书》（见附件）。\n", font10));
            doc.Add(list);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9, new Chunk("\n"));

            PdfPTable table2 = new PdfPTable(3);
            table2.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table2.WidthPercentage = 100;
            float[] widths2 = new float[] { 90f, 50f, 80f };
            table2.SetWidths(widths2);

            table2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell Cell1 = new PdfPCell(new Phrase("________________________________ ", _Font10Font));
            Cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell1.Border = 0;
            table2.AddCell(Cell1);

            PdfPCell Cell5 = new PdfPCell(new Phrase("  ", _Font10Font));
            Cell5.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell5.Border = 0;
            table2.AddCell(Cell5);

            PdfPCell Cell2 = new PdfPCell(new Phrase("        ________________________________ ", _Font10Font));
            Cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell2.Border = 0;
            table2.AddCell(Cell2);

            PdfPCell Cell3 = new PdfPCell(new Phrase("签字：", font10));
            Cell3.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell3.Border = 0;
            table2.AddCell(Cell3);

            PdfPCell Cell6 = new PdfPCell(new Phrase("  ", _Font10Font));
            Cell6.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell6.Border = 0;
            table2.AddCell(Cell6);

            PdfPCell Cell4 = new PdfPCell(new Phrase("日期：", font10));
            Cell4.Border = 0;
            Cell4.HorizontalAlignment = Element.ALIGN_CENTER;
            table2.AddCell(Cell4);



            doc.Add(table2);

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font10Bold, new Chunk("\n如本表由患者/受益人以外的其他人填写，请填写者填妥下表中的相关信息："));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font10, new Chunk("\n与受益人之间的关系: ___________________________________________电话: (______) _______- ________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font10, new Chunk("\n签署人街道地址： ____________________________________________________________________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font10, new Chunk("\n城市: _____________________________________________州: ____________________ 邮编: _______________"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font10, new Chunk("\n受益人无法签署本表的原因:_____________________________________________________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_CENTER, font10Bold, new Chunk("\n本人代表客户签署本表格，即表示确认本人具有相关法定授权。\n"));



            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("QUL 4071                                                                     VER Rev 12/1508"));
            PdfPTable table33 = new PdfPTable(3);
            table33.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table33.WidthPercentage = 100;
            float[] widths33 = new float[] { 80f, 50f, 80f };
            table33.SetWidths(widths33);

            table33.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell11 = new PdfPCell(new Phrase("QUL 4071 ", _Font9));
            fCell11.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell11.Border = 0;
            table33.AddCell(fCell11);

            PdfPCell fCell22 = new PdfPCell(new Phrase("  ", _Font12Font));
            fCell22.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell22.Border = 0;
            table33.AddCell(fCell22);

            PdfPCell fCell33 = new PdfPCell(new Phrase("修订版本号：12/1508", font9));
            fCell33.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell33.Border = 0;
            table33.AddCell(fCell33);


            doc.Add(table33);

        }

        private void AddAOBPrivacy_PTRightsDoc3_Russian(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string fontpath = System.Web.HttpContext.Current.Request.PhysicalApplicationPath +
                           "fonts\\arial_font.ttf";

            //"simsun.ttf" file was downloaded from web and placed in the folder
            BaseFont bf = BaseFont.CreateFont(fontpath, BaseFont.IDENTITY_H,
                                              BaseFont.EMBEDDED);


            //create new font based on BaseFont
            Font font10 = new Font(bf, 10);
            Font font10Bold = new Font(bf, 10, Font.BOLD);
            Font font11 = new Font(bf, 11);
            Font font12 = new Font(bf, 12);
            Font font12Bold = new Font(bf, 12, Font.BOLD);
            Font font12BoldBlueunderline = new Font(bf, 12, 1, Color.BLUE);
            Font font9 = new Font(bf, 9);
            Font font7 = new Font(bf, 7);
            Font font8 = new Font(bf, 8);
            Font font9Bold = new Font(bf, 9, Font.BOLD);
            Font font8Bold = new Font(bf, 8, Font.BOLD);


            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();
            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(50, 50);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("Account#: " + _vm.Account));

            PdfPTable table5 = new PdfPTable(5);
            table5.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table5.WidthPercentage = 100;
            float[] widths5 = new float[] { 55f, 130f, 20f, 70f, 65f };
            table5.SetWidths(widths5);

            table5.DefaultCell.Border = Rectangle.NO_BORDER;

            table5.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("Компания J&B Medical Supply", _Font18BoldItalicFont));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table5.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table5.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("Счет №: " + _vm.Account, font12Bold));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table5.AddCell(fCell3);
            table5.AddCell(image39);

            table5.DefaultCell.Padding = 0;

            doc.Add(table5);



            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(2.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);


            PdfPTable table4 = new PdfPTable(4);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 100;
            float[] widths4 = new float[] { 110f, 20f, 80f, 90f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell41 = new PdfPCell(new Phrase("Заполните эту форму и отправьте ее по факсу по номеру нашей выделенной линии 1.800.737.0012, ", font9));
            fCell41.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell41.Border = 0;
            table4.AddCell(fCell41);

            PdfPCell fCell42 = new PdfPCell(new Phrase("", _Font9Font));
            fCell42.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell42.Border = 0;
            table4.AddCell(fCell42);

            PdfPCell fCell43 = new PdfPCell(new Phrase(" \n\n\n", _Font9Font));
            fCell43.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell43.Border = 0;

            table4.AddCell(fCell43);

            PdfPCell fCell44 = new PdfPCell(new Phrase("или по почте, адрес: Служба \n поддержки клиентов \n компании J&B Medical Supply Co.\n50496 West Pontiac Trail\nWixom, MI 48393", font9));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell44.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell44.Border = 0;
            table4.AddCell(fCell44);


            doc.Add(table4);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, font9, new Chunk("Медицинское оборудование длительного использования"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, font10Bold, new Chunk("Возмещение страховщиком понесенных расходов"));

            //Paragraph P1 = new Paragraph();

            //Chunk P1C1 = new Chunk("Customer Name: ", _Font11Font);

            //Chunk P1C2 = new Chunk(_vm.details.firstName , _Font11Font);

            //P1.Add(P1C1);
            //P1.Add(P1C2);

            //doc.Add(P1);

            // Paragraph P2 = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            ///doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font10Font, new Chunk("\n"));
            PdfPTable tab1 = new PdfPTable(3);
            tab1.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            tab1.WidthPercentage = 90;
            float[] wid1 = new float[] { 10f, 110f, 500f };
            tab1.SetWidths(wid1);

            tab1.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tab1_f = new PdfPCell(new Phrase("", _Font10Font));
            tab1_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f.Border = 0;
            tab1.AddCell(tab1_f);


            PdfPCell tab1_f1 = new PdfPCell(new Phrase("Имя клиента: ", font10));
            tab1_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f1.Border = 0;
            tab1.AddCell(tab1_f1);

            PdfPCell tab1_f2 = new PdfPCell(new Phrase(_vm.details.firstName, _Font10Font));
            tab1_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f2.Border = 0;
            tab1_f2.BorderWidthBottom = 0.5f;
            tab1.AddCell(tab1_f2);



            doc.Add(tab1);


            PdfPTable tab2 = new PdfPTable(3);
            tab2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2.WidthPercentage = 90;
            float[] wid2 = new float[] { 10f, 110f, 500f };
            tab2.SetWidths(wid2);

            tab2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tab2_f = new PdfPCell(new Phrase("", _Font10Font));
            tab2_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f.Border = 0;
            tab2.AddCell(tab2_f);

            PdfPCell tab2_f1 = new PdfPCell(new Phrase("Адрес: ", font10));
            tab2_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f1.Border = 0;
            tab2.AddCell(tab2_f1);

            PdfPCell tab2_f2 = new PdfPCell(new Phrase(_vm.details.address1 + "," + _vm.details.address2, _Font10Font));
            tab2_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f2.Border = 0;
            tab2_f2.BorderWidthBottom = 0.5f;
            tab2.AddCell(tab2_f2);

            doc.Add(tab2);


            PdfPTable tab3 = new PdfPTable(7);
            tab3.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3.WidthPercentage = 90;
            float[] wid3 = new float[] { 10f, 30f, 40f, 30f, 40f, 60f, 30f };
            tab3.SetWidths(wid3);

            tab3.DefaultCell.Border = Rectangle.NO_BORDER;


            PdfPCell tab3_f = new PdfPCell(new Phrase("", _Font10Font));
            tab3_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f.Border = 0;
            tab3.AddCell(tab3_f);

            PdfPCell tab3_f1 = new PdfPCell(new Phrase("Город: ", font10));
            tab3_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f1.Border = 0;
            tab3.AddCell(tab3_f1);

            PdfPCell tab3_f2 = new PdfPCell(new Phrase(_vm.details.city, _Font10Font));
            tab3_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f2.Border = 0;
            tab3_f2.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f2);

            PdfPCell tab3_f3 = new PdfPCell(new Phrase("Штат: ", font10));
            tab3_f3.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f3.Border = 0;
            tab3.AddCell(tab3_f3);

            PdfPCell tab3_f4 = new PdfPCell(new Phrase(_vm.details.state, _Font10Font));
            tab3_f4.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f4.Border = 0;
            tab3_f4.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f4);

            PdfPCell tab3_f5 = new PdfPCell(new Phrase("Почтовый индекс: ", font10));
            tab3_f5.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f5.Border = 0;
            tab3.AddCell(tab3_f5);

            PdfPCell tab3_f6 = new PdfPCell(new Phrase(_vm.details.zipcode, _Font10Font));
            tab3_f6.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f6.Border = 0;
            tab3_f6.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f6);

            doc.Add(tab3);

            // this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("Customer Name:                                " +_vm.details.firstName +"                                 ."));
            // this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("\nStreet Address:  " + _vm.details.address1 +","+  _vm.details.address2 +"                                        ."));
            //  this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("\nCity :                  " + _vm.details.city    +   ",              State :     " + _vm.details.state+      ",             Zip :   " + _vm.details.zipcode +"          ."));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font10, new Chunk("\nБлагодарим вас за заинтересованность в приобретении медицинской продукции (включая продукцию, которая используется в случае недержания, урологических проблем, для наложения стомы, лечения ран, электро- миостимуляторные устройства, товары для энтерального питания и/или продукцию для диабетиков) в компании J&B Medical Supply. Мы готовы профессионально предоставлять вам услуги в качестве поставщика медицинского оборудования для домашнего использования и расходных материалов. Наш отдел выписки счетов будет выставлять вам счета для обеспечения надежной поставки заказанных вами товаров и услуг. Мы просим вас подписать эту форму возмещения страховщиком понесенных расходов (АОВ), чтобы мы могли представить ваши претензии представителям программы Medicare и/или вашему личному медицинскому страховщику.\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem(" Я осознаю, что, подписывая эту форму, я даю разрешение компании J&B Medical Supply предъявлять претензии от моего имени непосредственно представителям программы Medicaid, Medicare и/или моему личному медицинскому страховщику. Компания J&B Medical Supply принимает передаваемые ей полномочия. Это означает, что компания J&B Medical Supply будет получать прямую оплату за поставляемую продукцию и услуги. Я согласен на полное сотрудничество для обеспечения такой оплаты. Я подтверждаю, что несу ответственность за дополнительную оплату, франшизу и продукцию, не покрываемую программой страхования.", font10));

            //2
            list.Add(new ListItem(" Я осознаю, что, подписывая эту форму, я даю разрешение Центрам услуг по программам Medicare и Medicaid, моему личному страховщику, компании J&B Medical Co., Inc. и ее филиалам на использование медицинской и другой информации.", font10));
            //3
            list.Add(new ListItem(" Я также осознаю, что должен отправить эту подписанную форму AOB в компанию J&B Medical Supply, чтобы компания могла продолжать предоставлять мне медицинское оборудование длительного использования и услуги. Я понимаю, что в случае принятия решения не подписывать и не отправлять эту форму, компания J&B Medical Supply не сможет продолжать предоставлять мне медицинское оборудование длительного использования и услуги.", font10));

            //4
            list.Add(new ListItem(" Я также получил Уведомление о соблюдении конфиденциальности, прав пациентов и обязанностей компании, стандарты для поставщиков CMS, инструкции по использованию продукции, процедуру рассмотрения жалоб, информацию о гарантии (см. прилагаемые страницы).\n", font10));
            doc.Add(list);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9, new Chunk("\n"));

            PdfPTable table2 = new PdfPTable(3);
            table2.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table2.WidthPercentage = 100;
            float[] widths2 = new float[] { 90f, 50f, 80f };
            table2.SetWidths(widths2);

            table2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell Cell1 = new PdfPCell(new Phrase("________________________________ ", _Font10Font));
            Cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell1.Border = 0;
            table2.AddCell(Cell1);

            PdfPCell Cell5 = new PdfPCell(new Phrase("  ", _Font10Font));
            Cell5.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell5.Border = 0;
            table2.AddCell(Cell5);

            PdfPCell Cell2 = new PdfPCell(new Phrase("        ________________________________ ", _Font10Font));
            Cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell2.Border = 0;
            table2.AddCell(Cell2);

            PdfPCell Cell3 = new PdfPCell(new Phrase("Подпись", font10));
            Cell3.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell3.Border = 0;
            table2.AddCell(Cell3);

            PdfPCell Cell6 = new PdfPCell(new Phrase("  ", _Font10Font));
            Cell6.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell6.Border = 0;
            table2.AddCell(Cell6);

            PdfPCell Cell4 = new PdfPCell(new Phrase("Дата", font10));
            Cell4.Border = 0;
            Cell4.HorizontalAlignment = Element.ALIGN_CENTER;
            table2.AddCell(Cell4);



            doc.Add(table2);

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, font9Bold, new Chunk("\nЕсли вместо пациента /заинтересованного лица эту форму подписывает другое лицо, просьба заполнить следующие сведения о лице, подписавшем эту форму:"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font9, new Chunk("\nСтепень родства с заинтересованным лицом: ________________________Номер телефона: (_____) ______- ______"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font9, new Chunk("\nПочтовый адрес подписывающего лица: ____________________________________________________________________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font9, new Chunk("\nГород: ______________________Штат: __________________ Почтовый индекс: _____________"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, font9, new Chunk("\nПричина, по которой заинтересованное лицо не может подписать эту форму:________________________________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_CENTER, font9Bold, new Chunk("\nПодписывая эту форму от имени клиента, я подтверждаю, что имею законные полномочия дляэтого.\n"));



            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("QUL 4071                                                                     VER Rev 12/1508"));
            PdfPTable table33 = new PdfPTable(3);
            table33.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table33.WidthPercentage = 100;
            float[] widths33 = new float[] { 80f, 50f, 80f };
            table33.SetWidths(widths33);

            table33.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell11 = new PdfPCell(new Phrase("QUL 4071", _Font7));
            fCell11.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell11.Border = 0;
            table33.AddCell(fCell11);

            PdfPCell fCell22 = new PdfPCell(new Phrase("  ", _Font7Font));
            fCell22.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell22.Border = 0;
            table33.AddCell(fCell22);

            PdfPCell fCell33 = new PdfPCell(new Phrase("ВЕР. Ред 12/1508", font7));
            fCell33.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell33.Border = 0;
            table33.AddCell(fCell33);


            doc.Add(table33);

        }
        private void AddAOBPrivacy_PTRightsDoc3_spanish(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();
            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(100, 80);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("Núm. de cuenta: " + _vm.Account));

            PdfPTable table3 = new PdfPTable(4);
            table3.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table3.WidthPercentage = 100;
            float[] widths3 = new float[] { 55f, 30f, 50f, 106f };
            table3.SetWidths(widths3);

            table3.DefaultCell.Border = Rectangle.NO_BORDER;

            table3.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table3.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table3.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("50496 West Pontiac Trail Wixom, MI 48393\n Teléfono: " + phone + "\n Fax: (800)737-0012\n Correo electrónico: Info@jandbmedical.com\n Sitio web: jandbmedical.com\n Portal del miembro: jandbportal.com ", _Font11Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table3.AddCell(fCell3);


            doc.Add(table3);

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("\n\n"));

            //Image jpg = Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            //jpg.SetAbsolutePosition(40, doc.PageSize.Height - 120);
            //jpg.ScaleToFit(100, 80);
            //jpg.Alignment = Image.TEXTWRAP | Image.ALIGN_LEFT;

            //doc.Add(jpg);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("Account#: "+_vm.Account ));

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12Font, new Chunk("50496 W. Pontiac Trail, Wixom MI 48393\n Phone: (800) 737-0045\n Fax: (800)737-0012\n Email: Info@jandbmedical.com\n Website: jandbmedical.com\n Member Portal: jandbportal.com "));

            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));

            doc.Add(p);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("\n"));
            PdfPTable table = new PdfPTable(1);
            PdfPCell cell = new PdfPCell();
            float[] widths = new float[] { 50f };
            table.SetWidths(widths);

            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                          // table.AddCell(cell);
            table.AddCell("");

            Paragraph P1 = new Paragraph();
            Chunk P1C1 = new Chunk("Nombre del miembro: ", _Font11Font);

            Chunk P1C2 = new Chunk(_vm.details.firstName, _Font11BoldUnderlineFont);
            P1.Add(P1C1);
            P1.Add(P1C2);

            doc.Add(P1);


            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Autorizo a J&B para que hable con _____________________________sobre todos los aspectos de mi cuenta."));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font8Font, new Chunk("                                                             (Nombre y Apellido/Parentesco o Relación)\n\n"));



            PdfPTable table1 = new PdfPTable(5);
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table1.WidthPercentage = 100;
            float[] widths1 = new float[] { 130f, 10f, 150f, 10f, 165f };
            table1.SetWidths(widths1);

            table1.DefaultCell.Border = Rectangle.NO_BORDER;

            //"C:\\images" + "\\chk.jpg"
            //
            iTextSharp.text.Image jpg11 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\chk.jpg");
            jpg11.ScaleToFit(10, 10);
            PdfPCell ImageCell = new PdfPCell(jpg11);
            ImageCell.Colspan = 1; // either 1 if you need to insert one cell
            ImageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            ImageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            // table.AddCell(cell);
            table1.AddCell(new Phrase("Método de contacto preferido:", _Font11Font));
            table1.AddCell(ImageCell);
            table1.AddCell(new Phrase("Teléfono:_________________", _Font11Font));
            table1.AddCell(ImageCell);
            table1.AddCell(new Phrase("Correo electrónico:________________", _Font11Font));

            PdfPTable tablemsg = new PdfPTable(5);
            tablemsg.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            tablemsg.WidthPercentage = 100;
            float[] widthsmsg = new float[] { 170f, 10f, 80f, 10f, 80f };
            tablemsg.SetWidths(widthsmsg);

            tablemsg.DefaultCell.Border = Rectangle.NO_BORDER;

            tablemsg.AddCell(new Phrase("Autorizo a J&B para que deje mensajes detallados:", _Font11Font));
            tablemsg.AddCell(ImageCell);
            tablemsg.AddCell(new Phrase("Sí  ", _Font11Font));
            tablemsg.AddCell(ImageCell);
            tablemsg.AddCell(new Phrase("No ", _Font11Font));

            doc.Add(table1);

            doc.Add(tablemsg);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font12BoldFont, new Chunk("\nAsignación de Beneficios\n\n"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("Los suministros pueden incluir: Bombas de lactancia, suministros para diabéticos, para alimentación por sonda nasogástrica, para incontinencia, ostomía, unidad TENS, cuidado urológico y de heridas\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem(" Entiendo que al firmar este formulario, autorizo a J&B Medical Supply a presentar solicitudes de pago en mi nombre directamente a Medicaid, Medicare o a mi proveedor de seguro médico privado.  J&B Medical Supply aceptará la cesión de estos beneficios. Esto significa que J&B Medical Supply recibirá el pago directo de los suministros proporcionados. Acepto colaborar plenamente para garantizar dicho pago.  Reconozco que soy responsable de conocer los copagos, los deducibles y los artículos no ofrecidos como beneficios, así como de pagar por los mismos.", _Font11Font));

            //2
            list.Add(new ListItem(" También entiendo que al firmar este formulario autorizo la divulgación de información médica o de otro tipo a mi proveedor de seguro médico, a los profesionales médicos que corresponda, a J&B Medical Co., Inc., y a las empresas afiliadas de J&B Medical Supply Co., Inc.", _Font11Font));
            //3
            list.Add(new ListItem(" Entiendo que debo devolver este formulario firmado a J&B Medical Supply para que J&B Medical Supply continúe entregándome suministros.  Si elijo no firmar y devolver este formulario, J&B Medical Supply no podrá continuar con la entrega de suministros.  ", _Font11Font));

            //4
            list.Add(new ListItem(" Asimismo, he recibido el Aviso de Prácticas de Privacidad y Derechos y Responsabilidades de los Pacientes, las normas de proveedores CMS, las Instrucciones de los Productos, el proceso de Quejas, la Información de la Garantía\"(ver hojas adjuntas).\n", _Font11Font));
            doc.Add(list);
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font12Font, new Chunk("\n__________________________                                __________________"));
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("                   Signature                             Date"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\n"));


            PdfPTable table2 = new PdfPTable(3);
            table2.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table2.WidthPercentage = 100;
            float[] widths2 = new float[] { 90f, 50f, 80f };
            table2.SetWidths(widths2);

            table2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell Cell1 = new PdfPCell(new Phrase("________________________________ ", _Font11Font));
            Cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell1.Border = 0;
            table2.AddCell(Cell1);

            PdfPCell Cell5 = new PdfPCell(new Phrase("  ", _Font11Font));
            Cell5.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell5.Border = 0;
            table2.AddCell(Cell5);

            PdfPCell Cell2 = new PdfPCell(new Phrase("_______________________ ", _Font11Font));
            Cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell2.Border = 0;
            table2.AddCell(Cell2);

            PdfPCell Cell3 = new PdfPCell(new Phrase("Firma", _Font11Font));
            Cell3.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell3.Border = 0;
            table2.AddCell(Cell3);

            PdfPCell Cell6 = new PdfPCell(new Phrase("  ", _Font11Font));
            Cell6.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell6.Border = 0;
            table2.AddCell(Cell6);

            PdfPCell Cell4 = new PdfPCell(new Phrase("Fecha", _Font11Font));
            Cell4.Border = 0;
            Cell4.HorizontalAlignment = Element.ALIGN_CENTER;
            table2.AddCell(Cell4);



            doc.Add(table2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11BoldFont, new Chunk("\nSi usted no es el miembro, pero firma en representación de este, sírvase llenar lo siguiente:"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Nombre: __________________________________________Parentesco o relación: ______________________ "));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Dirección: _____________________Ciudad: _____________Estado/C.P.: _________ Teléfono: ___________"));

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("Razón por la que el paciente no puede firmar este formulario: _______________________________________"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11Font, new Chunk("\nAl firmar en representación del paciente, certifico que tengo la autoridad para hacerlo.\n\n"));

            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("QUL 4071                                                                     VER Rev 12/1508"));
            PdfPTable table33 = new PdfPTable(3);
            table33.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table33.WidthPercentage = 100;
            float[] widths33 = new float[] { 80f, 50f, 80f };
            table33.SetWidths(widths33);

            table33.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell11 = new PdfPCell(new Phrase("QUL 4071 ", _Font8Font));
            fCell11.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell11.Border = 0;
            table33.AddCell(fCell1);

            PdfPCell fCell22 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell22.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell22.Border = 0;
            table33.AddCell(fCell22);

            PdfPCell fCell33 = new PdfPCell(new Phrase("VER Rev 12/1508", _Font8Font));
            fCell33.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell33.Border = 0;
            table33.AddCell(fCell33);


            doc.Add(table33);

        }

        private void AddAOBPrivacy_PTRightsDoc3_spanish_New(iTextSharp.text.Document doc, GeneratorModel _vm)
        {
            string phone = string.Empty;
            if (_vm.details.contactpayer != null)
                phone = _vm.details.contactpayer;
            else
                phone = "(800) 737-0045";
            doc.NewPage();
            Anchor JBDocs = new Anchor("JBDocs@jandbmedical.com", _Font12BoldBlueUnderlineFont);
            JBDocs.Reference = "JBDocs@jandbmedical.com";

            Anchor JBPoratalLink = new Anchor("www.jandbportal.com", _Font12BoldBlueUnderlineFont);
            JBPoratalLink.Reference = "http://www.jandbportal.com";


            iTextSharp.text.Image jpg1 = iTextSharp.text.Image.GetInstance("C:\\images" + "\\Cover_HMO.jpg");
            jpg1.ScaleToFit(50, 50);
            PdfPCell imageCell = new PdfPCell(jpg1);
            imageCell.Colspan = 1; // either 1 if you need to insert one cell
            imageCell.Border = 0;
            // imageCell.HorizontalAlignment =Element.ALIGN_CENTER;
            imageCell.VerticalAlignment = Element.ALIGN_BOTTOM; ;
            // imageCell.se(Element.ALIGN_CENTER);

            //  cell1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_RIGHT, _Font12BoldFont, new Chunk("Account#: " + _vm.Account));

            PdfPTable table5 = new PdfPTable(5);
            table5.HorizontalAlignment = Element.ALIGN_RIGHT;
            // PdfPCell cell1 = new PdfPCell();
            table5.WidthPercentage = 100;
            float[] widths5 = new float[] { 55f, 130f, 20f, 70f, 65f };
            table5.SetWidths(widths5);

            table5.DefaultCell.Border = Rectangle.NO_BORDER;

            table5.AddCell(imageCell);

            PdfPCell fCell1 = new PdfPCell(new Phrase("J & B Medical Supply", _Font25BoldItalicFont));
            fCell1.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell1.Border = 0;
            table5.AddCell(fCell1);

            PdfPCell fCell2 = new PdfPCell(new Phrase("  ", _Font11Font));
            fCell2.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell2.Border = 0;
            table5.AddCell(fCell2);

            PdfPCell fCell3 = new PdfPCell(new Phrase("N.° de cuenta: " + _vm.Account, _Font14BoldFont));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell3.HorizontalAlignment = Element.ALIGN_CENTER;
            fCell3.Border = 0;
            table5.AddCell(fCell3);
            table5.AddCell(image39);

            table5.DefaultCell.Padding = 0;

            doc.Add(table5);



            Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(2.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            doc.Add(p);


            PdfPTable table4 = new PdfPTable(4);
            table4.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table4.WidthPercentage = 100;
            float[] widths4 = new float[] { 120f, 20f, 40f, 115f };
            table4.SetWidths(widths4);

            table4.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell41 = new PdfPCell(new Phrase("Por favor, complete este formulario y envíelo por\nfax a nuestra línea directa 1.800.737.0012", _Font10Font));
            fCell41.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell41.Border = 0;
            table4.AddCell(fCell41);

            PdfPCell fCell42 = new PdfPCell(new Phrase("", _Font10Font));
            fCell42.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell42.Border = 0;
            table4.AddCell(fCell42);

            PdfPCell fCell43 = new PdfPCell(new Phrase(" \n\n\n", _Font11Font));
            fCell43.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell43.Border = 0;

            table4.AddCell(fCell43);

            PdfPCell fCell44 = new PdfPCell(new Phrase("oro envíe un correo a: ATN.: Servicio al cliente\n J&B Medical Supply Co.\n50496 West Pontiac Trail\nWixom, MI 48393", _Font10Font));
            // PdfCell fcell3 = new PdfCell(p);
            // fCell3.AddElement(c);
            fCell44.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell44.Border = 0;
            table4.AddCell(fCell44);


            doc.Add(table4);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11Font, new Chunk("Equipos médicos durables"));
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font25BoldFont, new Chunk("Asignación de beneficios"));

            //Paragraph P1 = new Paragraph();

            //Chunk P1C1 = new Chunk("Customer Name: ", _Font11Font);

            //Chunk P1C2 = new Chunk(_vm.details.firstName , _Font11Font);

            //P1.Add(P1C1);
            //P1.Add(P1C2);

            //doc.Add(P1);

            // Paragraph P2 = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, Color.BLACK, Element.ALIGN_LEFT, 0)));
            ///doc.Add(P2);

            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font11Font, new Chunk("\n"));
            PdfPTable tab1 = new PdfPTable(3);
            tab1.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            tab1.WidthPercentage = 90;
            float[] wid1 = new float[] { 10f, 130f, 480f };
            tab1.SetWidths(wid1);

            tab1.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tab1_f = new PdfPCell(new Phrase("", _Font11Font));
            tab1_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f.Border = 0;
            tab1.AddCell(tab1_f);


            PdfPCell tab1_f1 = new PdfPCell(new Phrase("Nombre del cliente: ", _Font11Font));
            tab1_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f1.Border = 0;
            tab1.AddCell(tab1_f1);

            PdfPCell tab1_f2 = new PdfPCell(new Phrase(_vm.details.firstName, _Font11Font));
            tab1_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab1_f2.Border = 0;
            tab1_f2.BorderWidthBottom = 0.5f;
            tab1.AddCell(tab1_f2);



            doc.Add(tab1);


            PdfPTable tab2 = new PdfPTable(3);
            tab2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2.WidthPercentage = 90;
            float[] wid2 = new float[] { 10f, 110f, 500f };
            tab2.SetWidths(wid2);

            tab2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell tab2_f = new PdfPCell(new Phrase("", _Font11Font));
            tab2_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f.Border = 0;
            tab2.AddCell(tab2_f);

            PdfPCell tab2_f1 = new PdfPCell(new Phrase("Dirección: ", _Font11Font));
            tab2_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f1.Border = 0;
            tab2.AddCell(tab2_f1);

            PdfPCell tab2_f2 = new PdfPCell(new Phrase(_vm.details.address1 + "," + _vm.details.address2, _Font11Font));
            tab2_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab2_f2.Border = 0;
            tab2_f2.BorderWidthBottom = 0.5f;
            tab2.AddCell(tab2_f2);

            doc.Add(tab2);


            PdfPTable tab3 = new PdfPTable(7);
            tab3.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3.WidthPercentage = 90;
            float[] wid3 = new float[] { 10f, 40f, 90f, 40f, 70f, 65f, 40f };
            tab3.SetWidths(wid3);

            tab3.DefaultCell.Border = Rectangle.NO_BORDER;


            PdfPCell tab3_f = new PdfPCell(new Phrase("", _Font11Font));
            tab3_f.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f.Border = 0;
            tab3.AddCell(tab3_f);

            PdfPCell tab3_f1 = new PdfPCell(new Phrase("Ciudad: ", _Font11Font));
            tab3_f1.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f1.Border = 0;
            tab3.AddCell(tab3_f1);

            PdfPCell tab3_f2 = new PdfPCell(new Phrase(_vm.details.city, _Font11Font));
            tab3_f2.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f2.Border = 0;
            tab3_f2.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f2);

            PdfPCell tab3_f3 = new PdfPCell(new Phrase("Estado: ", _Font11Font));
            tab3_f3.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f3.Border = 0;
            tab3.AddCell(tab3_f3);

            PdfPCell tab3_f4 = new PdfPCell(new Phrase(_vm.details.state, _Font11Font));
            tab3_f4.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f4.Border = 0;
            tab3_f4.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f4);

            PdfPCell tab3_f5 = new PdfPCell(new Phrase("Código postal: ", _Font11Font));
            tab3_f5.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f5.Border = 0;
            tab3.AddCell(tab3_f5);

            PdfPCell tab3_f6 = new PdfPCell(new Phrase(_vm.details.zipcode, _Font11Font));
            tab3_f6.HorizontalAlignment = Element.ALIGN_LEFT;
            tab3_f6.Border = 0;
            tab3_f6.BorderWidthBottom = 0.5f;
            tab3.AddCell(tab3_f6);

            doc.Add(tab3);

            // this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("Customer Name:                                " +_vm.details.firstName +"                                 ."));
            // this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("\nStreet Address:  " + _vm.details.address1 +","+  _vm.details.address2 +"                                        ."));
            //  this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font11FontUnderline, new Chunk("\nCity :                  " + _vm.details.city    +   ",              State :     " + _vm.details.state+      ",             Zip :   " + _vm.details.zipcode +"          ."));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font10Font, new Chunk("\nGracias por su interés en recibir sus suministros médicos (incluidos suministros para la incontinencia, urología, ostomía, tratamiento de heridas, unidades TENS, alimentación enteral y/o diabetes) a través de J&B Medical Supply. Nos sentimos muy honrados de servir como el proveedor de su elección para equipos y suministros médicos en el hogar. Nuestro departamento de facturación presentará en forma oportuna todos los reclamos por usted para garantizar una cobertura apropiada de los productos y servicios que proporcionamos. Le agradeceríamos que firme este formulario de Asignación de Beneficios (Assignment of Benefits, AOB) de modo que podamos presentar sus reclamos a Medicare y/o a su aseguradora médica privada.\n"));

            iTextSharp.text.List list = new iTextSharp.text.List(iTextSharp.text.List.ORDERED, 10f);
            list.SetListSymbol("\u2022");   // Set the bullet symbol (without this a hypen starts each list item)
            list.IndentationLeft = 20f;     // Indent the list 20 points
            //1
            list.Add(new ListItem(" Entiendo que la firma de este formulario autoriza a J&B Medical Supply a presentar reclamos en mi nombre directamente a Medicaid, Medicare y/o mi aseguradora médica privada. J&B Medical Supply aceptará la asignación de estos beneficios. Esto significa que J&B Medical Supply recibirá el pago directo por los suministros y servicios proporcionados. Acepto cooperar completamente para asegurar dicho pago. Reconozco que soy responsable de pagar eI copago, los deducibles y los artículos no ofrecidos como beneficio.", _Font10Font));

            //2
            list.Add(new ListItem(" También entiendo que la firma de este formulario autoriza la divulgación de información médica o de otra información al Centro de Servicios de Medicare y Medicaid, a mi aseguradora médica, a J&B Medical Co., Inc., y a las filiales de J&B Medical Supply Co., Inc.", _Font11Font));
            //3
            list.Add(new ListItem(" Además entiendo que debo devolver este formulario firmado de Asignación de Beneficios a J&B Medical Supply para que J&B Medical Supply continúe proporcionándome productos y servicios de equipos médicos duraderos. Entiendo que si elijo no firmar y no devolver este formulario, J & B Medical Supply no podrá seguir proporcionándome productos y servicios de equipos médicos duraderos.", _Font10Font));

            //4
            list.Add(new ListItem(" Asimismo, he recibido la notificación sobre las prácticas de privacidad y derechos y responsabilidades de los pacientes, las normas de los proveedores de CMS, las instrucciones del producto, el proceso de quejas y la información sobre la garantía (consulte las hojas adjuntas).\n", _Font10Font));
            doc.Add(list);
            this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font9, new Chunk("\n"));

            PdfPTable table2 = new PdfPTable(3);
            table2.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table2.WidthPercentage = 100;
            float[] widths2 = new float[] { 90f, 50f, 80f };
            table2.SetWidths(widths2);

            table2.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell Cell1 = new PdfPCell(new Phrase("________________________________ ", _Font10Font));
            Cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell1.Border = 0;
            table2.AddCell(Cell1);

            PdfPCell Cell5 = new PdfPCell(new Phrase("  ", _Font10Font));
            Cell5.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell5.Border = 0;
            table2.AddCell(Cell5);

            PdfPCell Cell2 = new PdfPCell(new Phrase("        ________________________________ ", _Font10Font));
            Cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell2.Border = 0;
            table2.AddCell(Cell2);

            PdfPCell Cell3 = new PdfPCell(new Phrase("Firma", _Font10Font));
            Cell3.HorizontalAlignment = Element.ALIGN_CENTER;
            Cell3.Border = 0;
            table2.AddCell(Cell3);

            PdfPCell Cell6 = new PdfPCell(new Phrase("  ", _Font10Font));
            Cell6.HorizontalAlignment = Element.ALIGN_LEFT;
            Cell6.Border = 0;
            table2.AddCell(Cell6);

            PdfPCell Cell4 = new PdfPCell(new Phrase("Fecha", _Font10Font));
            Cell4.Border = 0;
            Cell4.HorizontalAlignment = Element.ALIGN_CENTER;
            table2.AddCell(Cell4);



            doc.Add(table2);

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_JUSTIFIED, _Font10BoldFont, new Chunk("\nSi alguna persona distinta al paciente/beneficiario está firmando este formulario, por favor complete la siguiente información para la persona que firma este formulario:"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nRelación con el beneficiario: ___________________________________________Teléfono: (______) _______- ________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nDirección de la persona que firma: ______________________________________________________________________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nCiudad: _______________________________________Estado: ________________ Código postal: _____________"));

            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_LEFT, _Font10Font, new Chunk("\nRazón por la que el beneficiario no puede firmar este formulario:_______________________________________________"));
            this.AddParagraphwithIndent(doc, iTextSharp.text.Element.ALIGN_CENTER, _Font10BoldFont, new Chunk("\nAl firmar a nombre del cliente, reconozco que tengo la autoridad legal para hacerlo.\n"));



            // this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _verysmallFont, new Chunk("QUL 4071                                                                     VER Rev 12/1508"));
            PdfPTable table33 = new PdfPTable(3);
            table33.HorizontalAlignment = Element.ALIGN_LEFT;
            // PdfPCell cell1 = new PdfPCell();
            table33.WidthPercentage = 100;
            float[] widths33 = new float[] { 80f, 50f, 80f };
            table33.SetWidths(widths33);

            table33.DefaultCell.Border = Rectangle.NO_BORDER;

            PdfPCell fCell11 = new PdfPCell(new Phrase("QUL 4071 ", _Font9));
            fCell11.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell11.Border = 0;
            table33.AddCell(fCell11);

            PdfPCell fCell22 = new PdfPCell(new Phrase("  ", _Font12Font));
            fCell22.HorizontalAlignment = Element.ALIGN_LEFT;
            fCell22.Border = 0;
            table33.AddCell(fCell22);

            PdfPCell fCell33 = new PdfPCell(new Phrase("VER Rev 12/1508", _Font9));
            fCell33.HorizontalAlignment = Element.ALIGN_RIGHT;
            fCell33.Border = 0;
            table33.AddCell(fCell33);


            doc.Add(table33);

        }

        /// <summary>
        /// Add a blank page to the document.
        /// </summary>
        /// <param name="doc"></param>
        private void AddPageWithInternalLinks(iTextSharp.text.Document doc)
        {
            //Anchor researchAnchor = new Anchor("Research & Hypothesis\n\n", _standardFont);
            //researchAnchor.Reference = "#research"; // this link references a named anchor within the document
            //Anchor graphAnchor = new Anchor("Graph\n\n", _standardFont);
            //graphAnchor.Reference = "#graph";
            //Anchor resultsAnchor = new Anchor("Results & Bibliography", _standardFont);
            //resultsAnchor.Reference = "#results";

            //doc.NewPage();

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _largeFont, new iTextSharp.text.Chunk("TABLE OF CONTENTS\n\n\n\n\n"));

            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _standardFont, researchAnchor);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _standardFont, graphAnchor);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _standardFont, resultsAnchor);
        }




        /// <summary>
        /// Add a page that contains embedded hyperlinks to external resources
        /// </summary>
        /// <param name="doc"></param>
        private void AddPageWithExternalLinks(Document doc)
        {
            //// Generate external links to be embedded in the page
            //iTextSharp.text.Anchor bibliographyAnchor1 = new Anchor("http://teacher.scholastic.com/paperairplane/airplane.htm", _standardFont);
            //bibliographyAnchor1.Reference = "http://teacher.scholastic.com/paperairplane/airplane.htm";
            //Anchor bibliographyAnchor2 = new Anchor("http://www.eecs.berkeley.edu/Programs/doublex/spring02/paperairplane.html", _standardFont);
            //bibliographyAnchor1.Reference = "http://www.eecs.berkeley.edu/Programs/doublex/spring02/paperairplane.html";
            //Anchor bibliographyAnchor3 = new Anchor("http://www.exo.net/~pauld/activities/flying/PaperAirplaneScience.html", _standardFont);
            //bibliographyAnchor1.Reference = "http://www.exo.net/~pauld/activities/flying/PaperAirplaneScience.html";
            //Anchor bibliographyAnchor4 = new Anchor("http://www.littletoyairplanes.com/theoryofflight/02whyplanes.html", _standardFont);
            //bibliographyAnchor4.Reference = "http://www.littletoyairplanes.com/theoryofflight/02whyplanes.html";

            //// The header at the top of the page is an anchor linked to by the table of contents.
            //iTextSharp.text.Anchor contentsAnchor = new iTextSharp.text.Anchor("RESULTS\n\n", _largeFont);
            //contentsAnchor.Name = "results";

            //// Add a new page to the document
            //doc.NewPage();

            //// Add text to the page
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _largeFont, contentsAnchor);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, new Chunk("My hypothesis was incorrect.  The paper airplane made out of construction paper flew the furthest."));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _largeFont, new Chunk("\n\n\n"));
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_CENTER, _largeFont, new Chunk("BIBLIOGRAPHY\n\n"));

            //// Add the links to the page
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, bibliographyAnchor1);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, bibliographyAnchor2);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, bibliographyAnchor3);
            //this.AddParagraph(doc, iTextSharp.text.Element.ALIGN_LEFT, _standardFont, bibliographyAnchor4);
        }

        /// <summary>
        /// Set margins and page size for the document
        /// </summary>
        /// <param name="doc"></param>
        private void SetStandardPageSize(iTextSharp.text.Document doc)
        {
            // Set margins and page size for the document
            doc.SetMargins(20, 20, 20, 20);
            // There are a huge number of possible page sizes, including such sizes as
            // EXECUTIVE, POSTCARD, LEDGER, LEGAL, LETTER_LANDSCAPE, and NOTE
            doc.SetPageSize(new iTextSharp.text.Rectangle(iTextSharp.text.PageSize.LETTER.Width,
                iTextSharp.text.PageSize.LETTER.Height));
        }

        /// <summary>
        /// Add a paragraph object containing the specified element to the PDF document.
        /// </summary>
        /// <param name="doc">Document to which to add the paragraph.</param>
        /// <param name="alignment">Alignment of the paragraph.</param>
        /// <param name="font">Font to assign to the paragraph.</param>
        /// <param name="content">Object that is the content of the paragraph.</param>
        private void AddParagraph(Document doc, int alignment, iTextSharp.text.Font font, iTextSharp.text.IElement content)
        {
            Paragraph paragraph = new Paragraph();
            paragraph.SetLeading(0f, 1.2f);
            paragraph.Alignment = alignment;
            paragraph.Font = font;
            paragraph.Add(content);
            doc.Add(paragraph);


        }
        private void AddParagraphwithIndent(Document doc, int alignment, iTextSharp.text.Font font, iTextSharp.text.IElement content)
        {
            Paragraph paragraph = new Paragraph();

            paragraph.SetLeading(0f, 1.2f);
            paragraph.IndentationLeft = 20f;

            paragraph.Alignment = alignment;
            paragraph.Font = font;
            paragraph.Add(content);
            doc.Add(paragraph);

        }

        private void AddParagraphwithIndent110(Document doc, int alignment, iTextSharp.text.Font font, iTextSharp.text.IElement content)
        {
            Paragraph paragraph = new Paragraph();

            paragraph.SetLeading(0f, 1.2f);
            paragraph.IndentationLeft = 110f;

            paragraph.Alignment = alignment;
            paragraph.Font = font;
            paragraph.Add(content);
            doc.Add(paragraph);

        }





        /// <summary>
        /// Use this method to write XMP data to a new PDF
        /// </summary>
        /// <param name="writer"></param>
        private void CreateXmpMetadata(iTextSharp.text.pdf.PdfWriter writer)
        {
            // Set up the buffer to hold the XMP metadata
            byte[] buffer = new byte[65536];
            System.IO.MemoryStream ms = new System.IO.MemoryStream(buffer, true);

            try
            {
                // XMP supports a number of different schemas, which are made available by iTextSharp.
                // Here, the Dublin Core schema is chosen.
                iTextSharp.text.xml.xmp.XmpSchema dc = new iTextSharp.text.xml.xmp.DublinCoreSchema();

                // Add Dublin Core attributes
                iTextSharp.text.xml.xmp.LangAlt title = new iTextSharp.text.xml.xmp.LangAlt();
                title.Add("x-default", "My Science Project");
                dc.SetProperty(iTextSharp.text.xml.xmp.DublinCoreSchema.TITLE, title);

                // Dublin Core allows multiple authors, so we create an XmpArray to hold the values
                iTextSharp.text.xml.xmp.XmpArray author = new iTextSharp.text.xml.xmp.XmpArray(iTextSharp.text.xml.xmp.XmpArray.ORDERED);
                author.Add("M. Lichtenberg");
                dc.SetProperty(iTextSharp.text.xml.xmp.DublinCoreSchema.CREATOR, author);

                // Multiple subjects are also possible, so another XmpArray is used
                iTextSharp.text.xml.xmp.XmpArray subject = new iTextSharp.text.xml.xmp.XmpArray(iTextSharp.text.xml.xmp.XmpArray.UNORDERED);
                subject.Add("paper airplanes");
                subject.Add("science project");
                dc.SetProperty(iTextSharp.text.xml.xmp.DublinCoreSchema.SUBJECT, subject);

                // Create an XmpWriter using the MemoryStream defined earlier
                iTextSharp.text.xml.xmp.XmpWriter xmp = new iTextSharp.text.xml.xmp.XmpWriter(ms);
                xmp.AddRdfDescription(dc);  // Add the completed metadata definition to the XmpWriter
                xmp.Close();    // This flushes the XMP metadata into the buffer

                //---------------------------------------------------------------------------------
                // Shrink the buffer to the correct size (discard empty elements of the byte array)
                int bufsize = buffer.Length;
                int bufcount = 0;
                foreach (byte b in buffer)
                {
                    if (b == 0) break;
                    bufcount++;
                }
                System.IO.MemoryStream ms2 = new System.IO.MemoryStream(buffer, 0, bufcount);
                buffer = ms2.ToArray();
                //---------------------------------------------------------------------------------

                // Add all of the XMP metadata to the PDF doc that we're building
                writer.XmpMetadata = buffer;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ms.Close();
                ms.Dispose();
            }
        }

        private void sendEmail(GeneratorModel _vm)//string letterType, Int64? acc, string memName, string lang)
        {

            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient("jandbmedical-com.mail.protection.outlook.com");
            mail.From = new MailAddress("noreply@jandbmedical.com");

            //  mail.To.Add("vtarugu@jandbmedical.com");
            // mail.To.Add("pparvathaneni@jandbmedical.com");

            mail.To.Add("dvasquez@jandbmedical.com");
            //  mail.Bcc.Add("grani@jandbmedical.com");


            mail.Subject = "Letter";
            mail.Body += " <html>";
            mail.Body += "<body>";
            mail.Body += "<table border='1' style='border: groove; width: 600px'>";
            mail.Body += "<tr>";
            mail.Body += "<td style='border: solid 1px solid black;' width ='287'><p><strong>Account #: </strong></p></td><td style='border: solid 1px solid black;' width ='279'><p>" + _vm.Account + "</p></td>";
            mail.Body += "</tr>";

            mail.Body += "<tr>";
            mail.Body += "<td width ='287'><p><strong>Member Name: </strong></p></td><td width ='279'><p>" + (string.IsNullOrEmpty(_vm.details.firstName) ? "" : _vm.details.firstName) + "</p></td>";
            mail.Body += "</tr>";

            //mail.Body += "<tr>";
            //mail.Body += "<td>  Letter Type:  </td> " + letterType + "<td></td>";
            //mail.Body += "</tr>";


            mail.Body += "<tr>";
            mail.Body += "<td width ='287'><p><strong> Letter Type: </strong></p></td><td width ='279'><p>" + GetLetterType(_vm.Option) + "</p></td>";
            mail.Body += "</tr>";

            //mail.Body += "<tr>";
            //mail.Body += "<td>  Language or other special need:  </td> " + lang + "<td></td>";
            //mail.Body += "</tr>";

            mail.Body += "<tr>";
            mail.Body += "<td width ='287'><p><strong>  Language or other special need: </strong></p></td><td width ='279'><p>" + _vm.OtherLanguage + "</p></td>";
            mail.Body += "</tr>";

            mail.Body += "<tr>";
            mail.Body += "<td width ='287'><p><strong>  Braille Letter: </strong></p></td><td width ='279'><p>" + (_vm.NeedBrailleLetter ? "Yes" : "No") + "</p></td>";
            mail.Body += "</tr>";

            mail.Body += "</table>";
            mail.Body += "</body>";
            mail.Body += "</html>";
            mail.IsBodyHtml = true;
            SmtpServer.Send(mail);
        }


        private string GetLetterType(string option)
        {
            var list = new Dictionary<string, string>()
            {
                  { "1", "AOB" }, // AOB
                  { "2", "Contact Letter"},  // Contact Letter : 2
                  {"3",  "Reassessment Letter"},  // Reassessment Letter : 3
                  { "4", "Teacher Letter"}, // Teacher Letter : 4
                  { "5", "Not Eligible Letter"}, // Not Eligible Letter : 5
                  { "6", "Member unable to service Letter"}, //Member unable to service Letter : 6
                  {"7",  "Physician unable to service Letter"}, // Physician unable to service Letter : 7
                  {"8",  "THC Unable to Reorder"}, // THC Unable to Reorder : 8
                  {"9",  "PCP Letter"}, // PCP Letter : 9
                  {"10",  "Diabetic Coinsurance Authorization"}, // Diabetic Coinsurance Authorization : 10
                  {"11",  "JB Customer Satisfaction Letter"}, // JB Customer Satisfaction Letter : 11
                  {"12",  "Complaint Recovery Letter"}, // Complaint Recovery Letter : 12
                  {"13",  "Diabetic Supply Quantity Change"}, // Diabetic Supply Quantity Change : 13
                  { "14", "BCN Order Confirmation Notice"}, // BCN Order Confirmation Notice : 14
                  { "15", "Payment Collection Form"}, // Payment Collection Form :15
                  { "16", "Detailed Receipt Letter"}, //Detailed Receipt Letter : 16
                  { "17", "Libre New Member Letter"},  //Libre New Member Letter : 17
                  { "18", "Libre Training Letter"}, //Libre Training Letter : 18
                  {"19",  "Dexcom New Member Letter"}, // Dexcom New Member Letter : 19
                  {"20",  "Dexcom-G6 New Member Letter"}, // Dexcom New Member Letter-G6 : 20
                  {"21",  "Dexcom-G5 Training Letter"}, // Dexcom-G5 Training Letter : 21
                  {"22",  "Dexcom-G6 Training Letter"}, //Dexcom-G6 Training Letter : 22
                  {"23",  "Complaint Resolution Letter"}, //Complaint Resolution Letter : 23
                  {"24",  "Concern Contact Letter"}, // Concern Contact Letter : 24
                  { "25", "Out of State BCBS Letter"}, // Out of State BCBS Letter : 25
                  { "26", "Medicaid as a Secondary Letter"}, // Medicaid as a Secondary Letter : 26
                  {"27",  "Off Label Member Letter"}, // Off Label Member Letter : 27
                  {"28", "Billing Team only"}, // Symapthy Contact Letter : 28
                  {"29",  "Diabetic Reassessment Letter"},  //Diabetic Reassessment Letter : 29
                                            

            };

            return list.ContainsKey(option) ? list[option] : "";
        }


    }
}